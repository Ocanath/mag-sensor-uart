
mag-uart-sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ee4  08004ee4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004ee4  08004ee4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ee4  08004ee4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ee4  08004ee4  00014ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ee8  08004ee8  00014ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000010  08004efc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08004efc  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008708  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019d1  00000000  00000000  00028740  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c0  00000000  00000000  0002a118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0000c091  00000000  00000000  0002a8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008030  00000000  00000000  00036969  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00042407  00000000  00000000  0003e999  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00080da0  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000006c0  00000000  00000000  00080e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00001c24  00000000  00000000  000814e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004d94 	.word	0x08004d94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004d94 	.word	0x08004d94

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f9bb 	bl	80005a4 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f93d 	bl	80004b8 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f9ad 	bl	80005a4 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f9a3 	bl	80005a4 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f94b 	bl	8000508 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f941 	bl	8000508 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fdiv>:
 8000294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000296:	4657      	mov	r7, sl
 8000298:	464e      	mov	r6, r9
 800029a:	4645      	mov	r5, r8
 800029c:	46de      	mov	lr, fp
 800029e:	0244      	lsls	r4, r0, #9
 80002a0:	b5e0      	push	{r5, r6, r7, lr}
 80002a2:	0046      	lsls	r6, r0, #1
 80002a4:	4688      	mov	r8, r1
 80002a6:	0a64      	lsrs	r4, r4, #9
 80002a8:	0e36      	lsrs	r6, r6, #24
 80002aa:	0fc7      	lsrs	r7, r0, #31
 80002ac:	2e00      	cmp	r6, #0
 80002ae:	d063      	beq.n	8000378 <__aeabi_fdiv+0xe4>
 80002b0:	2eff      	cmp	r6, #255	; 0xff
 80002b2:	d024      	beq.n	80002fe <__aeabi_fdiv+0x6a>
 80002b4:	2380      	movs	r3, #128	; 0x80
 80002b6:	00e4      	lsls	r4, r4, #3
 80002b8:	04db      	lsls	r3, r3, #19
 80002ba:	431c      	orrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	4699      	mov	r9, r3
 80002c0:	469b      	mov	fp, r3
 80002c2:	3e7f      	subs	r6, #127	; 0x7f
 80002c4:	4643      	mov	r3, r8
 80002c6:	4642      	mov	r2, r8
 80002c8:	025d      	lsls	r5, r3, #9
 80002ca:	0fd2      	lsrs	r2, r2, #31
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	0a6d      	lsrs	r5, r5, #9
 80002d0:	0e1b      	lsrs	r3, r3, #24
 80002d2:	4690      	mov	r8, r2
 80002d4:	4692      	mov	sl, r2
 80002d6:	d065      	beq.n	80003a4 <__aeabi_fdiv+0x110>
 80002d8:	2bff      	cmp	r3, #255	; 0xff
 80002da:	d055      	beq.n	8000388 <__aeabi_fdiv+0xf4>
 80002dc:	2280      	movs	r2, #128	; 0x80
 80002de:	2100      	movs	r1, #0
 80002e0:	00ed      	lsls	r5, r5, #3
 80002e2:	04d2      	lsls	r2, r2, #19
 80002e4:	3b7f      	subs	r3, #127	; 0x7f
 80002e6:	4315      	orrs	r5, r2
 80002e8:	1af6      	subs	r6, r6, r3
 80002ea:	4643      	mov	r3, r8
 80002ec:	464a      	mov	r2, r9
 80002ee:	407b      	eors	r3, r7
 80002f0:	2a0f      	cmp	r2, #15
 80002f2:	d900      	bls.n	80002f6 <__aeabi_fdiv+0x62>
 80002f4:	e08d      	b.n	8000412 <__aeabi_fdiv+0x17e>
 80002f6:	486d      	ldr	r0, [pc, #436]	; (80004ac <__aeabi_fdiv+0x218>)
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	5882      	ldr	r2, [r0, r2]
 80002fc:	4697      	mov	pc, r2
 80002fe:	2c00      	cmp	r4, #0
 8000300:	d154      	bne.n	80003ac <__aeabi_fdiv+0x118>
 8000302:	2308      	movs	r3, #8
 8000304:	4699      	mov	r9, r3
 8000306:	3b06      	subs	r3, #6
 8000308:	26ff      	movs	r6, #255	; 0xff
 800030a:	469b      	mov	fp, r3
 800030c:	e7da      	b.n	80002c4 <__aeabi_fdiv+0x30>
 800030e:	2500      	movs	r5, #0
 8000310:	4653      	mov	r3, sl
 8000312:	2902      	cmp	r1, #2
 8000314:	d01b      	beq.n	800034e <__aeabi_fdiv+0xba>
 8000316:	2903      	cmp	r1, #3
 8000318:	d100      	bne.n	800031c <__aeabi_fdiv+0x88>
 800031a:	e0bf      	b.n	800049c <__aeabi_fdiv+0x208>
 800031c:	2901      	cmp	r1, #1
 800031e:	d028      	beq.n	8000372 <__aeabi_fdiv+0xde>
 8000320:	0030      	movs	r0, r6
 8000322:	307f      	adds	r0, #127	; 0x7f
 8000324:	2800      	cmp	r0, #0
 8000326:	dd20      	ble.n	800036a <__aeabi_fdiv+0xd6>
 8000328:	076a      	lsls	r2, r5, #29
 800032a:	d004      	beq.n	8000336 <__aeabi_fdiv+0xa2>
 800032c:	220f      	movs	r2, #15
 800032e:	402a      	ands	r2, r5
 8000330:	2a04      	cmp	r2, #4
 8000332:	d000      	beq.n	8000336 <__aeabi_fdiv+0xa2>
 8000334:	3504      	adds	r5, #4
 8000336:	012a      	lsls	r2, r5, #4
 8000338:	d503      	bpl.n	8000342 <__aeabi_fdiv+0xae>
 800033a:	0030      	movs	r0, r6
 800033c:	4a5c      	ldr	r2, [pc, #368]	; (80004b0 <__aeabi_fdiv+0x21c>)
 800033e:	3080      	adds	r0, #128	; 0x80
 8000340:	4015      	ands	r5, r2
 8000342:	28fe      	cmp	r0, #254	; 0xfe
 8000344:	dc03      	bgt.n	800034e <__aeabi_fdiv+0xba>
 8000346:	01ac      	lsls	r4, r5, #6
 8000348:	0a64      	lsrs	r4, r4, #9
 800034a:	b2c2      	uxtb	r2, r0
 800034c:	e001      	b.n	8000352 <__aeabi_fdiv+0xbe>
 800034e:	22ff      	movs	r2, #255	; 0xff
 8000350:	2400      	movs	r4, #0
 8000352:	0264      	lsls	r4, r4, #9
 8000354:	05d2      	lsls	r2, r2, #23
 8000356:	0a60      	lsrs	r0, r4, #9
 8000358:	07db      	lsls	r3, r3, #31
 800035a:	4310      	orrs	r0, r2
 800035c:	4318      	orrs	r0, r3
 800035e:	bc3c      	pop	{r2, r3, r4, r5}
 8000360:	4690      	mov	r8, r2
 8000362:	4699      	mov	r9, r3
 8000364:	46a2      	mov	sl, r4
 8000366:	46ab      	mov	fp, r5
 8000368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800036a:	2201      	movs	r2, #1
 800036c:	1a10      	subs	r0, r2, r0
 800036e:	281b      	cmp	r0, #27
 8000370:	dd7c      	ble.n	800046c <__aeabi_fdiv+0x1d8>
 8000372:	2200      	movs	r2, #0
 8000374:	2400      	movs	r4, #0
 8000376:	e7ec      	b.n	8000352 <__aeabi_fdiv+0xbe>
 8000378:	2c00      	cmp	r4, #0
 800037a:	d11d      	bne.n	80003b8 <__aeabi_fdiv+0x124>
 800037c:	2304      	movs	r3, #4
 800037e:	4699      	mov	r9, r3
 8000380:	3b03      	subs	r3, #3
 8000382:	2600      	movs	r6, #0
 8000384:	469b      	mov	fp, r3
 8000386:	e79d      	b.n	80002c4 <__aeabi_fdiv+0x30>
 8000388:	3eff      	subs	r6, #255	; 0xff
 800038a:	2d00      	cmp	r5, #0
 800038c:	d120      	bne.n	80003d0 <__aeabi_fdiv+0x13c>
 800038e:	2102      	movs	r1, #2
 8000390:	4643      	mov	r3, r8
 8000392:	464a      	mov	r2, r9
 8000394:	407b      	eors	r3, r7
 8000396:	430a      	orrs	r2, r1
 8000398:	2a0f      	cmp	r2, #15
 800039a:	d8d8      	bhi.n	800034e <__aeabi_fdiv+0xba>
 800039c:	4845      	ldr	r0, [pc, #276]	; (80004b4 <__aeabi_fdiv+0x220>)
 800039e:	0092      	lsls	r2, r2, #2
 80003a0:	5882      	ldr	r2, [r0, r2]
 80003a2:	4697      	mov	pc, r2
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d119      	bne.n	80003dc <__aeabi_fdiv+0x148>
 80003a8:	2101      	movs	r1, #1
 80003aa:	e7f1      	b.n	8000390 <__aeabi_fdiv+0xfc>
 80003ac:	230c      	movs	r3, #12
 80003ae:	4699      	mov	r9, r3
 80003b0:	3b09      	subs	r3, #9
 80003b2:	26ff      	movs	r6, #255	; 0xff
 80003b4:	469b      	mov	fp, r3
 80003b6:	e785      	b.n	80002c4 <__aeabi_fdiv+0x30>
 80003b8:	0020      	movs	r0, r4
 80003ba:	f001 fe65 	bl	8002088 <__clzsi2>
 80003be:	2676      	movs	r6, #118	; 0x76
 80003c0:	1f43      	subs	r3, r0, #5
 80003c2:	409c      	lsls	r4, r3
 80003c4:	2300      	movs	r3, #0
 80003c6:	4276      	negs	r6, r6
 80003c8:	1a36      	subs	r6, r6, r0
 80003ca:	4699      	mov	r9, r3
 80003cc:	469b      	mov	fp, r3
 80003ce:	e779      	b.n	80002c4 <__aeabi_fdiv+0x30>
 80003d0:	464a      	mov	r2, r9
 80003d2:	2303      	movs	r3, #3
 80003d4:	431a      	orrs	r2, r3
 80003d6:	4691      	mov	r9, r2
 80003d8:	2103      	movs	r1, #3
 80003da:	e786      	b.n	80002ea <__aeabi_fdiv+0x56>
 80003dc:	0028      	movs	r0, r5
 80003de:	f001 fe53 	bl	8002088 <__clzsi2>
 80003e2:	1f43      	subs	r3, r0, #5
 80003e4:	1836      	adds	r6, r6, r0
 80003e6:	409d      	lsls	r5, r3
 80003e8:	3676      	adds	r6, #118	; 0x76
 80003ea:	2100      	movs	r1, #0
 80003ec:	e77d      	b.n	80002ea <__aeabi_fdiv+0x56>
 80003ee:	2480      	movs	r4, #128	; 0x80
 80003f0:	2300      	movs	r3, #0
 80003f2:	03e4      	lsls	r4, r4, #15
 80003f4:	22ff      	movs	r2, #255	; 0xff
 80003f6:	e7ac      	b.n	8000352 <__aeabi_fdiv+0xbe>
 80003f8:	2500      	movs	r5, #0
 80003fa:	2380      	movs	r3, #128	; 0x80
 80003fc:	03db      	lsls	r3, r3, #15
 80003fe:	421c      	tst	r4, r3
 8000400:	d028      	beq.n	8000454 <__aeabi_fdiv+0x1c0>
 8000402:	421d      	tst	r5, r3
 8000404:	d126      	bne.n	8000454 <__aeabi_fdiv+0x1c0>
 8000406:	432b      	orrs	r3, r5
 8000408:	025c      	lsls	r4, r3, #9
 800040a:	0a64      	lsrs	r4, r4, #9
 800040c:	4643      	mov	r3, r8
 800040e:	22ff      	movs	r2, #255	; 0xff
 8000410:	e79f      	b.n	8000352 <__aeabi_fdiv+0xbe>
 8000412:	0162      	lsls	r2, r4, #5
 8000414:	016c      	lsls	r4, r5, #5
 8000416:	42a2      	cmp	r2, r4
 8000418:	d224      	bcs.n	8000464 <__aeabi_fdiv+0x1d0>
 800041a:	211b      	movs	r1, #27
 800041c:	2500      	movs	r5, #0
 800041e:	3e01      	subs	r6, #1
 8000420:	2701      	movs	r7, #1
 8000422:	0010      	movs	r0, r2
 8000424:	006d      	lsls	r5, r5, #1
 8000426:	0052      	lsls	r2, r2, #1
 8000428:	2800      	cmp	r0, #0
 800042a:	db01      	blt.n	8000430 <__aeabi_fdiv+0x19c>
 800042c:	4294      	cmp	r4, r2
 800042e:	d801      	bhi.n	8000434 <__aeabi_fdiv+0x1a0>
 8000430:	1b12      	subs	r2, r2, r4
 8000432:	433d      	orrs	r5, r7
 8000434:	3901      	subs	r1, #1
 8000436:	2900      	cmp	r1, #0
 8000438:	d1f3      	bne.n	8000422 <__aeabi_fdiv+0x18e>
 800043a:	0014      	movs	r4, r2
 800043c:	1e62      	subs	r2, r4, #1
 800043e:	4194      	sbcs	r4, r2
 8000440:	4325      	orrs	r5, r4
 8000442:	e76d      	b.n	8000320 <__aeabi_fdiv+0x8c>
 8000444:	46ba      	mov	sl, r7
 8000446:	4659      	mov	r1, fp
 8000448:	0025      	movs	r5, r4
 800044a:	4653      	mov	r3, sl
 800044c:	2902      	cmp	r1, #2
 800044e:	d000      	beq.n	8000452 <__aeabi_fdiv+0x1be>
 8000450:	e761      	b.n	8000316 <__aeabi_fdiv+0x82>
 8000452:	e77c      	b.n	800034e <__aeabi_fdiv+0xba>
 8000454:	2380      	movs	r3, #128	; 0x80
 8000456:	03db      	lsls	r3, r3, #15
 8000458:	431c      	orrs	r4, r3
 800045a:	0264      	lsls	r4, r4, #9
 800045c:	0a64      	lsrs	r4, r4, #9
 800045e:	003b      	movs	r3, r7
 8000460:	22ff      	movs	r2, #255	; 0xff
 8000462:	e776      	b.n	8000352 <__aeabi_fdiv+0xbe>
 8000464:	1b12      	subs	r2, r2, r4
 8000466:	211a      	movs	r1, #26
 8000468:	2501      	movs	r5, #1
 800046a:	e7d9      	b.n	8000420 <__aeabi_fdiv+0x18c>
 800046c:	369e      	adds	r6, #158	; 0x9e
 800046e:	002a      	movs	r2, r5
 8000470:	40b5      	lsls	r5, r6
 8000472:	002c      	movs	r4, r5
 8000474:	40c2      	lsrs	r2, r0
 8000476:	1e65      	subs	r5, r4, #1
 8000478:	41ac      	sbcs	r4, r5
 800047a:	4314      	orrs	r4, r2
 800047c:	0762      	lsls	r2, r4, #29
 800047e:	d004      	beq.n	800048a <__aeabi_fdiv+0x1f6>
 8000480:	220f      	movs	r2, #15
 8000482:	4022      	ands	r2, r4
 8000484:	2a04      	cmp	r2, #4
 8000486:	d000      	beq.n	800048a <__aeabi_fdiv+0x1f6>
 8000488:	3404      	adds	r4, #4
 800048a:	0162      	lsls	r2, r4, #5
 800048c:	d403      	bmi.n	8000496 <__aeabi_fdiv+0x202>
 800048e:	01a4      	lsls	r4, r4, #6
 8000490:	0a64      	lsrs	r4, r4, #9
 8000492:	2200      	movs	r2, #0
 8000494:	e75d      	b.n	8000352 <__aeabi_fdiv+0xbe>
 8000496:	2201      	movs	r2, #1
 8000498:	2400      	movs	r4, #0
 800049a:	e75a      	b.n	8000352 <__aeabi_fdiv+0xbe>
 800049c:	2480      	movs	r4, #128	; 0x80
 800049e:	03e4      	lsls	r4, r4, #15
 80004a0:	432c      	orrs	r4, r5
 80004a2:	0264      	lsls	r4, r4, #9
 80004a4:	0a64      	lsrs	r4, r4, #9
 80004a6:	22ff      	movs	r2, #255	; 0xff
 80004a8:	e753      	b.n	8000352 <__aeabi_fdiv+0xbe>
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	08004dcc 	.word	0x08004dcc
 80004b0:	f7ffffff 	.word	0xf7ffffff
 80004b4:	08004e0c 	.word	0x08004e0c

080004b8 <__eqsf2>:
 80004b8:	b570      	push	{r4, r5, r6, lr}
 80004ba:	0042      	lsls	r2, r0, #1
 80004bc:	024e      	lsls	r6, r1, #9
 80004be:	004c      	lsls	r4, r1, #1
 80004c0:	0245      	lsls	r5, r0, #9
 80004c2:	0a6d      	lsrs	r5, r5, #9
 80004c4:	0e12      	lsrs	r2, r2, #24
 80004c6:	0fc3      	lsrs	r3, r0, #31
 80004c8:	0a76      	lsrs	r6, r6, #9
 80004ca:	0e24      	lsrs	r4, r4, #24
 80004cc:	0fc9      	lsrs	r1, r1, #31
 80004ce:	2aff      	cmp	r2, #255	; 0xff
 80004d0:	d00f      	beq.n	80004f2 <__eqsf2+0x3a>
 80004d2:	2cff      	cmp	r4, #255	; 0xff
 80004d4:	d011      	beq.n	80004fa <__eqsf2+0x42>
 80004d6:	2001      	movs	r0, #1
 80004d8:	42a2      	cmp	r2, r4
 80004da:	d000      	beq.n	80004de <__eqsf2+0x26>
 80004dc:	bd70      	pop	{r4, r5, r6, pc}
 80004de:	42b5      	cmp	r5, r6
 80004e0:	d1fc      	bne.n	80004dc <__eqsf2+0x24>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d00d      	beq.n	8000502 <__eqsf2+0x4a>
 80004e6:	2a00      	cmp	r2, #0
 80004e8:	d1f8      	bne.n	80004dc <__eqsf2+0x24>
 80004ea:	0028      	movs	r0, r5
 80004ec:	1e45      	subs	r5, r0, #1
 80004ee:	41a8      	sbcs	r0, r5
 80004f0:	e7f4      	b.n	80004dc <__eqsf2+0x24>
 80004f2:	2001      	movs	r0, #1
 80004f4:	2d00      	cmp	r5, #0
 80004f6:	d1f1      	bne.n	80004dc <__eqsf2+0x24>
 80004f8:	e7eb      	b.n	80004d2 <__eqsf2+0x1a>
 80004fa:	2001      	movs	r0, #1
 80004fc:	2e00      	cmp	r6, #0
 80004fe:	d1ed      	bne.n	80004dc <__eqsf2+0x24>
 8000500:	e7e9      	b.n	80004d6 <__eqsf2+0x1e>
 8000502:	2000      	movs	r0, #0
 8000504:	e7ea      	b.n	80004dc <__eqsf2+0x24>
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__gesf2>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	004a      	lsls	r2, r1, #1
 800050c:	024e      	lsls	r6, r1, #9
 800050e:	0245      	lsls	r5, r0, #9
 8000510:	0044      	lsls	r4, r0, #1
 8000512:	0a6d      	lsrs	r5, r5, #9
 8000514:	0e24      	lsrs	r4, r4, #24
 8000516:	0fc3      	lsrs	r3, r0, #31
 8000518:	0a76      	lsrs	r6, r6, #9
 800051a:	0e12      	lsrs	r2, r2, #24
 800051c:	0fc9      	lsrs	r1, r1, #31
 800051e:	2cff      	cmp	r4, #255	; 0xff
 8000520:	d015      	beq.n	800054e <__gesf2+0x46>
 8000522:	2aff      	cmp	r2, #255	; 0xff
 8000524:	d00e      	beq.n	8000544 <__gesf2+0x3c>
 8000526:	2c00      	cmp	r4, #0
 8000528:	d115      	bne.n	8000556 <__gesf2+0x4e>
 800052a:	2a00      	cmp	r2, #0
 800052c:	d101      	bne.n	8000532 <__gesf2+0x2a>
 800052e:	2e00      	cmp	r6, #0
 8000530:	d01c      	beq.n	800056c <__gesf2+0x64>
 8000532:	2d00      	cmp	r5, #0
 8000534:	d014      	beq.n	8000560 <__gesf2+0x58>
 8000536:	428b      	cmp	r3, r1
 8000538:	d027      	beq.n	800058a <__gesf2+0x82>
 800053a:	2002      	movs	r0, #2
 800053c:	3b01      	subs	r3, #1
 800053e:	4018      	ands	r0, r3
 8000540:	3801      	subs	r0, #1
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	2e00      	cmp	r6, #0
 8000546:	d0ee      	beq.n	8000526 <__gesf2+0x1e>
 8000548:	2002      	movs	r0, #2
 800054a:	4240      	negs	r0, r0
 800054c:	e7f9      	b.n	8000542 <__gesf2+0x3a>
 800054e:	2d00      	cmp	r5, #0
 8000550:	d1fa      	bne.n	8000548 <__gesf2+0x40>
 8000552:	2aff      	cmp	r2, #255	; 0xff
 8000554:	d00e      	beq.n	8000574 <__gesf2+0x6c>
 8000556:	2a00      	cmp	r2, #0
 8000558:	d10e      	bne.n	8000578 <__gesf2+0x70>
 800055a:	2e00      	cmp	r6, #0
 800055c:	d0ed      	beq.n	800053a <__gesf2+0x32>
 800055e:	e00b      	b.n	8000578 <__gesf2+0x70>
 8000560:	2301      	movs	r3, #1
 8000562:	3901      	subs	r1, #1
 8000564:	4399      	bics	r1, r3
 8000566:	0008      	movs	r0, r1
 8000568:	3001      	adds	r0, #1
 800056a:	e7ea      	b.n	8000542 <__gesf2+0x3a>
 800056c:	2000      	movs	r0, #0
 800056e:	2d00      	cmp	r5, #0
 8000570:	d0e7      	beq.n	8000542 <__gesf2+0x3a>
 8000572:	e7e2      	b.n	800053a <__gesf2+0x32>
 8000574:	2e00      	cmp	r6, #0
 8000576:	d1e7      	bne.n	8000548 <__gesf2+0x40>
 8000578:	428b      	cmp	r3, r1
 800057a:	d1de      	bne.n	800053a <__gesf2+0x32>
 800057c:	4294      	cmp	r4, r2
 800057e:	dd05      	ble.n	800058c <__gesf2+0x84>
 8000580:	2102      	movs	r1, #2
 8000582:	1e58      	subs	r0, r3, #1
 8000584:	4008      	ands	r0, r1
 8000586:	3801      	subs	r0, #1
 8000588:	e7db      	b.n	8000542 <__gesf2+0x3a>
 800058a:	2400      	movs	r4, #0
 800058c:	42a2      	cmp	r2, r4
 800058e:	dc04      	bgt.n	800059a <__gesf2+0x92>
 8000590:	42b5      	cmp	r5, r6
 8000592:	d8d2      	bhi.n	800053a <__gesf2+0x32>
 8000594:	2000      	movs	r0, #0
 8000596:	42b5      	cmp	r5, r6
 8000598:	d2d3      	bcs.n	8000542 <__gesf2+0x3a>
 800059a:	1e58      	subs	r0, r3, #1
 800059c:	2301      	movs	r3, #1
 800059e:	4398      	bics	r0, r3
 80005a0:	3001      	adds	r0, #1
 80005a2:	e7ce      	b.n	8000542 <__gesf2+0x3a>

080005a4 <__lesf2>:
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	0042      	lsls	r2, r0, #1
 80005a8:	0244      	lsls	r4, r0, #9
 80005aa:	024d      	lsls	r5, r1, #9
 80005ac:	0fc3      	lsrs	r3, r0, #31
 80005ae:	0048      	lsls	r0, r1, #1
 80005b0:	0a64      	lsrs	r4, r4, #9
 80005b2:	0e12      	lsrs	r2, r2, #24
 80005b4:	0a6d      	lsrs	r5, r5, #9
 80005b6:	0e00      	lsrs	r0, r0, #24
 80005b8:	0fc9      	lsrs	r1, r1, #31
 80005ba:	2aff      	cmp	r2, #255	; 0xff
 80005bc:	d012      	beq.n	80005e4 <__lesf2+0x40>
 80005be:	28ff      	cmp	r0, #255	; 0xff
 80005c0:	d00c      	beq.n	80005dc <__lesf2+0x38>
 80005c2:	2a00      	cmp	r2, #0
 80005c4:	d112      	bne.n	80005ec <__lesf2+0x48>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d119      	bne.n	80005fe <__lesf2+0x5a>
 80005ca:	2d00      	cmp	r5, #0
 80005cc:	d117      	bne.n	80005fe <__lesf2+0x5a>
 80005ce:	2c00      	cmp	r4, #0
 80005d0:	d02b      	beq.n	800062a <__lesf2+0x86>
 80005d2:	2002      	movs	r0, #2
 80005d4:	3b01      	subs	r3, #1
 80005d6:	4018      	ands	r0, r3
 80005d8:	3801      	subs	r0, #1
 80005da:	e026      	b.n	800062a <__lesf2+0x86>
 80005dc:	2d00      	cmp	r5, #0
 80005de:	d0f0      	beq.n	80005c2 <__lesf2+0x1e>
 80005e0:	2002      	movs	r0, #2
 80005e2:	e022      	b.n	800062a <__lesf2+0x86>
 80005e4:	2c00      	cmp	r4, #0
 80005e6:	d1fb      	bne.n	80005e0 <__lesf2+0x3c>
 80005e8:	28ff      	cmp	r0, #255	; 0xff
 80005ea:	d01f      	beq.n	800062c <__lesf2+0x88>
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d11f      	bne.n	8000630 <__lesf2+0x8c>
 80005f0:	2d00      	cmp	r5, #0
 80005f2:	d11d      	bne.n	8000630 <__lesf2+0x8c>
 80005f4:	2002      	movs	r0, #2
 80005f6:	3b01      	subs	r3, #1
 80005f8:	4018      	ands	r0, r3
 80005fa:	3801      	subs	r0, #1
 80005fc:	e015      	b.n	800062a <__lesf2+0x86>
 80005fe:	2c00      	cmp	r4, #0
 8000600:	d00e      	beq.n	8000620 <__lesf2+0x7c>
 8000602:	428b      	cmp	r3, r1
 8000604:	d1e5      	bne.n	80005d2 <__lesf2+0x2e>
 8000606:	2200      	movs	r2, #0
 8000608:	4290      	cmp	r0, r2
 800060a:	dc04      	bgt.n	8000616 <__lesf2+0x72>
 800060c:	42ac      	cmp	r4, r5
 800060e:	d8e0      	bhi.n	80005d2 <__lesf2+0x2e>
 8000610:	2000      	movs	r0, #0
 8000612:	42ac      	cmp	r4, r5
 8000614:	d209      	bcs.n	800062a <__lesf2+0x86>
 8000616:	1e58      	subs	r0, r3, #1
 8000618:	2301      	movs	r3, #1
 800061a:	4398      	bics	r0, r3
 800061c:	3001      	adds	r0, #1
 800061e:	e004      	b.n	800062a <__lesf2+0x86>
 8000620:	2301      	movs	r3, #1
 8000622:	3901      	subs	r1, #1
 8000624:	4399      	bics	r1, r3
 8000626:	0008      	movs	r0, r1
 8000628:	3001      	adds	r0, #1
 800062a:	bd30      	pop	{r4, r5, pc}
 800062c:	2d00      	cmp	r5, #0
 800062e:	d1d7      	bne.n	80005e0 <__lesf2+0x3c>
 8000630:	428b      	cmp	r3, r1
 8000632:	d1ce      	bne.n	80005d2 <__lesf2+0x2e>
 8000634:	4282      	cmp	r2, r0
 8000636:	dde7      	ble.n	8000608 <__lesf2+0x64>
 8000638:	2102      	movs	r1, #2
 800063a:	1e58      	subs	r0, r3, #1
 800063c:	4008      	ands	r0, r1
 800063e:	3801      	subs	r0, #1
 8000640:	e7f3      	b.n	800062a <__lesf2+0x86>
 8000642:	46c0      	nop			; (mov r8, r8)

08000644 <__aeabi_fmul>:
 8000644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000646:	464e      	mov	r6, r9
 8000648:	4657      	mov	r7, sl
 800064a:	4645      	mov	r5, r8
 800064c:	46de      	mov	lr, fp
 800064e:	b5e0      	push	{r5, r6, r7, lr}
 8000650:	0243      	lsls	r3, r0, #9
 8000652:	0a5b      	lsrs	r3, r3, #9
 8000654:	0045      	lsls	r5, r0, #1
 8000656:	b083      	sub	sp, #12
 8000658:	1c0f      	adds	r7, r1, #0
 800065a:	4699      	mov	r9, r3
 800065c:	0e2d      	lsrs	r5, r5, #24
 800065e:	0fc6      	lsrs	r6, r0, #31
 8000660:	2d00      	cmp	r5, #0
 8000662:	d057      	beq.n	8000714 <__aeabi_fmul+0xd0>
 8000664:	2dff      	cmp	r5, #255	; 0xff
 8000666:	d024      	beq.n	80006b2 <__aeabi_fmul+0x6e>
 8000668:	2080      	movs	r0, #128	; 0x80
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	04c0      	lsls	r0, r0, #19
 800066e:	4318      	orrs	r0, r3
 8000670:	2300      	movs	r3, #0
 8000672:	4681      	mov	r9, r0
 8000674:	469a      	mov	sl, r3
 8000676:	469b      	mov	fp, r3
 8000678:	3d7f      	subs	r5, #127	; 0x7f
 800067a:	027c      	lsls	r4, r7, #9
 800067c:	007a      	lsls	r2, r7, #1
 800067e:	0ffb      	lsrs	r3, r7, #31
 8000680:	0a64      	lsrs	r4, r4, #9
 8000682:	0e12      	lsrs	r2, r2, #24
 8000684:	4698      	mov	r8, r3
 8000686:	d023      	beq.n	80006d0 <__aeabi_fmul+0x8c>
 8000688:	2aff      	cmp	r2, #255	; 0xff
 800068a:	d04b      	beq.n	8000724 <__aeabi_fmul+0xe0>
 800068c:	00e3      	lsls	r3, r4, #3
 800068e:	2480      	movs	r4, #128	; 0x80
 8000690:	2000      	movs	r0, #0
 8000692:	04e4      	lsls	r4, r4, #19
 8000694:	3a7f      	subs	r2, #127	; 0x7f
 8000696:	431c      	orrs	r4, r3
 8000698:	18ad      	adds	r5, r5, r2
 800069a:	1c6b      	adds	r3, r5, #1
 800069c:	4647      	mov	r7, r8
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	4653      	mov	r3, sl
 80006a2:	4077      	eors	r7, r6
 80006a4:	003a      	movs	r2, r7
 80006a6:	2b0f      	cmp	r3, #15
 80006a8:	d848      	bhi.n	800073c <__aeabi_fmul+0xf8>
 80006aa:	497d      	ldr	r1, [pc, #500]	; (80008a0 <__aeabi_fmul+0x25c>)
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	58cb      	ldr	r3, [r1, r3]
 80006b0:	469f      	mov	pc, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d000      	beq.n	80006b8 <__aeabi_fmul+0x74>
 80006b6:	e085      	b.n	80007c4 <__aeabi_fmul+0x180>
 80006b8:	3308      	adds	r3, #8
 80006ba:	469a      	mov	sl, r3
 80006bc:	3b06      	subs	r3, #6
 80006be:	469b      	mov	fp, r3
 80006c0:	027c      	lsls	r4, r7, #9
 80006c2:	007a      	lsls	r2, r7, #1
 80006c4:	0ffb      	lsrs	r3, r7, #31
 80006c6:	25ff      	movs	r5, #255	; 0xff
 80006c8:	0a64      	lsrs	r4, r4, #9
 80006ca:	0e12      	lsrs	r2, r2, #24
 80006cc:	4698      	mov	r8, r3
 80006ce:	d1db      	bne.n	8000688 <__aeabi_fmul+0x44>
 80006d0:	2c00      	cmp	r4, #0
 80006d2:	d000      	beq.n	80006d6 <__aeabi_fmul+0x92>
 80006d4:	e090      	b.n	80007f8 <__aeabi_fmul+0x1b4>
 80006d6:	4652      	mov	r2, sl
 80006d8:	2301      	movs	r3, #1
 80006da:	431a      	orrs	r2, r3
 80006dc:	4692      	mov	sl, r2
 80006de:	2001      	movs	r0, #1
 80006e0:	e7db      	b.n	800069a <__aeabi_fmul+0x56>
 80006e2:	464c      	mov	r4, r9
 80006e4:	4658      	mov	r0, fp
 80006e6:	0017      	movs	r7, r2
 80006e8:	2802      	cmp	r0, #2
 80006ea:	d024      	beq.n	8000736 <__aeabi_fmul+0xf2>
 80006ec:	2803      	cmp	r0, #3
 80006ee:	d100      	bne.n	80006f2 <__aeabi_fmul+0xae>
 80006f0:	e0cf      	b.n	8000892 <__aeabi_fmul+0x24e>
 80006f2:	2200      	movs	r2, #0
 80006f4:	2300      	movs	r3, #0
 80006f6:	2801      	cmp	r0, #1
 80006f8:	d14d      	bne.n	8000796 <__aeabi_fmul+0x152>
 80006fa:	0258      	lsls	r0, r3, #9
 80006fc:	05d2      	lsls	r2, r2, #23
 80006fe:	0a40      	lsrs	r0, r0, #9
 8000700:	07ff      	lsls	r7, r7, #31
 8000702:	4310      	orrs	r0, r2
 8000704:	4338      	orrs	r0, r7
 8000706:	b003      	add	sp, #12
 8000708:	bc3c      	pop	{r2, r3, r4, r5}
 800070a:	4690      	mov	r8, r2
 800070c:	4699      	mov	r9, r3
 800070e:	46a2      	mov	sl, r4
 8000710:	46ab      	mov	fp, r5
 8000712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000714:	2b00      	cmp	r3, #0
 8000716:	d15b      	bne.n	80007d0 <__aeabi_fmul+0x18c>
 8000718:	2304      	movs	r3, #4
 800071a:	469a      	mov	sl, r3
 800071c:	3b03      	subs	r3, #3
 800071e:	2500      	movs	r5, #0
 8000720:	469b      	mov	fp, r3
 8000722:	e7aa      	b.n	800067a <__aeabi_fmul+0x36>
 8000724:	35ff      	adds	r5, #255	; 0xff
 8000726:	2c00      	cmp	r4, #0
 8000728:	d160      	bne.n	80007ec <__aeabi_fmul+0x1a8>
 800072a:	4652      	mov	r2, sl
 800072c:	2302      	movs	r3, #2
 800072e:	431a      	orrs	r2, r3
 8000730:	4692      	mov	sl, r2
 8000732:	2002      	movs	r0, #2
 8000734:	e7b1      	b.n	800069a <__aeabi_fmul+0x56>
 8000736:	22ff      	movs	r2, #255	; 0xff
 8000738:	2300      	movs	r3, #0
 800073a:	e7de      	b.n	80006fa <__aeabi_fmul+0xb6>
 800073c:	464b      	mov	r3, r9
 800073e:	0c1b      	lsrs	r3, r3, #16
 8000740:	469c      	mov	ip, r3
 8000742:	464b      	mov	r3, r9
 8000744:	0426      	lsls	r6, r4, #16
 8000746:	0c36      	lsrs	r6, r6, #16
 8000748:	0418      	lsls	r0, r3, #16
 800074a:	4661      	mov	r1, ip
 800074c:	0033      	movs	r3, r6
 800074e:	0c22      	lsrs	r2, r4, #16
 8000750:	4664      	mov	r4, ip
 8000752:	0c00      	lsrs	r0, r0, #16
 8000754:	4343      	muls	r3, r0
 8000756:	434e      	muls	r6, r1
 8000758:	4350      	muls	r0, r2
 800075a:	4354      	muls	r4, r2
 800075c:	1980      	adds	r0, r0, r6
 800075e:	0c1a      	lsrs	r2, r3, #16
 8000760:	1812      	adds	r2, r2, r0
 8000762:	4296      	cmp	r6, r2
 8000764:	d903      	bls.n	800076e <__aeabi_fmul+0x12a>
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	0249      	lsls	r1, r1, #9
 800076a:	468c      	mov	ip, r1
 800076c:	4464      	add	r4, ip
 800076e:	041b      	lsls	r3, r3, #16
 8000770:	0c1b      	lsrs	r3, r3, #16
 8000772:	0410      	lsls	r0, r2, #16
 8000774:	18c0      	adds	r0, r0, r3
 8000776:	0183      	lsls	r3, r0, #6
 8000778:	1e5e      	subs	r6, r3, #1
 800077a:	41b3      	sbcs	r3, r6
 800077c:	0e80      	lsrs	r0, r0, #26
 800077e:	4318      	orrs	r0, r3
 8000780:	0c13      	lsrs	r3, r2, #16
 8000782:	191b      	adds	r3, r3, r4
 8000784:	019b      	lsls	r3, r3, #6
 8000786:	4303      	orrs	r3, r0
 8000788:	001c      	movs	r4, r3
 800078a:	0123      	lsls	r3, r4, #4
 800078c:	d579      	bpl.n	8000882 <__aeabi_fmul+0x23e>
 800078e:	2301      	movs	r3, #1
 8000790:	0862      	lsrs	r2, r4, #1
 8000792:	401c      	ands	r4, r3
 8000794:	4314      	orrs	r4, r2
 8000796:	9a01      	ldr	r2, [sp, #4]
 8000798:	327f      	adds	r2, #127	; 0x7f
 800079a:	2a00      	cmp	r2, #0
 800079c:	dd4d      	ble.n	800083a <__aeabi_fmul+0x1f6>
 800079e:	0763      	lsls	r3, r4, #29
 80007a0:	d004      	beq.n	80007ac <__aeabi_fmul+0x168>
 80007a2:	230f      	movs	r3, #15
 80007a4:	4023      	ands	r3, r4
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	d000      	beq.n	80007ac <__aeabi_fmul+0x168>
 80007aa:	3404      	adds	r4, #4
 80007ac:	0123      	lsls	r3, r4, #4
 80007ae:	d503      	bpl.n	80007b8 <__aeabi_fmul+0x174>
 80007b0:	4b3c      	ldr	r3, [pc, #240]	; (80008a4 <__aeabi_fmul+0x260>)
 80007b2:	9a01      	ldr	r2, [sp, #4]
 80007b4:	401c      	ands	r4, r3
 80007b6:	3280      	adds	r2, #128	; 0x80
 80007b8:	2afe      	cmp	r2, #254	; 0xfe
 80007ba:	dcbc      	bgt.n	8000736 <__aeabi_fmul+0xf2>
 80007bc:	01a3      	lsls	r3, r4, #6
 80007be:	0a5b      	lsrs	r3, r3, #9
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	e79a      	b.n	80006fa <__aeabi_fmul+0xb6>
 80007c4:	230c      	movs	r3, #12
 80007c6:	469a      	mov	sl, r3
 80007c8:	3b09      	subs	r3, #9
 80007ca:	25ff      	movs	r5, #255	; 0xff
 80007cc:	469b      	mov	fp, r3
 80007ce:	e754      	b.n	800067a <__aeabi_fmul+0x36>
 80007d0:	0018      	movs	r0, r3
 80007d2:	f001 fc59 	bl	8002088 <__clzsi2>
 80007d6:	464a      	mov	r2, r9
 80007d8:	1f43      	subs	r3, r0, #5
 80007da:	2576      	movs	r5, #118	; 0x76
 80007dc:	409a      	lsls	r2, r3
 80007de:	2300      	movs	r3, #0
 80007e0:	426d      	negs	r5, r5
 80007e2:	4691      	mov	r9, r2
 80007e4:	1a2d      	subs	r5, r5, r0
 80007e6:	469a      	mov	sl, r3
 80007e8:	469b      	mov	fp, r3
 80007ea:	e746      	b.n	800067a <__aeabi_fmul+0x36>
 80007ec:	4652      	mov	r2, sl
 80007ee:	2303      	movs	r3, #3
 80007f0:	431a      	orrs	r2, r3
 80007f2:	4692      	mov	sl, r2
 80007f4:	2003      	movs	r0, #3
 80007f6:	e750      	b.n	800069a <__aeabi_fmul+0x56>
 80007f8:	0020      	movs	r0, r4
 80007fa:	f001 fc45 	bl	8002088 <__clzsi2>
 80007fe:	1f43      	subs	r3, r0, #5
 8000800:	1a2d      	subs	r5, r5, r0
 8000802:	409c      	lsls	r4, r3
 8000804:	3d76      	subs	r5, #118	; 0x76
 8000806:	2000      	movs	r0, #0
 8000808:	e747      	b.n	800069a <__aeabi_fmul+0x56>
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	2700      	movs	r7, #0
 800080e:	03db      	lsls	r3, r3, #15
 8000810:	22ff      	movs	r2, #255	; 0xff
 8000812:	e772      	b.n	80006fa <__aeabi_fmul+0xb6>
 8000814:	4642      	mov	r2, r8
 8000816:	e766      	b.n	80006e6 <__aeabi_fmul+0xa2>
 8000818:	464c      	mov	r4, r9
 800081a:	0032      	movs	r2, r6
 800081c:	4658      	mov	r0, fp
 800081e:	e762      	b.n	80006e6 <__aeabi_fmul+0xa2>
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	464a      	mov	r2, r9
 8000824:	03db      	lsls	r3, r3, #15
 8000826:	421a      	tst	r2, r3
 8000828:	d022      	beq.n	8000870 <__aeabi_fmul+0x22c>
 800082a:	421c      	tst	r4, r3
 800082c:	d120      	bne.n	8000870 <__aeabi_fmul+0x22c>
 800082e:	4323      	orrs	r3, r4
 8000830:	025b      	lsls	r3, r3, #9
 8000832:	0a5b      	lsrs	r3, r3, #9
 8000834:	4647      	mov	r7, r8
 8000836:	22ff      	movs	r2, #255	; 0xff
 8000838:	e75f      	b.n	80006fa <__aeabi_fmul+0xb6>
 800083a:	2301      	movs	r3, #1
 800083c:	1a9a      	subs	r2, r3, r2
 800083e:	2a1b      	cmp	r2, #27
 8000840:	dc21      	bgt.n	8000886 <__aeabi_fmul+0x242>
 8000842:	0023      	movs	r3, r4
 8000844:	9901      	ldr	r1, [sp, #4]
 8000846:	40d3      	lsrs	r3, r2
 8000848:	319e      	adds	r1, #158	; 0x9e
 800084a:	408c      	lsls	r4, r1
 800084c:	001a      	movs	r2, r3
 800084e:	0023      	movs	r3, r4
 8000850:	1e5c      	subs	r4, r3, #1
 8000852:	41a3      	sbcs	r3, r4
 8000854:	4313      	orrs	r3, r2
 8000856:	075a      	lsls	r2, r3, #29
 8000858:	d004      	beq.n	8000864 <__aeabi_fmul+0x220>
 800085a:	220f      	movs	r2, #15
 800085c:	401a      	ands	r2, r3
 800085e:	2a04      	cmp	r2, #4
 8000860:	d000      	beq.n	8000864 <__aeabi_fmul+0x220>
 8000862:	3304      	adds	r3, #4
 8000864:	015a      	lsls	r2, r3, #5
 8000866:	d411      	bmi.n	800088c <__aeabi_fmul+0x248>
 8000868:	019b      	lsls	r3, r3, #6
 800086a:	0a5b      	lsrs	r3, r3, #9
 800086c:	2200      	movs	r2, #0
 800086e:	e744      	b.n	80006fa <__aeabi_fmul+0xb6>
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	464a      	mov	r2, r9
 8000874:	03db      	lsls	r3, r3, #15
 8000876:	4313      	orrs	r3, r2
 8000878:	025b      	lsls	r3, r3, #9
 800087a:	0a5b      	lsrs	r3, r3, #9
 800087c:	0037      	movs	r7, r6
 800087e:	22ff      	movs	r2, #255	; 0xff
 8000880:	e73b      	b.n	80006fa <__aeabi_fmul+0xb6>
 8000882:	9501      	str	r5, [sp, #4]
 8000884:	e787      	b.n	8000796 <__aeabi_fmul+0x152>
 8000886:	2200      	movs	r2, #0
 8000888:	2300      	movs	r3, #0
 800088a:	e736      	b.n	80006fa <__aeabi_fmul+0xb6>
 800088c:	2201      	movs	r2, #1
 800088e:	2300      	movs	r3, #0
 8000890:	e733      	b.n	80006fa <__aeabi_fmul+0xb6>
 8000892:	2380      	movs	r3, #128	; 0x80
 8000894:	03db      	lsls	r3, r3, #15
 8000896:	4323      	orrs	r3, r4
 8000898:	025b      	lsls	r3, r3, #9
 800089a:	0a5b      	lsrs	r3, r3, #9
 800089c:	22ff      	movs	r2, #255	; 0xff
 800089e:	e72c      	b.n	80006fa <__aeabi_fmul+0xb6>
 80008a0:	08004e4c 	.word	0x08004e4c
 80008a4:	f7ffffff 	.word	0xf7ffffff

080008a8 <__aeabi_fsub>:
 80008a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008aa:	4647      	mov	r7, r8
 80008ac:	46ce      	mov	lr, r9
 80008ae:	0044      	lsls	r4, r0, #1
 80008b0:	0fc2      	lsrs	r2, r0, #31
 80008b2:	b580      	push	{r7, lr}
 80008b4:	0247      	lsls	r7, r0, #9
 80008b6:	0248      	lsls	r0, r1, #9
 80008b8:	0a40      	lsrs	r0, r0, #9
 80008ba:	4684      	mov	ip, r0
 80008bc:	4666      	mov	r6, ip
 80008be:	0048      	lsls	r0, r1, #1
 80008c0:	0a7f      	lsrs	r7, r7, #9
 80008c2:	0e24      	lsrs	r4, r4, #24
 80008c4:	00f6      	lsls	r6, r6, #3
 80008c6:	0025      	movs	r5, r4
 80008c8:	4690      	mov	r8, r2
 80008ca:	00fb      	lsls	r3, r7, #3
 80008cc:	0e00      	lsrs	r0, r0, #24
 80008ce:	0fc9      	lsrs	r1, r1, #31
 80008d0:	46b1      	mov	r9, r6
 80008d2:	28ff      	cmp	r0, #255	; 0xff
 80008d4:	d100      	bne.n	80008d8 <__aeabi_fsub+0x30>
 80008d6:	e085      	b.n	80009e4 <__aeabi_fsub+0x13c>
 80008d8:	2601      	movs	r6, #1
 80008da:	4071      	eors	r1, r6
 80008dc:	1a26      	subs	r6, r4, r0
 80008de:	4291      	cmp	r1, r2
 80008e0:	d057      	beq.n	8000992 <__aeabi_fsub+0xea>
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	dd43      	ble.n	800096e <__aeabi_fsub+0xc6>
 80008e6:	2800      	cmp	r0, #0
 80008e8:	d000      	beq.n	80008ec <__aeabi_fsub+0x44>
 80008ea:	e07f      	b.n	80009ec <__aeabi_fsub+0x144>
 80008ec:	4649      	mov	r1, r9
 80008ee:	2900      	cmp	r1, #0
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fsub+0x4c>
 80008f2:	e0aa      	b.n	8000a4a <__aeabi_fsub+0x1a2>
 80008f4:	3e01      	subs	r6, #1
 80008f6:	2e00      	cmp	r6, #0
 80008f8:	d000      	beq.n	80008fc <__aeabi_fsub+0x54>
 80008fa:	e0f7      	b.n	8000aec <__aeabi_fsub+0x244>
 80008fc:	1a5b      	subs	r3, r3, r1
 80008fe:	015a      	lsls	r2, r3, #5
 8000900:	d400      	bmi.n	8000904 <__aeabi_fsub+0x5c>
 8000902:	e08b      	b.n	8000a1c <__aeabi_fsub+0x174>
 8000904:	019b      	lsls	r3, r3, #6
 8000906:	099c      	lsrs	r4, r3, #6
 8000908:	0020      	movs	r0, r4
 800090a:	f001 fbbd 	bl	8002088 <__clzsi2>
 800090e:	3805      	subs	r0, #5
 8000910:	4084      	lsls	r4, r0
 8000912:	4285      	cmp	r5, r0
 8000914:	dd00      	ble.n	8000918 <__aeabi_fsub+0x70>
 8000916:	e0d3      	b.n	8000ac0 <__aeabi_fsub+0x218>
 8000918:	1b45      	subs	r5, r0, r5
 800091a:	0023      	movs	r3, r4
 800091c:	2020      	movs	r0, #32
 800091e:	3501      	adds	r5, #1
 8000920:	40eb      	lsrs	r3, r5
 8000922:	1b45      	subs	r5, r0, r5
 8000924:	40ac      	lsls	r4, r5
 8000926:	1e62      	subs	r2, r4, #1
 8000928:	4194      	sbcs	r4, r2
 800092a:	4323      	orrs	r3, r4
 800092c:	2407      	movs	r4, #7
 800092e:	2500      	movs	r5, #0
 8000930:	401c      	ands	r4, r3
 8000932:	2201      	movs	r2, #1
 8000934:	4641      	mov	r1, r8
 8000936:	400a      	ands	r2, r1
 8000938:	2c00      	cmp	r4, #0
 800093a:	d004      	beq.n	8000946 <__aeabi_fsub+0x9e>
 800093c:	210f      	movs	r1, #15
 800093e:	4019      	ands	r1, r3
 8000940:	2904      	cmp	r1, #4
 8000942:	d000      	beq.n	8000946 <__aeabi_fsub+0x9e>
 8000944:	3304      	adds	r3, #4
 8000946:	0159      	lsls	r1, r3, #5
 8000948:	d400      	bmi.n	800094c <__aeabi_fsub+0xa4>
 800094a:	e080      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 800094c:	3501      	adds	r5, #1
 800094e:	b2ec      	uxtb	r4, r5
 8000950:	2dff      	cmp	r5, #255	; 0xff
 8000952:	d000      	beq.n	8000956 <__aeabi_fsub+0xae>
 8000954:	e0a3      	b.n	8000a9e <__aeabi_fsub+0x1f6>
 8000956:	24ff      	movs	r4, #255	; 0xff
 8000958:	2300      	movs	r3, #0
 800095a:	025b      	lsls	r3, r3, #9
 800095c:	05e4      	lsls	r4, r4, #23
 800095e:	0a58      	lsrs	r0, r3, #9
 8000960:	07d2      	lsls	r2, r2, #31
 8000962:	4320      	orrs	r0, r4
 8000964:	4310      	orrs	r0, r2
 8000966:	bc0c      	pop	{r2, r3}
 8000968:	4690      	mov	r8, r2
 800096a:	4699      	mov	r9, r3
 800096c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800096e:	2e00      	cmp	r6, #0
 8000970:	d174      	bne.n	8000a5c <__aeabi_fsub+0x1b4>
 8000972:	1c60      	adds	r0, r4, #1
 8000974:	b2c0      	uxtb	r0, r0
 8000976:	2801      	cmp	r0, #1
 8000978:	dc00      	bgt.n	800097c <__aeabi_fsub+0xd4>
 800097a:	e0a7      	b.n	8000acc <__aeabi_fsub+0x224>
 800097c:	464a      	mov	r2, r9
 800097e:	1a9c      	subs	r4, r3, r2
 8000980:	0162      	lsls	r2, r4, #5
 8000982:	d500      	bpl.n	8000986 <__aeabi_fsub+0xde>
 8000984:	e0b6      	b.n	8000af4 <__aeabi_fsub+0x24c>
 8000986:	2c00      	cmp	r4, #0
 8000988:	d1be      	bne.n	8000908 <__aeabi_fsub+0x60>
 800098a:	2200      	movs	r2, #0
 800098c:	2400      	movs	r4, #0
 800098e:	2300      	movs	r3, #0
 8000990:	e7e3      	b.n	800095a <__aeabi_fsub+0xb2>
 8000992:	2e00      	cmp	r6, #0
 8000994:	dc00      	bgt.n	8000998 <__aeabi_fsub+0xf0>
 8000996:	e085      	b.n	8000aa4 <__aeabi_fsub+0x1fc>
 8000998:	2800      	cmp	r0, #0
 800099a:	d046      	beq.n	8000a2a <__aeabi_fsub+0x182>
 800099c:	2cff      	cmp	r4, #255	; 0xff
 800099e:	d049      	beq.n	8000a34 <__aeabi_fsub+0x18c>
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	4648      	mov	r0, r9
 80009a4:	04d2      	lsls	r2, r2, #19
 80009a6:	4310      	orrs	r0, r2
 80009a8:	4681      	mov	r9, r0
 80009aa:	2201      	movs	r2, #1
 80009ac:	2e1b      	cmp	r6, #27
 80009ae:	dc09      	bgt.n	80009c4 <__aeabi_fsub+0x11c>
 80009b0:	2020      	movs	r0, #32
 80009b2:	464c      	mov	r4, r9
 80009b4:	1b80      	subs	r0, r0, r6
 80009b6:	4084      	lsls	r4, r0
 80009b8:	464a      	mov	r2, r9
 80009ba:	0020      	movs	r0, r4
 80009bc:	40f2      	lsrs	r2, r6
 80009be:	1e44      	subs	r4, r0, #1
 80009c0:	41a0      	sbcs	r0, r4
 80009c2:	4302      	orrs	r2, r0
 80009c4:	189b      	adds	r3, r3, r2
 80009c6:	015a      	lsls	r2, r3, #5
 80009c8:	d528      	bpl.n	8000a1c <__aeabi_fsub+0x174>
 80009ca:	3501      	adds	r5, #1
 80009cc:	2dff      	cmp	r5, #255	; 0xff
 80009ce:	d100      	bne.n	80009d2 <__aeabi_fsub+0x12a>
 80009d0:	e0a8      	b.n	8000b24 <__aeabi_fsub+0x27c>
 80009d2:	2201      	movs	r2, #1
 80009d4:	2407      	movs	r4, #7
 80009d6:	4994      	ldr	r1, [pc, #592]	; (8000c28 <__aeabi_fsub+0x380>)
 80009d8:	401a      	ands	r2, r3
 80009da:	085b      	lsrs	r3, r3, #1
 80009dc:	400b      	ands	r3, r1
 80009de:	4313      	orrs	r3, r2
 80009e0:	401c      	ands	r4, r3
 80009e2:	e7a6      	b.n	8000932 <__aeabi_fsub+0x8a>
 80009e4:	2e00      	cmp	r6, #0
 80009e6:	d000      	beq.n	80009ea <__aeabi_fsub+0x142>
 80009e8:	e778      	b.n	80008dc <__aeabi_fsub+0x34>
 80009ea:	e775      	b.n	80008d8 <__aeabi_fsub+0x30>
 80009ec:	2cff      	cmp	r4, #255	; 0xff
 80009ee:	d054      	beq.n	8000a9a <__aeabi_fsub+0x1f2>
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	4649      	mov	r1, r9
 80009f4:	04d2      	lsls	r2, r2, #19
 80009f6:	4311      	orrs	r1, r2
 80009f8:	4689      	mov	r9, r1
 80009fa:	2201      	movs	r2, #1
 80009fc:	2e1b      	cmp	r6, #27
 80009fe:	dc09      	bgt.n	8000a14 <__aeabi_fsub+0x16c>
 8000a00:	2120      	movs	r1, #32
 8000a02:	4648      	mov	r0, r9
 8000a04:	1b89      	subs	r1, r1, r6
 8000a06:	4088      	lsls	r0, r1
 8000a08:	464a      	mov	r2, r9
 8000a0a:	0001      	movs	r1, r0
 8000a0c:	40f2      	lsrs	r2, r6
 8000a0e:	1e48      	subs	r0, r1, #1
 8000a10:	4181      	sbcs	r1, r0
 8000a12:	430a      	orrs	r2, r1
 8000a14:	1a9b      	subs	r3, r3, r2
 8000a16:	015a      	lsls	r2, r3, #5
 8000a18:	d500      	bpl.n	8000a1c <__aeabi_fsub+0x174>
 8000a1a:	e773      	b.n	8000904 <__aeabi_fsub+0x5c>
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4641      	mov	r1, r8
 8000a20:	400a      	ands	r2, r1
 8000a22:	0759      	lsls	r1, r3, #29
 8000a24:	d000      	beq.n	8000a28 <__aeabi_fsub+0x180>
 8000a26:	e789      	b.n	800093c <__aeabi_fsub+0x94>
 8000a28:	e011      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000a2a:	4648      	mov	r0, r9
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	d158      	bne.n	8000ae2 <__aeabi_fsub+0x23a>
 8000a30:	2cff      	cmp	r4, #255	; 0xff
 8000a32:	d10c      	bne.n	8000a4e <__aeabi_fsub+0x1a6>
 8000a34:	08db      	lsrs	r3, r3, #3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fsub+0x194>
 8000a3a:	e78c      	b.n	8000956 <__aeabi_fsub+0xae>
 8000a3c:	2080      	movs	r0, #128	; 0x80
 8000a3e:	03c0      	lsls	r0, r0, #15
 8000a40:	4303      	orrs	r3, r0
 8000a42:	025b      	lsls	r3, r3, #9
 8000a44:	0a5b      	lsrs	r3, r3, #9
 8000a46:	24ff      	movs	r4, #255	; 0xff
 8000a48:	e787      	b.n	800095a <__aeabi_fsub+0xb2>
 8000a4a:	2cff      	cmp	r4, #255	; 0xff
 8000a4c:	d025      	beq.n	8000a9a <__aeabi_fsub+0x1f2>
 8000a4e:	08db      	lsrs	r3, r3, #3
 8000a50:	2dff      	cmp	r5, #255	; 0xff
 8000a52:	d0f0      	beq.n	8000a36 <__aeabi_fsub+0x18e>
 8000a54:	025b      	lsls	r3, r3, #9
 8000a56:	0a5b      	lsrs	r3, r3, #9
 8000a58:	b2ec      	uxtb	r4, r5
 8000a5a:	e77e      	b.n	800095a <__aeabi_fsub+0xb2>
 8000a5c:	2c00      	cmp	r4, #0
 8000a5e:	d04d      	beq.n	8000afc <__aeabi_fsub+0x254>
 8000a60:	28ff      	cmp	r0, #255	; 0xff
 8000a62:	d018      	beq.n	8000a96 <__aeabi_fsub+0x1ee>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	04e4      	lsls	r4, r4, #19
 8000a68:	4272      	negs	r2, r6
 8000a6a:	4323      	orrs	r3, r4
 8000a6c:	2a1b      	cmp	r2, #27
 8000a6e:	dd00      	ble.n	8000a72 <__aeabi_fsub+0x1ca>
 8000a70:	e0c4      	b.n	8000bfc <__aeabi_fsub+0x354>
 8000a72:	001c      	movs	r4, r3
 8000a74:	2520      	movs	r5, #32
 8000a76:	40d4      	lsrs	r4, r2
 8000a78:	1aaa      	subs	r2, r5, r2
 8000a7a:	4093      	lsls	r3, r2
 8000a7c:	1e5a      	subs	r2, r3, #1
 8000a7e:	4193      	sbcs	r3, r2
 8000a80:	4323      	orrs	r3, r4
 8000a82:	464a      	mov	r2, r9
 8000a84:	0005      	movs	r5, r0
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	4688      	mov	r8, r1
 8000a8a:	e738      	b.n	80008fe <__aeabi_fsub+0x56>
 8000a8c:	1c72      	adds	r2, r6, #1
 8000a8e:	d0f8      	beq.n	8000a82 <__aeabi_fsub+0x1da>
 8000a90:	43f2      	mvns	r2, r6
 8000a92:	28ff      	cmp	r0, #255	; 0xff
 8000a94:	d1ea      	bne.n	8000a6c <__aeabi_fsub+0x1c4>
 8000a96:	000a      	movs	r2, r1
 8000a98:	464b      	mov	r3, r9
 8000a9a:	25ff      	movs	r5, #255	; 0xff
 8000a9c:	e7d7      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000a9e:	019b      	lsls	r3, r3, #6
 8000aa0:	0a5b      	lsrs	r3, r3, #9
 8000aa2:	e75a      	b.n	800095a <__aeabi_fsub+0xb2>
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d141      	bne.n	8000b2c <__aeabi_fsub+0x284>
 8000aa8:	1c65      	adds	r5, r4, #1
 8000aaa:	b2e9      	uxtb	r1, r5
 8000aac:	2901      	cmp	r1, #1
 8000aae:	dd45      	ble.n	8000b3c <__aeabi_fsub+0x294>
 8000ab0:	2dff      	cmp	r5, #255	; 0xff
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_fsub+0x20e>
 8000ab4:	e74f      	b.n	8000956 <__aeabi_fsub+0xae>
 8000ab6:	2407      	movs	r4, #7
 8000ab8:	444b      	add	r3, r9
 8000aba:	085b      	lsrs	r3, r3, #1
 8000abc:	401c      	ands	r4, r3
 8000abe:	e738      	b.n	8000932 <__aeabi_fsub+0x8a>
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	4b5a      	ldr	r3, [pc, #360]	; (8000c2c <__aeabi_fsub+0x384>)
 8000ac4:	1a2d      	subs	r5, r5, r0
 8000ac6:	4023      	ands	r3, r4
 8000ac8:	4014      	ands	r4, r2
 8000aca:	e732      	b.n	8000932 <__aeabi_fsub+0x8a>
 8000acc:	2c00      	cmp	r4, #0
 8000ace:	d11d      	bne.n	8000b0c <__aeabi_fsub+0x264>
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d17a      	bne.n	8000bca <__aeabi_fsub+0x322>
 8000ad4:	464b      	mov	r3, r9
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fsub+0x234>
 8000ada:	e091      	b.n	8000c00 <__aeabi_fsub+0x358>
 8000adc:	000a      	movs	r2, r1
 8000ade:	2500      	movs	r5, #0
 8000ae0:	e7b5      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000ae2:	3e01      	subs	r6, #1
 8000ae4:	2e00      	cmp	r6, #0
 8000ae6:	d119      	bne.n	8000b1c <__aeabi_fsub+0x274>
 8000ae8:	444b      	add	r3, r9
 8000aea:	e76c      	b.n	80009c6 <__aeabi_fsub+0x11e>
 8000aec:	2cff      	cmp	r4, #255	; 0xff
 8000aee:	d184      	bne.n	80009fa <__aeabi_fsub+0x152>
 8000af0:	25ff      	movs	r5, #255	; 0xff
 8000af2:	e7ac      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000af4:	464a      	mov	r2, r9
 8000af6:	4688      	mov	r8, r1
 8000af8:	1ad4      	subs	r4, r2, r3
 8000afa:	e705      	b.n	8000908 <__aeabi_fsub+0x60>
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1c5      	bne.n	8000a8c <__aeabi_fsub+0x1e4>
 8000b00:	000a      	movs	r2, r1
 8000b02:	28ff      	cmp	r0, #255	; 0xff
 8000b04:	d0c8      	beq.n	8000a98 <__aeabi_fsub+0x1f0>
 8000b06:	0005      	movs	r5, r0
 8000b08:	464b      	mov	r3, r9
 8000b0a:	e7a0      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d149      	bne.n	8000ba4 <__aeabi_fsub+0x2fc>
 8000b10:	464b      	mov	r3, r9
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d077      	beq.n	8000c06 <__aeabi_fsub+0x35e>
 8000b16:	000a      	movs	r2, r1
 8000b18:	25ff      	movs	r5, #255	; 0xff
 8000b1a:	e798      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000b1c:	2cff      	cmp	r4, #255	; 0xff
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_fsub+0x27a>
 8000b20:	e743      	b.n	80009aa <__aeabi_fsub+0x102>
 8000b22:	e787      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000b24:	000a      	movs	r2, r1
 8000b26:	24ff      	movs	r4, #255	; 0xff
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e716      	b.n	800095a <__aeabi_fsub+0xb2>
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	d115      	bne.n	8000b5c <__aeabi_fsub+0x2b4>
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d157      	bne.n	8000be4 <__aeabi_fsub+0x33c>
 8000b34:	28ff      	cmp	r0, #255	; 0xff
 8000b36:	d1e6      	bne.n	8000b06 <__aeabi_fsub+0x25e>
 8000b38:	464b      	mov	r3, r9
 8000b3a:	e77b      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000b3c:	2c00      	cmp	r4, #0
 8000b3e:	d120      	bne.n	8000b82 <__aeabi_fsub+0x2da>
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d057      	beq.n	8000bf4 <__aeabi_fsub+0x34c>
 8000b44:	4649      	mov	r1, r9
 8000b46:	2900      	cmp	r1, #0
 8000b48:	d053      	beq.n	8000bf2 <__aeabi_fsub+0x34a>
 8000b4a:	444b      	add	r3, r9
 8000b4c:	015a      	lsls	r2, r3, #5
 8000b4e:	d568      	bpl.n	8000c22 <__aeabi_fsub+0x37a>
 8000b50:	2407      	movs	r4, #7
 8000b52:	4a36      	ldr	r2, [pc, #216]	; (8000c2c <__aeabi_fsub+0x384>)
 8000b54:	401c      	ands	r4, r3
 8000b56:	2501      	movs	r5, #1
 8000b58:	4013      	ands	r3, r2
 8000b5a:	e6ea      	b.n	8000932 <__aeabi_fsub+0x8a>
 8000b5c:	28ff      	cmp	r0, #255	; 0xff
 8000b5e:	d0eb      	beq.n	8000b38 <__aeabi_fsub+0x290>
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	04d2      	lsls	r2, r2, #19
 8000b64:	4276      	negs	r6, r6
 8000b66:	4313      	orrs	r3, r2
 8000b68:	2e1b      	cmp	r6, #27
 8000b6a:	dc53      	bgt.n	8000c14 <__aeabi_fsub+0x36c>
 8000b6c:	2520      	movs	r5, #32
 8000b6e:	1bad      	subs	r5, r5, r6
 8000b70:	001a      	movs	r2, r3
 8000b72:	40ab      	lsls	r3, r5
 8000b74:	40f2      	lsrs	r2, r6
 8000b76:	1e5c      	subs	r4, r3, #1
 8000b78:	41a3      	sbcs	r3, r4
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	444b      	add	r3, r9
 8000b7e:	0005      	movs	r5, r0
 8000b80:	e721      	b.n	80009c6 <__aeabi_fsub+0x11e>
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0d8      	beq.n	8000b38 <__aeabi_fsub+0x290>
 8000b86:	4649      	mov	r1, r9
 8000b88:	2900      	cmp	r1, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fsub+0x2e6>
 8000b8c:	e752      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	03c9      	lsls	r1, r1, #15
 8000b92:	420f      	tst	r7, r1
 8000b94:	d100      	bne.n	8000b98 <__aeabi_fsub+0x2f0>
 8000b96:	e74d      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000b98:	4660      	mov	r0, ip
 8000b9a:	4208      	tst	r0, r1
 8000b9c:	d000      	beq.n	8000ba0 <__aeabi_fsub+0x2f8>
 8000b9e:	e749      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000ba0:	464b      	mov	r3, r9
 8000ba2:	e747      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000ba4:	4648      	mov	r0, r9
 8000ba6:	25ff      	movs	r5, #255	; 0xff
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d100      	bne.n	8000bae <__aeabi_fsub+0x306>
 8000bac:	e74f      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000bae:	2280      	movs	r2, #128	; 0x80
 8000bb0:	03d2      	lsls	r2, r2, #15
 8000bb2:	4217      	tst	r7, r2
 8000bb4:	d004      	beq.n	8000bc0 <__aeabi_fsub+0x318>
 8000bb6:	4660      	mov	r0, ip
 8000bb8:	4210      	tst	r0, r2
 8000bba:	d101      	bne.n	8000bc0 <__aeabi_fsub+0x318>
 8000bbc:	464b      	mov	r3, r9
 8000bbe:	4688      	mov	r8, r1
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	4641      	mov	r1, r8
 8000bc4:	25ff      	movs	r5, #255	; 0xff
 8000bc6:	400a      	ands	r2, r1
 8000bc8:	e741      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000bca:	4648      	mov	r0, r9
 8000bcc:	2800      	cmp	r0, #0
 8000bce:	d01f      	beq.n	8000c10 <__aeabi_fsub+0x368>
 8000bd0:	1a1a      	subs	r2, r3, r0
 8000bd2:	0150      	lsls	r0, r2, #5
 8000bd4:	d520      	bpl.n	8000c18 <__aeabi_fsub+0x370>
 8000bd6:	464a      	mov	r2, r9
 8000bd8:	2407      	movs	r4, #7
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	401c      	ands	r4, r3
 8000bde:	4688      	mov	r8, r1
 8000be0:	2500      	movs	r5, #0
 8000be2:	e6a6      	b.n	8000932 <__aeabi_fsub+0x8a>
 8000be4:	1c74      	adds	r4, r6, #1
 8000be6:	d0c9      	beq.n	8000b7c <__aeabi_fsub+0x2d4>
 8000be8:	43f6      	mvns	r6, r6
 8000bea:	28ff      	cmp	r0, #255	; 0xff
 8000bec:	d1bc      	bne.n	8000b68 <__aeabi_fsub+0x2c0>
 8000bee:	464b      	mov	r3, r9
 8000bf0:	e720      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000bf2:	4699      	mov	r9, r3
 8000bf4:	464b      	mov	r3, r9
 8000bf6:	2500      	movs	r5, #0
 8000bf8:	08db      	lsrs	r3, r3, #3
 8000bfa:	e72b      	b.n	8000a54 <__aeabi_fsub+0x1ac>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e740      	b.n	8000a82 <__aeabi_fsub+0x1da>
 8000c00:	2200      	movs	r2, #0
 8000c02:	2300      	movs	r3, #0
 8000c04:	e6a9      	b.n	800095a <__aeabi_fsub+0xb2>
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	2200      	movs	r2, #0
 8000c0a:	03db      	lsls	r3, r3, #15
 8000c0c:	24ff      	movs	r4, #255	; 0xff
 8000c0e:	e6a4      	b.n	800095a <__aeabi_fsub+0xb2>
 8000c10:	2500      	movs	r5, #0
 8000c12:	e71c      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000c14:	2301      	movs	r3, #1
 8000c16:	e7b1      	b.n	8000b7c <__aeabi_fsub+0x2d4>
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	d0f1      	beq.n	8000c00 <__aeabi_fsub+0x358>
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	2500      	movs	r5, #0
 8000c20:	e6fc      	b.n	8000a1c <__aeabi_fsub+0x174>
 8000c22:	2500      	movs	r5, #0
 8000c24:	e6fa      	b.n	8000a1c <__aeabi_fsub+0x174>
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	7dffffff 	.word	0x7dffffff
 8000c2c:	fbffffff 	.word	0xfbffffff

08000c30 <__aeabi_i2f>:
 8000c30:	b570      	push	{r4, r5, r6, lr}
 8000c32:	2800      	cmp	r0, #0
 8000c34:	d03d      	beq.n	8000cb2 <__aeabi_i2f+0x82>
 8000c36:	17c3      	asrs	r3, r0, #31
 8000c38:	18c5      	adds	r5, r0, r3
 8000c3a:	405d      	eors	r5, r3
 8000c3c:	0fc4      	lsrs	r4, r0, #31
 8000c3e:	0028      	movs	r0, r5
 8000c40:	f001 fa22 	bl	8002088 <__clzsi2>
 8000c44:	229e      	movs	r2, #158	; 0x9e
 8000c46:	1a12      	subs	r2, r2, r0
 8000c48:	2a96      	cmp	r2, #150	; 0x96
 8000c4a:	dc07      	bgt.n	8000c5c <__aeabi_i2f+0x2c>
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	2808      	cmp	r0, #8
 8000c50:	dd33      	ble.n	8000cba <__aeabi_i2f+0x8a>
 8000c52:	3808      	subs	r0, #8
 8000c54:	4085      	lsls	r5, r0
 8000c56:	0268      	lsls	r0, r5, #9
 8000c58:	0a40      	lsrs	r0, r0, #9
 8000c5a:	e023      	b.n	8000ca4 <__aeabi_i2f+0x74>
 8000c5c:	2a99      	cmp	r2, #153	; 0x99
 8000c5e:	dd0b      	ble.n	8000c78 <__aeabi_i2f+0x48>
 8000c60:	2305      	movs	r3, #5
 8000c62:	0029      	movs	r1, r5
 8000c64:	1a1b      	subs	r3, r3, r0
 8000c66:	40d9      	lsrs	r1, r3
 8000c68:	0003      	movs	r3, r0
 8000c6a:	331b      	adds	r3, #27
 8000c6c:	409d      	lsls	r5, r3
 8000c6e:	002b      	movs	r3, r5
 8000c70:	1e5d      	subs	r5, r3, #1
 8000c72:	41ab      	sbcs	r3, r5
 8000c74:	4319      	orrs	r1, r3
 8000c76:	000d      	movs	r5, r1
 8000c78:	2805      	cmp	r0, #5
 8000c7a:	dd01      	ble.n	8000c80 <__aeabi_i2f+0x50>
 8000c7c:	1f43      	subs	r3, r0, #5
 8000c7e:	409d      	lsls	r5, r3
 8000c80:	002b      	movs	r3, r5
 8000c82:	490f      	ldr	r1, [pc, #60]	; (8000cc0 <__aeabi_i2f+0x90>)
 8000c84:	400b      	ands	r3, r1
 8000c86:	076e      	lsls	r6, r5, #29
 8000c88:	d009      	beq.n	8000c9e <__aeabi_i2f+0x6e>
 8000c8a:	260f      	movs	r6, #15
 8000c8c:	4035      	ands	r5, r6
 8000c8e:	2d04      	cmp	r5, #4
 8000c90:	d005      	beq.n	8000c9e <__aeabi_i2f+0x6e>
 8000c92:	3304      	adds	r3, #4
 8000c94:	015d      	lsls	r5, r3, #5
 8000c96:	d502      	bpl.n	8000c9e <__aeabi_i2f+0x6e>
 8000c98:	229f      	movs	r2, #159	; 0x9f
 8000c9a:	400b      	ands	r3, r1
 8000c9c:	1a12      	subs	r2, r2, r0
 8000c9e:	019b      	lsls	r3, r3, #6
 8000ca0:	0a58      	lsrs	r0, r3, #9
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	0240      	lsls	r0, r0, #9
 8000ca6:	05d2      	lsls	r2, r2, #23
 8000ca8:	0a40      	lsrs	r0, r0, #9
 8000caa:	07e4      	lsls	r4, r4, #31
 8000cac:	4310      	orrs	r0, r2
 8000cae:	4320      	orrs	r0, r4
 8000cb0:	bd70      	pop	{r4, r5, r6, pc}
 8000cb2:	2400      	movs	r4, #0
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	e7f4      	b.n	8000ca4 <__aeabi_i2f+0x74>
 8000cba:	0268      	lsls	r0, r5, #9
 8000cbc:	0a40      	lsrs	r0, r0, #9
 8000cbe:	e7f1      	b.n	8000ca4 <__aeabi_i2f+0x74>
 8000cc0:	fbffffff 	.word	0xfbffffff

08000cc4 <__aeabi_dadd>:
 8000cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc6:	464f      	mov	r7, r9
 8000cc8:	4646      	mov	r6, r8
 8000cca:	46d6      	mov	lr, sl
 8000ccc:	000c      	movs	r4, r1
 8000cce:	0309      	lsls	r1, r1, #12
 8000cd0:	b5c0      	push	{r6, r7, lr}
 8000cd2:	0a49      	lsrs	r1, r1, #9
 8000cd4:	0f47      	lsrs	r7, r0, #29
 8000cd6:	005e      	lsls	r6, r3, #1
 8000cd8:	4339      	orrs	r1, r7
 8000cda:	031f      	lsls	r7, r3, #12
 8000cdc:	0fdb      	lsrs	r3, r3, #31
 8000cde:	469c      	mov	ip, r3
 8000ce0:	0065      	lsls	r5, r4, #1
 8000ce2:	0a7b      	lsrs	r3, r7, #9
 8000ce4:	0f57      	lsrs	r7, r2, #29
 8000ce6:	431f      	orrs	r7, r3
 8000ce8:	0d6d      	lsrs	r5, r5, #21
 8000cea:	0fe4      	lsrs	r4, r4, #31
 8000cec:	0d76      	lsrs	r6, r6, #21
 8000cee:	46a1      	mov	r9, r4
 8000cf0:	00c0      	lsls	r0, r0, #3
 8000cf2:	46b8      	mov	r8, r7
 8000cf4:	00d2      	lsls	r2, r2, #3
 8000cf6:	1bab      	subs	r3, r5, r6
 8000cf8:	4564      	cmp	r4, ip
 8000cfa:	d07b      	beq.n	8000df4 <__aeabi_dadd+0x130>
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	dd5f      	ble.n	8000dc0 <__aeabi_dadd+0xfc>
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d000      	beq.n	8000d06 <__aeabi_dadd+0x42>
 8000d04:	e0a4      	b.n	8000e50 <__aeabi_dadd+0x18c>
 8000d06:	003e      	movs	r6, r7
 8000d08:	4316      	orrs	r6, r2
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_dadd+0x4a>
 8000d0c:	e112      	b.n	8000f34 <__aeabi_dadd+0x270>
 8000d0e:	1e5e      	subs	r6, r3, #1
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d000      	beq.n	8000d16 <__aeabi_dadd+0x52>
 8000d14:	e19e      	b.n	8001054 <__aeabi_dadd+0x390>
 8000d16:	1a87      	subs	r7, r0, r2
 8000d18:	4643      	mov	r3, r8
 8000d1a:	42b8      	cmp	r0, r7
 8000d1c:	4180      	sbcs	r0, r0
 8000d1e:	2501      	movs	r5, #1
 8000d20:	1ac9      	subs	r1, r1, r3
 8000d22:	4240      	negs	r0, r0
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	020b      	lsls	r3, r1, #8
 8000d28:	d400      	bmi.n	8000d2c <__aeabi_dadd+0x68>
 8000d2a:	e131      	b.n	8000f90 <__aeabi_dadd+0x2cc>
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	0a4e      	lsrs	r6, r1, #9
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d100      	bne.n	8000d36 <__aeabi_dadd+0x72>
 8000d34:	e16e      	b.n	8001014 <__aeabi_dadd+0x350>
 8000d36:	0030      	movs	r0, r6
 8000d38:	f001 f9a6 	bl	8002088 <__clzsi2>
 8000d3c:	0003      	movs	r3, r0
 8000d3e:	3b08      	subs	r3, #8
 8000d40:	2b1f      	cmp	r3, #31
 8000d42:	dd00      	ble.n	8000d46 <__aeabi_dadd+0x82>
 8000d44:	e161      	b.n	800100a <__aeabi_dadd+0x346>
 8000d46:	2220      	movs	r2, #32
 8000d48:	0039      	movs	r1, r7
 8000d4a:	1ad2      	subs	r2, r2, r3
 8000d4c:	409e      	lsls	r6, r3
 8000d4e:	40d1      	lsrs	r1, r2
 8000d50:	409f      	lsls	r7, r3
 8000d52:	430e      	orrs	r6, r1
 8000d54:	429d      	cmp	r5, r3
 8000d56:	dd00      	ble.n	8000d5a <__aeabi_dadd+0x96>
 8000d58:	e151      	b.n	8000ffe <__aeabi_dadd+0x33a>
 8000d5a:	1b5d      	subs	r5, r3, r5
 8000d5c:	1c6b      	adds	r3, r5, #1
 8000d5e:	2b1f      	cmp	r3, #31
 8000d60:	dd00      	ble.n	8000d64 <__aeabi_dadd+0xa0>
 8000d62:	e17c      	b.n	800105e <__aeabi_dadd+0x39a>
 8000d64:	2120      	movs	r1, #32
 8000d66:	1ac9      	subs	r1, r1, r3
 8000d68:	003d      	movs	r5, r7
 8000d6a:	0030      	movs	r0, r6
 8000d6c:	408f      	lsls	r7, r1
 8000d6e:	4088      	lsls	r0, r1
 8000d70:	40dd      	lsrs	r5, r3
 8000d72:	1e79      	subs	r1, r7, #1
 8000d74:	418f      	sbcs	r7, r1
 8000d76:	0031      	movs	r1, r6
 8000d78:	2207      	movs	r2, #7
 8000d7a:	4328      	orrs	r0, r5
 8000d7c:	40d9      	lsrs	r1, r3
 8000d7e:	2500      	movs	r5, #0
 8000d80:	4307      	orrs	r7, r0
 8000d82:	403a      	ands	r2, r7
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	d009      	beq.n	8000d9c <__aeabi_dadd+0xd8>
 8000d88:	230f      	movs	r3, #15
 8000d8a:	403b      	ands	r3, r7
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d005      	beq.n	8000d9c <__aeabi_dadd+0xd8>
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	42bb      	cmp	r3, r7
 8000d94:	41bf      	sbcs	r7, r7
 8000d96:	427f      	negs	r7, r7
 8000d98:	19c9      	adds	r1, r1, r7
 8000d9a:	001f      	movs	r7, r3
 8000d9c:	020b      	lsls	r3, r1, #8
 8000d9e:	d400      	bmi.n	8000da2 <__aeabi_dadd+0xde>
 8000da0:	e226      	b.n	80011f0 <__aeabi_dadd+0x52c>
 8000da2:	1c6a      	adds	r2, r5, #1
 8000da4:	4bc6      	ldr	r3, [pc, #792]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000da6:	0555      	lsls	r5, r2, #21
 8000da8:	0d6d      	lsrs	r5, r5, #21
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d100      	bne.n	8000db0 <__aeabi_dadd+0xec>
 8000dae:	e106      	b.n	8000fbe <__aeabi_dadd+0x2fa>
 8000db0:	4ac4      	ldr	r2, [pc, #784]	; (80010c4 <__aeabi_dadd+0x400>)
 8000db2:	08ff      	lsrs	r7, r7, #3
 8000db4:	400a      	ands	r2, r1
 8000db6:	0753      	lsls	r3, r2, #29
 8000db8:	0252      	lsls	r2, r2, #9
 8000dba:	433b      	orrs	r3, r7
 8000dbc:	0b12      	lsrs	r2, r2, #12
 8000dbe:	e08e      	b.n	8000ede <__aeabi_dadd+0x21a>
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d000      	beq.n	8000dc6 <__aeabi_dadd+0x102>
 8000dc4:	e0b8      	b.n	8000f38 <__aeabi_dadd+0x274>
 8000dc6:	1c6b      	adds	r3, r5, #1
 8000dc8:	055b      	lsls	r3, r3, #21
 8000dca:	0d5b      	lsrs	r3, r3, #21
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	dc00      	bgt.n	8000dd2 <__aeabi_dadd+0x10e>
 8000dd0:	e130      	b.n	8001034 <__aeabi_dadd+0x370>
 8000dd2:	1a87      	subs	r7, r0, r2
 8000dd4:	4643      	mov	r3, r8
 8000dd6:	42b8      	cmp	r0, r7
 8000dd8:	41b6      	sbcs	r6, r6
 8000dda:	1acb      	subs	r3, r1, r3
 8000ddc:	4276      	negs	r6, r6
 8000dde:	1b9e      	subs	r6, r3, r6
 8000de0:	0233      	lsls	r3, r6, #8
 8000de2:	d500      	bpl.n	8000de6 <__aeabi_dadd+0x122>
 8000de4:	e14c      	b.n	8001080 <__aeabi_dadd+0x3bc>
 8000de6:	003b      	movs	r3, r7
 8000de8:	4333      	orrs	r3, r6
 8000dea:	d1a1      	bne.n	8000d30 <__aeabi_dadd+0x6c>
 8000dec:	2200      	movs	r2, #0
 8000dee:	2400      	movs	r4, #0
 8000df0:	2500      	movs	r5, #0
 8000df2:	e070      	b.n	8000ed6 <__aeabi_dadd+0x212>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	dc00      	bgt.n	8000dfa <__aeabi_dadd+0x136>
 8000df8:	e0e5      	b.n	8000fc6 <__aeabi_dadd+0x302>
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_dadd+0x13c>
 8000dfe:	e083      	b.n	8000f08 <__aeabi_dadd+0x244>
 8000e00:	4eaf      	ldr	r6, [pc, #700]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000e02:	42b5      	cmp	r5, r6
 8000e04:	d060      	beq.n	8000ec8 <__aeabi_dadd+0x204>
 8000e06:	2680      	movs	r6, #128	; 0x80
 8000e08:	0436      	lsls	r6, r6, #16
 8000e0a:	4337      	orrs	r7, r6
 8000e0c:	46b8      	mov	r8, r7
 8000e0e:	2b38      	cmp	r3, #56	; 0x38
 8000e10:	dc00      	bgt.n	8000e14 <__aeabi_dadd+0x150>
 8000e12:	e13e      	b.n	8001092 <__aeabi_dadd+0x3ce>
 8000e14:	4643      	mov	r3, r8
 8000e16:	4313      	orrs	r3, r2
 8000e18:	001f      	movs	r7, r3
 8000e1a:	1e7a      	subs	r2, r7, #1
 8000e1c:	4197      	sbcs	r7, r2
 8000e1e:	183f      	adds	r7, r7, r0
 8000e20:	4287      	cmp	r7, r0
 8000e22:	4180      	sbcs	r0, r0
 8000e24:	4240      	negs	r0, r0
 8000e26:	1809      	adds	r1, r1, r0
 8000e28:	020b      	lsls	r3, r1, #8
 8000e2a:	d400      	bmi.n	8000e2e <__aeabi_dadd+0x16a>
 8000e2c:	e0b0      	b.n	8000f90 <__aeabi_dadd+0x2cc>
 8000e2e:	4ba4      	ldr	r3, [pc, #656]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000e30:	3501      	adds	r5, #1
 8000e32:	429d      	cmp	r5, r3
 8000e34:	d100      	bne.n	8000e38 <__aeabi_dadd+0x174>
 8000e36:	e0c3      	b.n	8000fc0 <__aeabi_dadd+0x2fc>
 8000e38:	4aa2      	ldr	r2, [pc, #648]	; (80010c4 <__aeabi_dadd+0x400>)
 8000e3a:	087b      	lsrs	r3, r7, #1
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	2101      	movs	r1, #1
 8000e40:	400f      	ands	r7, r1
 8000e42:	431f      	orrs	r7, r3
 8000e44:	0851      	lsrs	r1, r2, #1
 8000e46:	07d3      	lsls	r3, r2, #31
 8000e48:	2207      	movs	r2, #7
 8000e4a:	431f      	orrs	r7, r3
 8000e4c:	403a      	ands	r2, r7
 8000e4e:	e799      	b.n	8000d84 <__aeabi_dadd+0xc0>
 8000e50:	4e9b      	ldr	r6, [pc, #620]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000e52:	42b5      	cmp	r5, r6
 8000e54:	d038      	beq.n	8000ec8 <__aeabi_dadd+0x204>
 8000e56:	2680      	movs	r6, #128	; 0x80
 8000e58:	0436      	lsls	r6, r6, #16
 8000e5a:	4337      	orrs	r7, r6
 8000e5c:	46b8      	mov	r8, r7
 8000e5e:	2b38      	cmp	r3, #56	; 0x38
 8000e60:	dd00      	ble.n	8000e64 <__aeabi_dadd+0x1a0>
 8000e62:	e0dc      	b.n	800101e <__aeabi_dadd+0x35a>
 8000e64:	2b1f      	cmp	r3, #31
 8000e66:	dc00      	bgt.n	8000e6a <__aeabi_dadd+0x1a6>
 8000e68:	e130      	b.n	80010cc <__aeabi_dadd+0x408>
 8000e6a:	001e      	movs	r6, r3
 8000e6c:	4647      	mov	r7, r8
 8000e6e:	3e20      	subs	r6, #32
 8000e70:	40f7      	lsrs	r7, r6
 8000e72:	46bc      	mov	ip, r7
 8000e74:	2b20      	cmp	r3, #32
 8000e76:	d004      	beq.n	8000e82 <__aeabi_dadd+0x1be>
 8000e78:	2640      	movs	r6, #64	; 0x40
 8000e7a:	1af3      	subs	r3, r6, r3
 8000e7c:	4646      	mov	r6, r8
 8000e7e:	409e      	lsls	r6, r3
 8000e80:	4332      	orrs	r2, r6
 8000e82:	0017      	movs	r7, r2
 8000e84:	4663      	mov	r3, ip
 8000e86:	1e7a      	subs	r2, r7, #1
 8000e88:	4197      	sbcs	r7, r2
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	e0cc      	b.n	8001028 <__aeabi_dadd+0x364>
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d100      	bne.n	8000e94 <__aeabi_dadd+0x1d0>
 8000e92:	e204      	b.n	800129e <__aeabi_dadd+0x5da>
 8000e94:	4643      	mov	r3, r8
 8000e96:	4313      	orrs	r3, r2
 8000e98:	d100      	bne.n	8000e9c <__aeabi_dadd+0x1d8>
 8000e9a:	e159      	b.n	8001150 <__aeabi_dadd+0x48c>
 8000e9c:	074b      	lsls	r3, r1, #29
 8000e9e:	08c0      	lsrs	r0, r0, #3
 8000ea0:	4318      	orrs	r0, r3
 8000ea2:	2380      	movs	r3, #128	; 0x80
 8000ea4:	08c9      	lsrs	r1, r1, #3
 8000ea6:	031b      	lsls	r3, r3, #12
 8000ea8:	4219      	tst	r1, r3
 8000eaa:	d008      	beq.n	8000ebe <__aeabi_dadd+0x1fa>
 8000eac:	4645      	mov	r5, r8
 8000eae:	08ed      	lsrs	r5, r5, #3
 8000eb0:	421d      	tst	r5, r3
 8000eb2:	d104      	bne.n	8000ebe <__aeabi_dadd+0x1fa>
 8000eb4:	4643      	mov	r3, r8
 8000eb6:	08d0      	lsrs	r0, r2, #3
 8000eb8:	0759      	lsls	r1, r3, #29
 8000eba:	4308      	orrs	r0, r1
 8000ebc:	0029      	movs	r1, r5
 8000ebe:	0f42      	lsrs	r2, r0, #29
 8000ec0:	00c9      	lsls	r1, r1, #3
 8000ec2:	4d7f      	ldr	r5, [pc, #508]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000ec4:	4311      	orrs	r1, r2
 8000ec6:	00c0      	lsls	r0, r0, #3
 8000ec8:	074b      	lsls	r3, r1, #29
 8000eca:	08ca      	lsrs	r2, r1, #3
 8000ecc:	497c      	ldr	r1, [pc, #496]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000ece:	08c0      	lsrs	r0, r0, #3
 8000ed0:	4303      	orrs	r3, r0
 8000ed2:	428d      	cmp	r5, r1
 8000ed4:	d068      	beq.n	8000fa8 <__aeabi_dadd+0x2e4>
 8000ed6:	0312      	lsls	r2, r2, #12
 8000ed8:	056d      	lsls	r5, r5, #21
 8000eda:	0b12      	lsrs	r2, r2, #12
 8000edc:	0d6d      	lsrs	r5, r5, #21
 8000ede:	2100      	movs	r1, #0
 8000ee0:	0312      	lsls	r2, r2, #12
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	0b13      	lsrs	r3, r2, #12
 8000ee6:	0d0a      	lsrs	r2, r1, #20
 8000ee8:	0512      	lsls	r2, r2, #20
 8000eea:	431a      	orrs	r2, r3
 8000eec:	4b76      	ldr	r3, [pc, #472]	; (80010c8 <__aeabi_dadd+0x404>)
 8000eee:	052d      	lsls	r5, r5, #20
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	432b      	orrs	r3, r5
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	07e4      	lsls	r4, r4, #31
 8000ef8:	085b      	lsrs	r3, r3, #1
 8000efa:	4323      	orrs	r3, r4
 8000efc:	0019      	movs	r1, r3
 8000efe:	bc1c      	pop	{r2, r3, r4}
 8000f00:	4690      	mov	r8, r2
 8000f02:	4699      	mov	r9, r3
 8000f04:	46a2      	mov	sl, r4
 8000f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f08:	003e      	movs	r6, r7
 8000f0a:	4316      	orrs	r6, r2
 8000f0c:	d012      	beq.n	8000f34 <__aeabi_dadd+0x270>
 8000f0e:	1e5e      	subs	r6, r3, #1
 8000f10:	2e00      	cmp	r6, #0
 8000f12:	d000      	beq.n	8000f16 <__aeabi_dadd+0x252>
 8000f14:	e100      	b.n	8001118 <__aeabi_dadd+0x454>
 8000f16:	1887      	adds	r7, r0, r2
 8000f18:	4287      	cmp	r7, r0
 8000f1a:	4180      	sbcs	r0, r0
 8000f1c:	4441      	add	r1, r8
 8000f1e:	4240      	negs	r0, r0
 8000f20:	1809      	adds	r1, r1, r0
 8000f22:	2501      	movs	r5, #1
 8000f24:	020b      	lsls	r3, r1, #8
 8000f26:	d533      	bpl.n	8000f90 <__aeabi_dadd+0x2cc>
 8000f28:	2502      	movs	r5, #2
 8000f2a:	e785      	b.n	8000e38 <__aeabi_dadd+0x174>
 8000f2c:	4664      	mov	r4, ip
 8000f2e:	0033      	movs	r3, r6
 8000f30:	4641      	mov	r1, r8
 8000f32:	0010      	movs	r0, r2
 8000f34:	001d      	movs	r5, r3
 8000f36:	e7c7      	b.n	8000ec8 <__aeabi_dadd+0x204>
 8000f38:	2d00      	cmp	r5, #0
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_dadd+0x27a>
 8000f3c:	e0da      	b.n	80010f4 <__aeabi_dadd+0x430>
 8000f3e:	000c      	movs	r4, r1
 8000f40:	4304      	orrs	r4, r0
 8000f42:	d0f3      	beq.n	8000f2c <__aeabi_dadd+0x268>
 8000f44:	1c5c      	adds	r4, r3, #1
 8000f46:	d100      	bne.n	8000f4a <__aeabi_dadd+0x286>
 8000f48:	e19f      	b.n	800128a <__aeabi_dadd+0x5c6>
 8000f4a:	4c5d      	ldr	r4, [pc, #372]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000f4c:	42a6      	cmp	r6, r4
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_dadd+0x28e>
 8000f50:	e12f      	b.n	80011b2 <__aeabi_dadd+0x4ee>
 8000f52:	43db      	mvns	r3, r3
 8000f54:	2b38      	cmp	r3, #56	; 0x38
 8000f56:	dd00      	ble.n	8000f5a <__aeabi_dadd+0x296>
 8000f58:	e166      	b.n	8001228 <__aeabi_dadd+0x564>
 8000f5a:	2b1f      	cmp	r3, #31
 8000f5c:	dd00      	ble.n	8000f60 <__aeabi_dadd+0x29c>
 8000f5e:	e183      	b.n	8001268 <__aeabi_dadd+0x5a4>
 8000f60:	2420      	movs	r4, #32
 8000f62:	0005      	movs	r5, r0
 8000f64:	1ae4      	subs	r4, r4, r3
 8000f66:	000f      	movs	r7, r1
 8000f68:	40dd      	lsrs	r5, r3
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	40a0      	lsls	r0, r4
 8000f6e:	4643      	mov	r3, r8
 8000f70:	40a7      	lsls	r7, r4
 8000f72:	1a5b      	subs	r3, r3, r1
 8000f74:	1e44      	subs	r4, r0, #1
 8000f76:	41a0      	sbcs	r0, r4
 8000f78:	4698      	mov	r8, r3
 8000f7a:	432f      	orrs	r7, r5
 8000f7c:	4338      	orrs	r0, r7
 8000f7e:	1a17      	subs	r7, r2, r0
 8000f80:	42ba      	cmp	r2, r7
 8000f82:	4192      	sbcs	r2, r2
 8000f84:	4643      	mov	r3, r8
 8000f86:	4252      	negs	r2, r2
 8000f88:	1a99      	subs	r1, r3, r2
 8000f8a:	4664      	mov	r4, ip
 8000f8c:	0035      	movs	r5, r6
 8000f8e:	e6ca      	b.n	8000d26 <__aeabi_dadd+0x62>
 8000f90:	2207      	movs	r2, #7
 8000f92:	403a      	ands	r2, r7
 8000f94:	2a00      	cmp	r2, #0
 8000f96:	d000      	beq.n	8000f9a <__aeabi_dadd+0x2d6>
 8000f98:	e6f6      	b.n	8000d88 <__aeabi_dadd+0xc4>
 8000f9a:	074b      	lsls	r3, r1, #29
 8000f9c:	08ca      	lsrs	r2, r1, #3
 8000f9e:	4948      	ldr	r1, [pc, #288]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000fa0:	08ff      	lsrs	r7, r7, #3
 8000fa2:	433b      	orrs	r3, r7
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d196      	bne.n	8000ed6 <__aeabi_dadd+0x212>
 8000fa8:	0019      	movs	r1, r3
 8000faa:	4311      	orrs	r1, r2
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_dadd+0x2ec>
 8000fae:	e19e      	b.n	80012ee <__aeabi_dadd+0x62a>
 8000fb0:	2180      	movs	r1, #128	; 0x80
 8000fb2:	0309      	lsls	r1, r1, #12
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	0312      	lsls	r2, r2, #12
 8000fb8:	0b12      	lsrs	r2, r2, #12
 8000fba:	4d41      	ldr	r5, [pc, #260]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000fbc:	e78f      	b.n	8000ede <__aeabi_dadd+0x21a>
 8000fbe:	0015      	movs	r5, r2
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e78b      	b.n	8000ede <__aeabi_dadd+0x21a>
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d000      	beq.n	8000fcc <__aeabi_dadd+0x308>
 8000fca:	e0c7      	b.n	800115c <__aeabi_dadd+0x498>
 8000fcc:	1c6b      	adds	r3, r5, #1
 8000fce:	055f      	lsls	r7, r3, #21
 8000fd0:	0d7f      	lsrs	r7, r7, #21
 8000fd2:	2f01      	cmp	r7, #1
 8000fd4:	dc00      	bgt.n	8000fd8 <__aeabi_dadd+0x314>
 8000fd6:	e0f1      	b.n	80011bc <__aeabi_dadd+0x4f8>
 8000fd8:	4d39      	ldr	r5, [pc, #228]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000fda:	42ab      	cmp	r3, r5
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_dadd+0x31c>
 8000fde:	e0b9      	b.n	8001154 <__aeabi_dadd+0x490>
 8000fe0:	1885      	adds	r5, r0, r2
 8000fe2:	000a      	movs	r2, r1
 8000fe4:	4285      	cmp	r5, r0
 8000fe6:	4189      	sbcs	r1, r1
 8000fe8:	4442      	add	r2, r8
 8000fea:	4249      	negs	r1, r1
 8000fec:	1851      	adds	r1, r2, r1
 8000fee:	2207      	movs	r2, #7
 8000ff0:	07cf      	lsls	r7, r1, #31
 8000ff2:	086d      	lsrs	r5, r5, #1
 8000ff4:	432f      	orrs	r7, r5
 8000ff6:	0849      	lsrs	r1, r1, #1
 8000ff8:	403a      	ands	r2, r7
 8000ffa:	001d      	movs	r5, r3
 8000ffc:	e6c2      	b.n	8000d84 <__aeabi_dadd+0xc0>
 8000ffe:	2207      	movs	r2, #7
 8001000:	4930      	ldr	r1, [pc, #192]	; (80010c4 <__aeabi_dadd+0x400>)
 8001002:	1aed      	subs	r5, r5, r3
 8001004:	4031      	ands	r1, r6
 8001006:	403a      	ands	r2, r7
 8001008:	e6bc      	b.n	8000d84 <__aeabi_dadd+0xc0>
 800100a:	003e      	movs	r6, r7
 800100c:	3828      	subs	r0, #40	; 0x28
 800100e:	4086      	lsls	r6, r0
 8001010:	2700      	movs	r7, #0
 8001012:	e69f      	b.n	8000d54 <__aeabi_dadd+0x90>
 8001014:	0038      	movs	r0, r7
 8001016:	f001 f837 	bl	8002088 <__clzsi2>
 800101a:	3020      	adds	r0, #32
 800101c:	e68e      	b.n	8000d3c <__aeabi_dadd+0x78>
 800101e:	4643      	mov	r3, r8
 8001020:	4313      	orrs	r3, r2
 8001022:	001f      	movs	r7, r3
 8001024:	1e7a      	subs	r2, r7, #1
 8001026:	4197      	sbcs	r7, r2
 8001028:	1bc7      	subs	r7, r0, r7
 800102a:	42b8      	cmp	r0, r7
 800102c:	4180      	sbcs	r0, r0
 800102e:	4240      	negs	r0, r0
 8001030:	1a09      	subs	r1, r1, r0
 8001032:	e678      	b.n	8000d26 <__aeabi_dadd+0x62>
 8001034:	000e      	movs	r6, r1
 8001036:	003b      	movs	r3, r7
 8001038:	4306      	orrs	r6, r0
 800103a:	4313      	orrs	r3, r2
 800103c:	2d00      	cmp	r5, #0
 800103e:	d161      	bne.n	8001104 <__aeabi_dadd+0x440>
 8001040:	2e00      	cmp	r6, #0
 8001042:	d000      	beq.n	8001046 <__aeabi_dadd+0x382>
 8001044:	e0f4      	b.n	8001230 <__aeabi_dadd+0x56c>
 8001046:	2b00      	cmp	r3, #0
 8001048:	d100      	bne.n	800104c <__aeabi_dadd+0x388>
 800104a:	e11b      	b.n	8001284 <__aeabi_dadd+0x5c0>
 800104c:	4664      	mov	r4, ip
 800104e:	0039      	movs	r1, r7
 8001050:	0010      	movs	r0, r2
 8001052:	e739      	b.n	8000ec8 <__aeabi_dadd+0x204>
 8001054:	4f1a      	ldr	r7, [pc, #104]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8001056:	42bb      	cmp	r3, r7
 8001058:	d07a      	beq.n	8001150 <__aeabi_dadd+0x48c>
 800105a:	0033      	movs	r3, r6
 800105c:	e6ff      	b.n	8000e5e <__aeabi_dadd+0x19a>
 800105e:	0030      	movs	r0, r6
 8001060:	3d1f      	subs	r5, #31
 8001062:	40e8      	lsrs	r0, r5
 8001064:	2b20      	cmp	r3, #32
 8001066:	d003      	beq.n	8001070 <__aeabi_dadd+0x3ac>
 8001068:	2140      	movs	r1, #64	; 0x40
 800106a:	1acb      	subs	r3, r1, r3
 800106c:	409e      	lsls	r6, r3
 800106e:	4337      	orrs	r7, r6
 8001070:	1e7b      	subs	r3, r7, #1
 8001072:	419f      	sbcs	r7, r3
 8001074:	2207      	movs	r2, #7
 8001076:	4307      	orrs	r7, r0
 8001078:	403a      	ands	r2, r7
 800107a:	2100      	movs	r1, #0
 800107c:	2500      	movs	r5, #0
 800107e:	e789      	b.n	8000f94 <__aeabi_dadd+0x2d0>
 8001080:	1a17      	subs	r7, r2, r0
 8001082:	4643      	mov	r3, r8
 8001084:	42ba      	cmp	r2, r7
 8001086:	41b6      	sbcs	r6, r6
 8001088:	1a59      	subs	r1, r3, r1
 800108a:	4276      	negs	r6, r6
 800108c:	1b8e      	subs	r6, r1, r6
 800108e:	4664      	mov	r4, ip
 8001090:	e64e      	b.n	8000d30 <__aeabi_dadd+0x6c>
 8001092:	2b1f      	cmp	r3, #31
 8001094:	dd00      	ble.n	8001098 <__aeabi_dadd+0x3d4>
 8001096:	e0ad      	b.n	80011f4 <__aeabi_dadd+0x530>
 8001098:	2620      	movs	r6, #32
 800109a:	4647      	mov	r7, r8
 800109c:	1af6      	subs	r6, r6, r3
 800109e:	40b7      	lsls	r7, r6
 80010a0:	46b9      	mov	r9, r7
 80010a2:	0017      	movs	r7, r2
 80010a4:	46b2      	mov	sl, r6
 80010a6:	40df      	lsrs	r7, r3
 80010a8:	464e      	mov	r6, r9
 80010aa:	433e      	orrs	r6, r7
 80010ac:	0037      	movs	r7, r6
 80010ae:	4656      	mov	r6, sl
 80010b0:	40b2      	lsls	r2, r6
 80010b2:	1e56      	subs	r6, r2, #1
 80010b4:	41b2      	sbcs	r2, r6
 80010b6:	4317      	orrs	r7, r2
 80010b8:	4642      	mov	r2, r8
 80010ba:	40da      	lsrs	r2, r3
 80010bc:	1889      	adds	r1, r1, r2
 80010be:	e6ae      	b.n	8000e1e <__aeabi_dadd+0x15a>
 80010c0:	000007ff 	.word	0x000007ff
 80010c4:	ff7fffff 	.word	0xff7fffff
 80010c8:	800fffff 	.word	0x800fffff
 80010cc:	2620      	movs	r6, #32
 80010ce:	4647      	mov	r7, r8
 80010d0:	1af6      	subs	r6, r6, r3
 80010d2:	40b7      	lsls	r7, r6
 80010d4:	46b9      	mov	r9, r7
 80010d6:	0017      	movs	r7, r2
 80010d8:	46b2      	mov	sl, r6
 80010da:	40df      	lsrs	r7, r3
 80010dc:	464e      	mov	r6, r9
 80010de:	433e      	orrs	r6, r7
 80010e0:	0037      	movs	r7, r6
 80010e2:	4656      	mov	r6, sl
 80010e4:	40b2      	lsls	r2, r6
 80010e6:	1e56      	subs	r6, r2, #1
 80010e8:	41b2      	sbcs	r2, r6
 80010ea:	4317      	orrs	r7, r2
 80010ec:	4642      	mov	r2, r8
 80010ee:	40da      	lsrs	r2, r3
 80010f0:	1a89      	subs	r1, r1, r2
 80010f2:	e799      	b.n	8001028 <__aeabi_dadd+0x364>
 80010f4:	4c7f      	ldr	r4, [pc, #508]	; (80012f4 <__aeabi_dadd+0x630>)
 80010f6:	42a6      	cmp	r6, r4
 80010f8:	d05b      	beq.n	80011b2 <__aeabi_dadd+0x4ee>
 80010fa:	2480      	movs	r4, #128	; 0x80
 80010fc:	0424      	lsls	r4, r4, #16
 80010fe:	425b      	negs	r3, r3
 8001100:	4321      	orrs	r1, r4
 8001102:	e727      	b.n	8000f54 <__aeabi_dadd+0x290>
 8001104:	2e00      	cmp	r6, #0
 8001106:	d10c      	bne.n	8001122 <__aeabi_dadd+0x45e>
 8001108:	2b00      	cmp	r3, #0
 800110a:	d100      	bne.n	800110e <__aeabi_dadd+0x44a>
 800110c:	e0cb      	b.n	80012a6 <__aeabi_dadd+0x5e2>
 800110e:	4664      	mov	r4, ip
 8001110:	0039      	movs	r1, r7
 8001112:	0010      	movs	r0, r2
 8001114:	4d77      	ldr	r5, [pc, #476]	; (80012f4 <__aeabi_dadd+0x630>)
 8001116:	e6d7      	b.n	8000ec8 <__aeabi_dadd+0x204>
 8001118:	4f76      	ldr	r7, [pc, #472]	; (80012f4 <__aeabi_dadd+0x630>)
 800111a:	42bb      	cmp	r3, r7
 800111c:	d018      	beq.n	8001150 <__aeabi_dadd+0x48c>
 800111e:	0033      	movs	r3, r6
 8001120:	e675      	b.n	8000e0e <__aeabi_dadd+0x14a>
 8001122:	2b00      	cmp	r3, #0
 8001124:	d014      	beq.n	8001150 <__aeabi_dadd+0x48c>
 8001126:	074b      	lsls	r3, r1, #29
 8001128:	08c0      	lsrs	r0, r0, #3
 800112a:	4318      	orrs	r0, r3
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	08c9      	lsrs	r1, r1, #3
 8001130:	031b      	lsls	r3, r3, #12
 8001132:	4219      	tst	r1, r3
 8001134:	d007      	beq.n	8001146 <__aeabi_dadd+0x482>
 8001136:	08fc      	lsrs	r4, r7, #3
 8001138:	421c      	tst	r4, r3
 800113a:	d104      	bne.n	8001146 <__aeabi_dadd+0x482>
 800113c:	0779      	lsls	r1, r7, #29
 800113e:	08d0      	lsrs	r0, r2, #3
 8001140:	4308      	orrs	r0, r1
 8001142:	46e1      	mov	r9, ip
 8001144:	0021      	movs	r1, r4
 8001146:	464c      	mov	r4, r9
 8001148:	0f42      	lsrs	r2, r0, #29
 800114a:	00c9      	lsls	r1, r1, #3
 800114c:	4311      	orrs	r1, r2
 800114e:	00c0      	lsls	r0, r0, #3
 8001150:	4d68      	ldr	r5, [pc, #416]	; (80012f4 <__aeabi_dadd+0x630>)
 8001152:	e6b9      	b.n	8000ec8 <__aeabi_dadd+0x204>
 8001154:	001d      	movs	r5, r3
 8001156:	2200      	movs	r2, #0
 8001158:	2300      	movs	r3, #0
 800115a:	e6c0      	b.n	8000ede <__aeabi_dadd+0x21a>
 800115c:	2d00      	cmp	r5, #0
 800115e:	d15b      	bne.n	8001218 <__aeabi_dadd+0x554>
 8001160:	000d      	movs	r5, r1
 8001162:	4305      	orrs	r5, r0
 8001164:	d100      	bne.n	8001168 <__aeabi_dadd+0x4a4>
 8001166:	e6e2      	b.n	8000f2e <__aeabi_dadd+0x26a>
 8001168:	1c5d      	adds	r5, r3, #1
 800116a:	d100      	bne.n	800116e <__aeabi_dadd+0x4aa>
 800116c:	e0b0      	b.n	80012d0 <__aeabi_dadd+0x60c>
 800116e:	4d61      	ldr	r5, [pc, #388]	; (80012f4 <__aeabi_dadd+0x630>)
 8001170:	42ae      	cmp	r6, r5
 8001172:	d01f      	beq.n	80011b4 <__aeabi_dadd+0x4f0>
 8001174:	43db      	mvns	r3, r3
 8001176:	2b38      	cmp	r3, #56	; 0x38
 8001178:	dc71      	bgt.n	800125e <__aeabi_dadd+0x59a>
 800117a:	2b1f      	cmp	r3, #31
 800117c:	dd00      	ble.n	8001180 <__aeabi_dadd+0x4bc>
 800117e:	e096      	b.n	80012ae <__aeabi_dadd+0x5ea>
 8001180:	2520      	movs	r5, #32
 8001182:	000f      	movs	r7, r1
 8001184:	1aed      	subs	r5, r5, r3
 8001186:	40af      	lsls	r7, r5
 8001188:	46b9      	mov	r9, r7
 800118a:	0007      	movs	r7, r0
 800118c:	46aa      	mov	sl, r5
 800118e:	40df      	lsrs	r7, r3
 8001190:	464d      	mov	r5, r9
 8001192:	433d      	orrs	r5, r7
 8001194:	002f      	movs	r7, r5
 8001196:	4655      	mov	r5, sl
 8001198:	40a8      	lsls	r0, r5
 800119a:	40d9      	lsrs	r1, r3
 800119c:	1e45      	subs	r5, r0, #1
 800119e:	41a8      	sbcs	r0, r5
 80011a0:	4488      	add	r8, r1
 80011a2:	4307      	orrs	r7, r0
 80011a4:	18bf      	adds	r7, r7, r2
 80011a6:	4297      	cmp	r7, r2
 80011a8:	4192      	sbcs	r2, r2
 80011aa:	4251      	negs	r1, r2
 80011ac:	4441      	add	r1, r8
 80011ae:	0035      	movs	r5, r6
 80011b0:	e63a      	b.n	8000e28 <__aeabi_dadd+0x164>
 80011b2:	4664      	mov	r4, ip
 80011b4:	0035      	movs	r5, r6
 80011b6:	4641      	mov	r1, r8
 80011b8:	0010      	movs	r0, r2
 80011ba:	e685      	b.n	8000ec8 <__aeabi_dadd+0x204>
 80011bc:	000b      	movs	r3, r1
 80011be:	4303      	orrs	r3, r0
 80011c0:	2d00      	cmp	r5, #0
 80011c2:	d000      	beq.n	80011c6 <__aeabi_dadd+0x502>
 80011c4:	e663      	b.n	8000e8e <__aeabi_dadd+0x1ca>
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f5      	beq.n	80011b6 <__aeabi_dadd+0x4f2>
 80011ca:	4643      	mov	r3, r8
 80011cc:	4313      	orrs	r3, r2
 80011ce:	d100      	bne.n	80011d2 <__aeabi_dadd+0x50e>
 80011d0:	e67a      	b.n	8000ec8 <__aeabi_dadd+0x204>
 80011d2:	1887      	adds	r7, r0, r2
 80011d4:	4287      	cmp	r7, r0
 80011d6:	4180      	sbcs	r0, r0
 80011d8:	2207      	movs	r2, #7
 80011da:	4441      	add	r1, r8
 80011dc:	4240      	negs	r0, r0
 80011de:	1809      	adds	r1, r1, r0
 80011e0:	403a      	ands	r2, r7
 80011e2:	020b      	lsls	r3, r1, #8
 80011e4:	d400      	bmi.n	80011e8 <__aeabi_dadd+0x524>
 80011e6:	e6d5      	b.n	8000f94 <__aeabi_dadd+0x2d0>
 80011e8:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <__aeabi_dadd+0x634>)
 80011ea:	3501      	adds	r5, #1
 80011ec:	4019      	ands	r1, r3
 80011ee:	e5c9      	b.n	8000d84 <__aeabi_dadd+0xc0>
 80011f0:	0038      	movs	r0, r7
 80011f2:	e669      	b.n	8000ec8 <__aeabi_dadd+0x204>
 80011f4:	001e      	movs	r6, r3
 80011f6:	4647      	mov	r7, r8
 80011f8:	3e20      	subs	r6, #32
 80011fa:	40f7      	lsrs	r7, r6
 80011fc:	46bc      	mov	ip, r7
 80011fe:	2b20      	cmp	r3, #32
 8001200:	d004      	beq.n	800120c <__aeabi_dadd+0x548>
 8001202:	2640      	movs	r6, #64	; 0x40
 8001204:	1af3      	subs	r3, r6, r3
 8001206:	4646      	mov	r6, r8
 8001208:	409e      	lsls	r6, r3
 800120a:	4332      	orrs	r2, r6
 800120c:	0017      	movs	r7, r2
 800120e:	4663      	mov	r3, ip
 8001210:	1e7a      	subs	r2, r7, #1
 8001212:	4197      	sbcs	r7, r2
 8001214:	431f      	orrs	r7, r3
 8001216:	e602      	b.n	8000e1e <__aeabi_dadd+0x15a>
 8001218:	4d36      	ldr	r5, [pc, #216]	; (80012f4 <__aeabi_dadd+0x630>)
 800121a:	42ae      	cmp	r6, r5
 800121c:	d0ca      	beq.n	80011b4 <__aeabi_dadd+0x4f0>
 800121e:	2580      	movs	r5, #128	; 0x80
 8001220:	042d      	lsls	r5, r5, #16
 8001222:	425b      	negs	r3, r3
 8001224:	4329      	orrs	r1, r5
 8001226:	e7a6      	b.n	8001176 <__aeabi_dadd+0x4b2>
 8001228:	4308      	orrs	r0, r1
 800122a:	1e41      	subs	r1, r0, #1
 800122c:	4188      	sbcs	r0, r1
 800122e:	e6a6      	b.n	8000f7e <__aeabi_dadd+0x2ba>
 8001230:	2b00      	cmp	r3, #0
 8001232:	d100      	bne.n	8001236 <__aeabi_dadd+0x572>
 8001234:	e648      	b.n	8000ec8 <__aeabi_dadd+0x204>
 8001236:	1a87      	subs	r7, r0, r2
 8001238:	4643      	mov	r3, r8
 800123a:	42b8      	cmp	r0, r7
 800123c:	41b6      	sbcs	r6, r6
 800123e:	1acb      	subs	r3, r1, r3
 8001240:	4276      	negs	r6, r6
 8001242:	1b9e      	subs	r6, r3, r6
 8001244:	0233      	lsls	r3, r6, #8
 8001246:	d54b      	bpl.n	80012e0 <__aeabi_dadd+0x61c>
 8001248:	1a17      	subs	r7, r2, r0
 800124a:	4643      	mov	r3, r8
 800124c:	42ba      	cmp	r2, r7
 800124e:	4192      	sbcs	r2, r2
 8001250:	1a59      	subs	r1, r3, r1
 8001252:	4252      	negs	r2, r2
 8001254:	1a89      	subs	r1, r1, r2
 8001256:	2207      	movs	r2, #7
 8001258:	4664      	mov	r4, ip
 800125a:	403a      	ands	r2, r7
 800125c:	e592      	b.n	8000d84 <__aeabi_dadd+0xc0>
 800125e:	4301      	orrs	r1, r0
 8001260:	000f      	movs	r7, r1
 8001262:	1e79      	subs	r1, r7, #1
 8001264:	418f      	sbcs	r7, r1
 8001266:	e79d      	b.n	80011a4 <__aeabi_dadd+0x4e0>
 8001268:	001c      	movs	r4, r3
 800126a:	000f      	movs	r7, r1
 800126c:	3c20      	subs	r4, #32
 800126e:	40e7      	lsrs	r7, r4
 8001270:	2b20      	cmp	r3, #32
 8001272:	d003      	beq.n	800127c <__aeabi_dadd+0x5b8>
 8001274:	2440      	movs	r4, #64	; 0x40
 8001276:	1ae3      	subs	r3, r4, r3
 8001278:	4099      	lsls	r1, r3
 800127a:	4308      	orrs	r0, r1
 800127c:	1e41      	subs	r1, r0, #1
 800127e:	4188      	sbcs	r0, r1
 8001280:	4338      	orrs	r0, r7
 8001282:	e67c      	b.n	8000f7e <__aeabi_dadd+0x2ba>
 8001284:	2200      	movs	r2, #0
 8001286:	2400      	movs	r4, #0
 8001288:	e625      	b.n	8000ed6 <__aeabi_dadd+0x212>
 800128a:	1a17      	subs	r7, r2, r0
 800128c:	4643      	mov	r3, r8
 800128e:	42ba      	cmp	r2, r7
 8001290:	4192      	sbcs	r2, r2
 8001292:	1a59      	subs	r1, r3, r1
 8001294:	4252      	negs	r2, r2
 8001296:	1a89      	subs	r1, r1, r2
 8001298:	4664      	mov	r4, ip
 800129a:	0035      	movs	r5, r6
 800129c:	e543      	b.n	8000d26 <__aeabi_dadd+0x62>
 800129e:	4641      	mov	r1, r8
 80012a0:	0010      	movs	r0, r2
 80012a2:	4d14      	ldr	r5, [pc, #80]	; (80012f4 <__aeabi_dadd+0x630>)
 80012a4:	e610      	b.n	8000ec8 <__aeabi_dadd+0x204>
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	2400      	movs	r4, #0
 80012aa:	0312      	lsls	r2, r2, #12
 80012ac:	e680      	b.n	8000fb0 <__aeabi_dadd+0x2ec>
 80012ae:	001d      	movs	r5, r3
 80012b0:	000f      	movs	r7, r1
 80012b2:	3d20      	subs	r5, #32
 80012b4:	40ef      	lsrs	r7, r5
 80012b6:	46bc      	mov	ip, r7
 80012b8:	2b20      	cmp	r3, #32
 80012ba:	d003      	beq.n	80012c4 <__aeabi_dadd+0x600>
 80012bc:	2540      	movs	r5, #64	; 0x40
 80012be:	1aeb      	subs	r3, r5, r3
 80012c0:	4099      	lsls	r1, r3
 80012c2:	4308      	orrs	r0, r1
 80012c4:	0007      	movs	r7, r0
 80012c6:	4663      	mov	r3, ip
 80012c8:	1e78      	subs	r0, r7, #1
 80012ca:	4187      	sbcs	r7, r0
 80012cc:	431f      	orrs	r7, r3
 80012ce:	e769      	b.n	80011a4 <__aeabi_dadd+0x4e0>
 80012d0:	1887      	adds	r7, r0, r2
 80012d2:	4297      	cmp	r7, r2
 80012d4:	419b      	sbcs	r3, r3
 80012d6:	4441      	add	r1, r8
 80012d8:	425b      	negs	r3, r3
 80012da:	18c9      	adds	r1, r1, r3
 80012dc:	0035      	movs	r5, r6
 80012de:	e5a3      	b.n	8000e28 <__aeabi_dadd+0x164>
 80012e0:	003b      	movs	r3, r7
 80012e2:	4333      	orrs	r3, r6
 80012e4:	d0ce      	beq.n	8001284 <__aeabi_dadd+0x5c0>
 80012e6:	2207      	movs	r2, #7
 80012e8:	0031      	movs	r1, r6
 80012ea:	403a      	ands	r2, r7
 80012ec:	e652      	b.n	8000f94 <__aeabi_dadd+0x2d0>
 80012ee:	2300      	movs	r3, #0
 80012f0:	001a      	movs	r2, r3
 80012f2:	e5f4      	b.n	8000ede <__aeabi_dadd+0x21a>
 80012f4:	000007ff 	.word	0x000007ff
 80012f8:	ff7fffff 	.word	0xff7fffff

080012fc <__aeabi_dmul>:
 80012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fe:	4657      	mov	r7, sl
 8001300:	46de      	mov	lr, fp
 8001302:	464e      	mov	r6, r9
 8001304:	4645      	mov	r5, r8
 8001306:	b5e0      	push	{r5, r6, r7, lr}
 8001308:	4683      	mov	fp, r0
 800130a:	0006      	movs	r6, r0
 800130c:	030f      	lsls	r7, r1, #12
 800130e:	0048      	lsls	r0, r1, #1
 8001310:	b087      	sub	sp, #28
 8001312:	4692      	mov	sl, r2
 8001314:	001d      	movs	r5, r3
 8001316:	0b3f      	lsrs	r7, r7, #12
 8001318:	0d40      	lsrs	r0, r0, #21
 800131a:	0fcc      	lsrs	r4, r1, #31
 800131c:	2800      	cmp	r0, #0
 800131e:	d100      	bne.n	8001322 <__aeabi_dmul+0x26>
 8001320:	e06f      	b.n	8001402 <__aeabi_dmul+0x106>
 8001322:	4bde      	ldr	r3, [pc, #888]	; (800169c <__aeabi_dmul+0x3a0>)
 8001324:	4298      	cmp	r0, r3
 8001326:	d038      	beq.n	800139a <__aeabi_dmul+0x9e>
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	00ff      	lsls	r7, r7, #3
 800132c:	041b      	lsls	r3, r3, #16
 800132e:	431f      	orrs	r7, r3
 8001330:	0f73      	lsrs	r3, r6, #29
 8001332:	433b      	orrs	r3, r7
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	4bda      	ldr	r3, [pc, #872]	; (80016a0 <__aeabi_dmul+0x3a4>)
 8001338:	2700      	movs	r7, #0
 800133a:	4699      	mov	r9, r3
 800133c:	2300      	movs	r3, #0
 800133e:	469b      	mov	fp, r3
 8001340:	00f6      	lsls	r6, r6, #3
 8001342:	4481      	add	r9, r0
 8001344:	032b      	lsls	r3, r5, #12
 8001346:	0069      	lsls	r1, r5, #1
 8001348:	0b1b      	lsrs	r3, r3, #12
 800134a:	4652      	mov	r2, sl
 800134c:	4698      	mov	r8, r3
 800134e:	0d49      	lsrs	r1, r1, #21
 8001350:	0fed      	lsrs	r5, r5, #31
 8001352:	2900      	cmp	r1, #0
 8001354:	d100      	bne.n	8001358 <__aeabi_dmul+0x5c>
 8001356:	e085      	b.n	8001464 <__aeabi_dmul+0x168>
 8001358:	4bd0      	ldr	r3, [pc, #832]	; (800169c <__aeabi_dmul+0x3a0>)
 800135a:	4299      	cmp	r1, r3
 800135c:	d100      	bne.n	8001360 <__aeabi_dmul+0x64>
 800135e:	e073      	b.n	8001448 <__aeabi_dmul+0x14c>
 8001360:	4643      	mov	r3, r8
 8001362:	00da      	lsls	r2, r3, #3
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	041b      	lsls	r3, r3, #16
 8001368:	4313      	orrs	r3, r2
 800136a:	4652      	mov	r2, sl
 800136c:	48cc      	ldr	r0, [pc, #816]	; (80016a0 <__aeabi_dmul+0x3a4>)
 800136e:	0f52      	lsrs	r2, r2, #29
 8001370:	4684      	mov	ip, r0
 8001372:	4313      	orrs	r3, r2
 8001374:	4652      	mov	r2, sl
 8001376:	2000      	movs	r0, #0
 8001378:	4461      	add	r1, ip
 800137a:	00d2      	lsls	r2, r2, #3
 800137c:	4489      	add	r9, r1
 800137e:	0021      	movs	r1, r4
 8001380:	4069      	eors	r1, r5
 8001382:	9100      	str	r1, [sp, #0]
 8001384:	468c      	mov	ip, r1
 8001386:	2101      	movs	r1, #1
 8001388:	4449      	add	r1, r9
 800138a:	468a      	mov	sl, r1
 800138c:	2f0f      	cmp	r7, #15
 800138e:	d900      	bls.n	8001392 <__aeabi_dmul+0x96>
 8001390:	e090      	b.n	80014b4 <__aeabi_dmul+0x1b8>
 8001392:	49c4      	ldr	r1, [pc, #784]	; (80016a4 <__aeabi_dmul+0x3a8>)
 8001394:	00bf      	lsls	r7, r7, #2
 8001396:	59cf      	ldr	r7, [r1, r7]
 8001398:	46bf      	mov	pc, r7
 800139a:	465b      	mov	r3, fp
 800139c:	433b      	orrs	r3, r7
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	d000      	beq.n	80013a4 <__aeabi_dmul+0xa8>
 80013a2:	e16a      	b.n	800167a <__aeabi_dmul+0x37e>
 80013a4:	2302      	movs	r3, #2
 80013a6:	2708      	movs	r7, #8
 80013a8:	2600      	movs	r6, #0
 80013aa:	4681      	mov	r9, r0
 80013ac:	469b      	mov	fp, r3
 80013ae:	e7c9      	b.n	8001344 <__aeabi_dmul+0x48>
 80013b0:	0032      	movs	r2, r6
 80013b2:	4658      	mov	r0, fp
 80013b4:	9b01      	ldr	r3, [sp, #4]
 80013b6:	4661      	mov	r1, ip
 80013b8:	9100      	str	r1, [sp, #0]
 80013ba:	2802      	cmp	r0, #2
 80013bc:	d100      	bne.n	80013c0 <__aeabi_dmul+0xc4>
 80013be:	e075      	b.n	80014ac <__aeabi_dmul+0x1b0>
 80013c0:	2803      	cmp	r0, #3
 80013c2:	d100      	bne.n	80013c6 <__aeabi_dmul+0xca>
 80013c4:	e1fe      	b.n	80017c4 <__aeabi_dmul+0x4c8>
 80013c6:	2801      	cmp	r0, #1
 80013c8:	d000      	beq.n	80013cc <__aeabi_dmul+0xd0>
 80013ca:	e12c      	b.n	8001626 <__aeabi_dmul+0x32a>
 80013cc:	2300      	movs	r3, #0
 80013ce:	2700      	movs	r7, #0
 80013d0:	2600      	movs	r6, #0
 80013d2:	2500      	movs	r5, #0
 80013d4:	033f      	lsls	r7, r7, #12
 80013d6:	0d2a      	lsrs	r2, r5, #20
 80013d8:	0b3f      	lsrs	r7, r7, #12
 80013da:	48b3      	ldr	r0, [pc, #716]	; (80016a8 <__aeabi_dmul+0x3ac>)
 80013dc:	0512      	lsls	r2, r2, #20
 80013de:	433a      	orrs	r2, r7
 80013e0:	4002      	ands	r2, r0
 80013e2:	051b      	lsls	r3, r3, #20
 80013e4:	4313      	orrs	r3, r2
 80013e6:	9a00      	ldr	r2, [sp, #0]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	07d1      	lsls	r1, r2, #31
 80013ec:	085b      	lsrs	r3, r3, #1
 80013ee:	430b      	orrs	r3, r1
 80013f0:	0030      	movs	r0, r6
 80013f2:	0019      	movs	r1, r3
 80013f4:	b007      	add	sp, #28
 80013f6:	bc3c      	pop	{r2, r3, r4, r5}
 80013f8:	4690      	mov	r8, r2
 80013fa:	4699      	mov	r9, r3
 80013fc:	46a2      	mov	sl, r4
 80013fe:	46ab      	mov	fp, r5
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001402:	465b      	mov	r3, fp
 8001404:	433b      	orrs	r3, r7
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	d100      	bne.n	800140c <__aeabi_dmul+0x110>
 800140a:	e12f      	b.n	800166c <__aeabi_dmul+0x370>
 800140c:	2f00      	cmp	r7, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_dmul+0x116>
 8001410:	e1a5      	b.n	800175e <__aeabi_dmul+0x462>
 8001412:	0038      	movs	r0, r7
 8001414:	f000 fe38 	bl	8002088 <__clzsi2>
 8001418:	0003      	movs	r3, r0
 800141a:	3b0b      	subs	r3, #11
 800141c:	2b1c      	cmp	r3, #28
 800141e:	dd00      	ble.n	8001422 <__aeabi_dmul+0x126>
 8001420:	e196      	b.n	8001750 <__aeabi_dmul+0x454>
 8001422:	221d      	movs	r2, #29
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	465a      	mov	r2, fp
 8001428:	0001      	movs	r1, r0
 800142a:	40da      	lsrs	r2, r3
 800142c:	465e      	mov	r6, fp
 800142e:	3908      	subs	r1, #8
 8001430:	408f      	lsls	r7, r1
 8001432:	0013      	movs	r3, r2
 8001434:	408e      	lsls	r6, r1
 8001436:	433b      	orrs	r3, r7
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	4b9c      	ldr	r3, [pc, #624]	; (80016ac <__aeabi_dmul+0x3b0>)
 800143c:	2700      	movs	r7, #0
 800143e:	1a1b      	subs	r3, r3, r0
 8001440:	4699      	mov	r9, r3
 8001442:	2300      	movs	r3, #0
 8001444:	469b      	mov	fp, r3
 8001446:	e77d      	b.n	8001344 <__aeabi_dmul+0x48>
 8001448:	4641      	mov	r1, r8
 800144a:	4653      	mov	r3, sl
 800144c:	430b      	orrs	r3, r1
 800144e:	4993      	ldr	r1, [pc, #588]	; (800169c <__aeabi_dmul+0x3a0>)
 8001450:	468c      	mov	ip, r1
 8001452:	44e1      	add	r9, ip
 8001454:	2b00      	cmp	r3, #0
 8001456:	d000      	beq.n	800145a <__aeabi_dmul+0x15e>
 8001458:	e11a      	b.n	8001690 <__aeabi_dmul+0x394>
 800145a:	2202      	movs	r2, #2
 800145c:	2002      	movs	r0, #2
 800145e:	4317      	orrs	r7, r2
 8001460:	2200      	movs	r2, #0
 8001462:	e78c      	b.n	800137e <__aeabi_dmul+0x82>
 8001464:	4313      	orrs	r3, r2
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x16e>
 8001468:	e10d      	b.n	8001686 <__aeabi_dmul+0x38a>
 800146a:	4643      	mov	r3, r8
 800146c:	2b00      	cmp	r3, #0
 800146e:	d100      	bne.n	8001472 <__aeabi_dmul+0x176>
 8001470:	e181      	b.n	8001776 <__aeabi_dmul+0x47a>
 8001472:	4640      	mov	r0, r8
 8001474:	f000 fe08 	bl	8002088 <__clzsi2>
 8001478:	0002      	movs	r2, r0
 800147a:	3a0b      	subs	r2, #11
 800147c:	2a1c      	cmp	r2, #28
 800147e:	dd00      	ble.n	8001482 <__aeabi_dmul+0x186>
 8001480:	e172      	b.n	8001768 <__aeabi_dmul+0x46c>
 8001482:	0001      	movs	r1, r0
 8001484:	4643      	mov	r3, r8
 8001486:	3908      	subs	r1, #8
 8001488:	408b      	lsls	r3, r1
 800148a:	4698      	mov	r8, r3
 800148c:	231d      	movs	r3, #29
 800148e:	1a9a      	subs	r2, r3, r2
 8001490:	4653      	mov	r3, sl
 8001492:	40d3      	lsrs	r3, r2
 8001494:	001a      	movs	r2, r3
 8001496:	4643      	mov	r3, r8
 8001498:	4313      	orrs	r3, r2
 800149a:	4652      	mov	r2, sl
 800149c:	408a      	lsls	r2, r1
 800149e:	4649      	mov	r1, r9
 80014a0:	1a08      	subs	r0, r1, r0
 80014a2:	4982      	ldr	r1, [pc, #520]	; (80016ac <__aeabi_dmul+0x3b0>)
 80014a4:	4689      	mov	r9, r1
 80014a6:	4481      	add	r9, r0
 80014a8:	2000      	movs	r0, #0
 80014aa:	e768      	b.n	800137e <__aeabi_dmul+0x82>
 80014ac:	4b7b      	ldr	r3, [pc, #492]	; (800169c <__aeabi_dmul+0x3a0>)
 80014ae:	2700      	movs	r7, #0
 80014b0:	2600      	movs	r6, #0
 80014b2:	e78e      	b.n	80013d2 <__aeabi_dmul+0xd6>
 80014b4:	0c14      	lsrs	r4, r2, #16
 80014b6:	0412      	lsls	r2, r2, #16
 80014b8:	0c12      	lsrs	r2, r2, #16
 80014ba:	0011      	movs	r1, r2
 80014bc:	0c37      	lsrs	r7, r6, #16
 80014be:	0436      	lsls	r6, r6, #16
 80014c0:	0c35      	lsrs	r5, r6, #16
 80014c2:	4379      	muls	r1, r7
 80014c4:	0028      	movs	r0, r5
 80014c6:	468c      	mov	ip, r1
 80014c8:	002e      	movs	r6, r5
 80014ca:	4360      	muls	r0, r4
 80014cc:	4460      	add	r0, ip
 80014ce:	4683      	mov	fp, r0
 80014d0:	4356      	muls	r6, r2
 80014d2:	0021      	movs	r1, r4
 80014d4:	0c30      	lsrs	r0, r6, #16
 80014d6:	4680      	mov	r8, r0
 80014d8:	4658      	mov	r0, fp
 80014da:	4379      	muls	r1, r7
 80014dc:	4440      	add	r0, r8
 80014de:	9102      	str	r1, [sp, #8]
 80014e0:	4584      	cmp	ip, r0
 80014e2:	d906      	bls.n	80014f2 <__aeabi_dmul+0x1f6>
 80014e4:	4688      	mov	r8, r1
 80014e6:	2180      	movs	r1, #128	; 0x80
 80014e8:	0249      	lsls	r1, r1, #9
 80014ea:	468c      	mov	ip, r1
 80014ec:	44e0      	add	r8, ip
 80014ee:	4641      	mov	r1, r8
 80014f0:	9102      	str	r1, [sp, #8]
 80014f2:	0436      	lsls	r6, r6, #16
 80014f4:	0c01      	lsrs	r1, r0, #16
 80014f6:	0c36      	lsrs	r6, r6, #16
 80014f8:	0400      	lsls	r0, r0, #16
 80014fa:	468b      	mov	fp, r1
 80014fc:	1981      	adds	r1, r0, r6
 80014fe:	0c1e      	lsrs	r6, r3, #16
 8001500:	041b      	lsls	r3, r3, #16
 8001502:	0c1b      	lsrs	r3, r3, #16
 8001504:	9103      	str	r1, [sp, #12]
 8001506:	0019      	movs	r1, r3
 8001508:	4379      	muls	r1, r7
 800150a:	468c      	mov	ip, r1
 800150c:	0028      	movs	r0, r5
 800150e:	4375      	muls	r5, r6
 8001510:	4465      	add	r5, ip
 8001512:	46a8      	mov	r8, r5
 8001514:	4358      	muls	r0, r3
 8001516:	0c05      	lsrs	r5, r0, #16
 8001518:	4445      	add	r5, r8
 800151a:	4377      	muls	r7, r6
 800151c:	42a9      	cmp	r1, r5
 800151e:	d903      	bls.n	8001528 <__aeabi_dmul+0x22c>
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	0249      	lsls	r1, r1, #9
 8001524:	468c      	mov	ip, r1
 8001526:	4467      	add	r7, ip
 8001528:	0c29      	lsrs	r1, r5, #16
 800152a:	468c      	mov	ip, r1
 800152c:	0039      	movs	r1, r7
 800152e:	0400      	lsls	r0, r0, #16
 8001530:	0c00      	lsrs	r0, r0, #16
 8001532:	042d      	lsls	r5, r5, #16
 8001534:	182d      	adds	r5, r5, r0
 8001536:	4461      	add	r1, ip
 8001538:	44ab      	add	fp, r5
 800153a:	9105      	str	r1, [sp, #20]
 800153c:	4659      	mov	r1, fp
 800153e:	9104      	str	r1, [sp, #16]
 8001540:	9901      	ldr	r1, [sp, #4]
 8001542:	040f      	lsls	r7, r1, #16
 8001544:	0c3f      	lsrs	r7, r7, #16
 8001546:	0c08      	lsrs	r0, r1, #16
 8001548:	0039      	movs	r1, r7
 800154a:	4351      	muls	r1, r2
 800154c:	4342      	muls	r2, r0
 800154e:	4690      	mov	r8, r2
 8001550:	0002      	movs	r2, r0
 8001552:	468c      	mov	ip, r1
 8001554:	0c09      	lsrs	r1, r1, #16
 8001556:	468b      	mov	fp, r1
 8001558:	4362      	muls	r2, r4
 800155a:	437c      	muls	r4, r7
 800155c:	4444      	add	r4, r8
 800155e:	445c      	add	r4, fp
 8001560:	45a0      	cmp	r8, r4
 8001562:	d903      	bls.n	800156c <__aeabi_dmul+0x270>
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	0249      	lsls	r1, r1, #9
 8001568:	4688      	mov	r8, r1
 800156a:	4442      	add	r2, r8
 800156c:	0c21      	lsrs	r1, r4, #16
 800156e:	4688      	mov	r8, r1
 8001570:	4661      	mov	r1, ip
 8001572:	0409      	lsls	r1, r1, #16
 8001574:	0c09      	lsrs	r1, r1, #16
 8001576:	468c      	mov	ip, r1
 8001578:	0039      	movs	r1, r7
 800157a:	4359      	muls	r1, r3
 800157c:	4343      	muls	r3, r0
 800157e:	4370      	muls	r0, r6
 8001580:	437e      	muls	r6, r7
 8001582:	0c0f      	lsrs	r7, r1, #16
 8001584:	18f6      	adds	r6, r6, r3
 8001586:	0424      	lsls	r4, r4, #16
 8001588:	19be      	adds	r6, r7, r6
 800158a:	4464      	add	r4, ip
 800158c:	4442      	add	r2, r8
 800158e:	468c      	mov	ip, r1
 8001590:	42b3      	cmp	r3, r6
 8001592:	d903      	bls.n	800159c <__aeabi_dmul+0x2a0>
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	025b      	lsls	r3, r3, #9
 8001598:	4698      	mov	r8, r3
 800159a:	4440      	add	r0, r8
 800159c:	9b02      	ldr	r3, [sp, #8]
 800159e:	4661      	mov	r1, ip
 80015a0:	4698      	mov	r8, r3
 80015a2:	9b04      	ldr	r3, [sp, #16]
 80015a4:	0437      	lsls	r7, r6, #16
 80015a6:	4443      	add	r3, r8
 80015a8:	469b      	mov	fp, r3
 80015aa:	45ab      	cmp	fp, r5
 80015ac:	41ad      	sbcs	r5, r5
 80015ae:	426b      	negs	r3, r5
 80015b0:	040d      	lsls	r5, r1, #16
 80015b2:	9905      	ldr	r1, [sp, #20]
 80015b4:	0c2d      	lsrs	r5, r5, #16
 80015b6:	468c      	mov	ip, r1
 80015b8:	197f      	adds	r7, r7, r5
 80015ba:	4467      	add	r7, ip
 80015bc:	18fd      	adds	r5, r7, r3
 80015be:	46a8      	mov	r8, r5
 80015c0:	465d      	mov	r5, fp
 80015c2:	192d      	adds	r5, r5, r4
 80015c4:	42a5      	cmp	r5, r4
 80015c6:	41a4      	sbcs	r4, r4
 80015c8:	4693      	mov	fp, r2
 80015ca:	4264      	negs	r4, r4
 80015cc:	46a4      	mov	ip, r4
 80015ce:	44c3      	add	fp, r8
 80015d0:	44dc      	add	ip, fp
 80015d2:	428f      	cmp	r7, r1
 80015d4:	41bf      	sbcs	r7, r7
 80015d6:	4598      	cmp	r8, r3
 80015d8:	419b      	sbcs	r3, r3
 80015da:	4593      	cmp	fp, r2
 80015dc:	4192      	sbcs	r2, r2
 80015de:	45a4      	cmp	ip, r4
 80015e0:	41a4      	sbcs	r4, r4
 80015e2:	425b      	negs	r3, r3
 80015e4:	427f      	negs	r7, r7
 80015e6:	431f      	orrs	r7, r3
 80015e8:	0c36      	lsrs	r6, r6, #16
 80015ea:	4252      	negs	r2, r2
 80015ec:	4264      	negs	r4, r4
 80015ee:	19bf      	adds	r7, r7, r6
 80015f0:	4322      	orrs	r2, r4
 80015f2:	18bf      	adds	r7, r7, r2
 80015f4:	4662      	mov	r2, ip
 80015f6:	1838      	adds	r0, r7, r0
 80015f8:	0243      	lsls	r3, r0, #9
 80015fa:	0dd2      	lsrs	r2, r2, #23
 80015fc:	9903      	ldr	r1, [sp, #12]
 80015fe:	4313      	orrs	r3, r2
 8001600:	026a      	lsls	r2, r5, #9
 8001602:	430a      	orrs	r2, r1
 8001604:	1e50      	subs	r0, r2, #1
 8001606:	4182      	sbcs	r2, r0
 8001608:	4661      	mov	r1, ip
 800160a:	0ded      	lsrs	r5, r5, #23
 800160c:	432a      	orrs	r2, r5
 800160e:	024e      	lsls	r6, r1, #9
 8001610:	4332      	orrs	r2, r6
 8001612:	01d9      	lsls	r1, r3, #7
 8001614:	d400      	bmi.n	8001618 <__aeabi_dmul+0x31c>
 8001616:	e0b3      	b.n	8001780 <__aeabi_dmul+0x484>
 8001618:	2601      	movs	r6, #1
 800161a:	0850      	lsrs	r0, r2, #1
 800161c:	4032      	ands	r2, r6
 800161e:	4302      	orrs	r2, r0
 8001620:	07de      	lsls	r6, r3, #31
 8001622:	4332      	orrs	r2, r6
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	4c22      	ldr	r4, [pc, #136]	; (80016b0 <__aeabi_dmul+0x3b4>)
 8001628:	4454      	add	r4, sl
 800162a:	2c00      	cmp	r4, #0
 800162c:	dd62      	ble.n	80016f4 <__aeabi_dmul+0x3f8>
 800162e:	0751      	lsls	r1, r2, #29
 8001630:	d009      	beq.n	8001646 <__aeabi_dmul+0x34a>
 8001632:	200f      	movs	r0, #15
 8001634:	4010      	ands	r0, r2
 8001636:	2804      	cmp	r0, #4
 8001638:	d005      	beq.n	8001646 <__aeabi_dmul+0x34a>
 800163a:	1d10      	adds	r0, r2, #4
 800163c:	4290      	cmp	r0, r2
 800163e:	4192      	sbcs	r2, r2
 8001640:	4252      	negs	r2, r2
 8001642:	189b      	adds	r3, r3, r2
 8001644:	0002      	movs	r2, r0
 8001646:	01d9      	lsls	r1, r3, #7
 8001648:	d504      	bpl.n	8001654 <__aeabi_dmul+0x358>
 800164a:	2480      	movs	r4, #128	; 0x80
 800164c:	4819      	ldr	r0, [pc, #100]	; (80016b4 <__aeabi_dmul+0x3b8>)
 800164e:	00e4      	lsls	r4, r4, #3
 8001650:	4003      	ands	r3, r0
 8001652:	4454      	add	r4, sl
 8001654:	4818      	ldr	r0, [pc, #96]	; (80016b8 <__aeabi_dmul+0x3bc>)
 8001656:	4284      	cmp	r4, r0
 8001658:	dd00      	ble.n	800165c <__aeabi_dmul+0x360>
 800165a:	e727      	b.n	80014ac <__aeabi_dmul+0x1b0>
 800165c:	075e      	lsls	r6, r3, #29
 800165e:	025b      	lsls	r3, r3, #9
 8001660:	08d2      	lsrs	r2, r2, #3
 8001662:	0b1f      	lsrs	r7, r3, #12
 8001664:	0563      	lsls	r3, r4, #21
 8001666:	4316      	orrs	r6, r2
 8001668:	0d5b      	lsrs	r3, r3, #21
 800166a:	e6b2      	b.n	80013d2 <__aeabi_dmul+0xd6>
 800166c:	2300      	movs	r3, #0
 800166e:	4699      	mov	r9, r3
 8001670:	3301      	adds	r3, #1
 8001672:	2704      	movs	r7, #4
 8001674:	2600      	movs	r6, #0
 8001676:	469b      	mov	fp, r3
 8001678:	e664      	b.n	8001344 <__aeabi_dmul+0x48>
 800167a:	2303      	movs	r3, #3
 800167c:	9701      	str	r7, [sp, #4]
 800167e:	4681      	mov	r9, r0
 8001680:	270c      	movs	r7, #12
 8001682:	469b      	mov	fp, r3
 8001684:	e65e      	b.n	8001344 <__aeabi_dmul+0x48>
 8001686:	2201      	movs	r2, #1
 8001688:	2001      	movs	r0, #1
 800168a:	4317      	orrs	r7, r2
 800168c:	2200      	movs	r2, #0
 800168e:	e676      	b.n	800137e <__aeabi_dmul+0x82>
 8001690:	2303      	movs	r3, #3
 8001692:	2003      	movs	r0, #3
 8001694:	431f      	orrs	r7, r3
 8001696:	4643      	mov	r3, r8
 8001698:	e671      	b.n	800137e <__aeabi_dmul+0x82>
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	000007ff 	.word	0x000007ff
 80016a0:	fffffc01 	.word	0xfffffc01
 80016a4:	08004e8c 	.word	0x08004e8c
 80016a8:	800fffff 	.word	0x800fffff
 80016ac:	fffffc0d 	.word	0xfffffc0d
 80016b0:	000003ff 	.word	0x000003ff
 80016b4:	feffffff 	.word	0xfeffffff
 80016b8:	000007fe 	.word	0x000007fe
 80016bc:	2300      	movs	r3, #0
 80016be:	2780      	movs	r7, #128	; 0x80
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	033f      	lsls	r7, r7, #12
 80016c4:	2600      	movs	r6, #0
 80016c6:	4b43      	ldr	r3, [pc, #268]	; (80017d4 <__aeabi_dmul+0x4d8>)
 80016c8:	e683      	b.n	80013d2 <__aeabi_dmul+0xd6>
 80016ca:	9b01      	ldr	r3, [sp, #4]
 80016cc:	0032      	movs	r2, r6
 80016ce:	46a4      	mov	ip, r4
 80016d0:	4658      	mov	r0, fp
 80016d2:	e670      	b.n	80013b6 <__aeabi_dmul+0xba>
 80016d4:	46ac      	mov	ip, r5
 80016d6:	e66e      	b.n	80013b6 <__aeabi_dmul+0xba>
 80016d8:	2780      	movs	r7, #128	; 0x80
 80016da:	9901      	ldr	r1, [sp, #4]
 80016dc:	033f      	lsls	r7, r7, #12
 80016de:	4239      	tst	r1, r7
 80016e0:	d02d      	beq.n	800173e <__aeabi_dmul+0x442>
 80016e2:	423b      	tst	r3, r7
 80016e4:	d12b      	bne.n	800173e <__aeabi_dmul+0x442>
 80016e6:	431f      	orrs	r7, r3
 80016e8:	033f      	lsls	r7, r7, #12
 80016ea:	0b3f      	lsrs	r7, r7, #12
 80016ec:	9500      	str	r5, [sp, #0]
 80016ee:	0016      	movs	r6, r2
 80016f0:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <__aeabi_dmul+0x4d8>)
 80016f2:	e66e      	b.n	80013d2 <__aeabi_dmul+0xd6>
 80016f4:	2501      	movs	r5, #1
 80016f6:	1b2d      	subs	r5, r5, r4
 80016f8:	2d38      	cmp	r5, #56	; 0x38
 80016fa:	dd00      	ble.n	80016fe <__aeabi_dmul+0x402>
 80016fc:	e666      	b.n	80013cc <__aeabi_dmul+0xd0>
 80016fe:	2d1f      	cmp	r5, #31
 8001700:	dc40      	bgt.n	8001784 <__aeabi_dmul+0x488>
 8001702:	4835      	ldr	r0, [pc, #212]	; (80017d8 <__aeabi_dmul+0x4dc>)
 8001704:	001c      	movs	r4, r3
 8001706:	4450      	add	r0, sl
 8001708:	0016      	movs	r6, r2
 800170a:	4082      	lsls	r2, r0
 800170c:	4084      	lsls	r4, r0
 800170e:	40ee      	lsrs	r6, r5
 8001710:	1e50      	subs	r0, r2, #1
 8001712:	4182      	sbcs	r2, r0
 8001714:	4334      	orrs	r4, r6
 8001716:	4314      	orrs	r4, r2
 8001718:	40eb      	lsrs	r3, r5
 800171a:	0762      	lsls	r2, r4, #29
 800171c:	d009      	beq.n	8001732 <__aeabi_dmul+0x436>
 800171e:	220f      	movs	r2, #15
 8001720:	4022      	ands	r2, r4
 8001722:	2a04      	cmp	r2, #4
 8001724:	d005      	beq.n	8001732 <__aeabi_dmul+0x436>
 8001726:	0022      	movs	r2, r4
 8001728:	1d14      	adds	r4, r2, #4
 800172a:	4294      	cmp	r4, r2
 800172c:	4180      	sbcs	r0, r0
 800172e:	4240      	negs	r0, r0
 8001730:	181b      	adds	r3, r3, r0
 8001732:	021a      	lsls	r2, r3, #8
 8001734:	d53e      	bpl.n	80017b4 <__aeabi_dmul+0x4b8>
 8001736:	2301      	movs	r3, #1
 8001738:	2700      	movs	r7, #0
 800173a:	2600      	movs	r6, #0
 800173c:	e649      	b.n	80013d2 <__aeabi_dmul+0xd6>
 800173e:	2780      	movs	r7, #128	; 0x80
 8001740:	9b01      	ldr	r3, [sp, #4]
 8001742:	033f      	lsls	r7, r7, #12
 8001744:	431f      	orrs	r7, r3
 8001746:	033f      	lsls	r7, r7, #12
 8001748:	0b3f      	lsrs	r7, r7, #12
 800174a:	9400      	str	r4, [sp, #0]
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <__aeabi_dmul+0x4d8>)
 800174e:	e640      	b.n	80013d2 <__aeabi_dmul+0xd6>
 8001750:	0003      	movs	r3, r0
 8001752:	465a      	mov	r2, fp
 8001754:	3b28      	subs	r3, #40	; 0x28
 8001756:	409a      	lsls	r2, r3
 8001758:	2600      	movs	r6, #0
 800175a:	9201      	str	r2, [sp, #4]
 800175c:	e66d      	b.n	800143a <__aeabi_dmul+0x13e>
 800175e:	4658      	mov	r0, fp
 8001760:	f000 fc92 	bl	8002088 <__clzsi2>
 8001764:	3020      	adds	r0, #32
 8001766:	e657      	b.n	8001418 <__aeabi_dmul+0x11c>
 8001768:	0003      	movs	r3, r0
 800176a:	4652      	mov	r2, sl
 800176c:	3b28      	subs	r3, #40	; 0x28
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	2200      	movs	r2, #0
 8001774:	e693      	b.n	800149e <__aeabi_dmul+0x1a2>
 8001776:	4650      	mov	r0, sl
 8001778:	f000 fc86 	bl	8002088 <__clzsi2>
 800177c:	3020      	adds	r0, #32
 800177e:	e67b      	b.n	8001478 <__aeabi_dmul+0x17c>
 8001780:	46ca      	mov	sl, r9
 8001782:	e750      	b.n	8001626 <__aeabi_dmul+0x32a>
 8001784:	201f      	movs	r0, #31
 8001786:	001e      	movs	r6, r3
 8001788:	4240      	negs	r0, r0
 800178a:	1b04      	subs	r4, r0, r4
 800178c:	40e6      	lsrs	r6, r4
 800178e:	2d20      	cmp	r5, #32
 8001790:	d003      	beq.n	800179a <__aeabi_dmul+0x49e>
 8001792:	4c12      	ldr	r4, [pc, #72]	; (80017dc <__aeabi_dmul+0x4e0>)
 8001794:	4454      	add	r4, sl
 8001796:	40a3      	lsls	r3, r4
 8001798:	431a      	orrs	r2, r3
 800179a:	1e50      	subs	r0, r2, #1
 800179c:	4182      	sbcs	r2, r0
 800179e:	4332      	orrs	r2, r6
 80017a0:	2607      	movs	r6, #7
 80017a2:	2700      	movs	r7, #0
 80017a4:	4016      	ands	r6, r2
 80017a6:	d009      	beq.n	80017bc <__aeabi_dmul+0x4c0>
 80017a8:	200f      	movs	r0, #15
 80017aa:	2300      	movs	r3, #0
 80017ac:	4010      	ands	r0, r2
 80017ae:	0014      	movs	r4, r2
 80017b0:	2804      	cmp	r0, #4
 80017b2:	d1b9      	bne.n	8001728 <__aeabi_dmul+0x42c>
 80017b4:	0022      	movs	r2, r4
 80017b6:	075e      	lsls	r6, r3, #29
 80017b8:	025b      	lsls	r3, r3, #9
 80017ba:	0b1f      	lsrs	r7, r3, #12
 80017bc:	08d2      	lsrs	r2, r2, #3
 80017be:	4316      	orrs	r6, r2
 80017c0:	2300      	movs	r3, #0
 80017c2:	e606      	b.n	80013d2 <__aeabi_dmul+0xd6>
 80017c4:	2780      	movs	r7, #128	; 0x80
 80017c6:	033f      	lsls	r7, r7, #12
 80017c8:	431f      	orrs	r7, r3
 80017ca:	033f      	lsls	r7, r7, #12
 80017cc:	0b3f      	lsrs	r7, r7, #12
 80017ce:	0016      	movs	r6, r2
 80017d0:	4b00      	ldr	r3, [pc, #0]	; (80017d4 <__aeabi_dmul+0x4d8>)
 80017d2:	e5fe      	b.n	80013d2 <__aeabi_dmul+0xd6>
 80017d4:	000007ff 	.word	0x000007ff
 80017d8:	0000041e 	.word	0x0000041e
 80017dc:	0000043e 	.word	0x0000043e

080017e0 <__aeabi_dsub>:
 80017e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e2:	4657      	mov	r7, sl
 80017e4:	464e      	mov	r6, r9
 80017e6:	4645      	mov	r5, r8
 80017e8:	46de      	mov	lr, fp
 80017ea:	000c      	movs	r4, r1
 80017ec:	0309      	lsls	r1, r1, #12
 80017ee:	b5e0      	push	{r5, r6, r7, lr}
 80017f0:	0a49      	lsrs	r1, r1, #9
 80017f2:	0f46      	lsrs	r6, r0, #29
 80017f4:	005f      	lsls	r7, r3, #1
 80017f6:	4331      	orrs	r1, r6
 80017f8:	031e      	lsls	r6, r3, #12
 80017fa:	0fdb      	lsrs	r3, r3, #31
 80017fc:	0a76      	lsrs	r6, r6, #9
 80017fe:	469b      	mov	fp, r3
 8001800:	0f53      	lsrs	r3, r2, #29
 8001802:	4333      	orrs	r3, r6
 8001804:	4ec8      	ldr	r6, [pc, #800]	; (8001b28 <__aeabi_dsub+0x348>)
 8001806:	0065      	lsls	r5, r4, #1
 8001808:	00c0      	lsls	r0, r0, #3
 800180a:	0fe4      	lsrs	r4, r4, #31
 800180c:	00d2      	lsls	r2, r2, #3
 800180e:	0d6d      	lsrs	r5, r5, #21
 8001810:	46a2      	mov	sl, r4
 8001812:	4681      	mov	r9, r0
 8001814:	0d7f      	lsrs	r7, r7, #21
 8001816:	469c      	mov	ip, r3
 8001818:	4690      	mov	r8, r2
 800181a:	42b7      	cmp	r7, r6
 800181c:	d100      	bne.n	8001820 <__aeabi_dsub+0x40>
 800181e:	e0b9      	b.n	8001994 <__aeabi_dsub+0x1b4>
 8001820:	465b      	mov	r3, fp
 8001822:	2601      	movs	r6, #1
 8001824:	4073      	eors	r3, r6
 8001826:	469b      	mov	fp, r3
 8001828:	1bee      	subs	r6, r5, r7
 800182a:	45a3      	cmp	fp, r4
 800182c:	d100      	bne.n	8001830 <__aeabi_dsub+0x50>
 800182e:	e083      	b.n	8001938 <__aeabi_dsub+0x158>
 8001830:	2e00      	cmp	r6, #0
 8001832:	dd63      	ble.n	80018fc <__aeabi_dsub+0x11c>
 8001834:	2f00      	cmp	r7, #0
 8001836:	d000      	beq.n	800183a <__aeabi_dsub+0x5a>
 8001838:	e0b1      	b.n	800199e <__aeabi_dsub+0x1be>
 800183a:	4663      	mov	r3, ip
 800183c:	4313      	orrs	r3, r2
 800183e:	d100      	bne.n	8001842 <__aeabi_dsub+0x62>
 8001840:	e123      	b.n	8001a8a <__aeabi_dsub+0x2aa>
 8001842:	1e73      	subs	r3, r6, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d000      	beq.n	800184a <__aeabi_dsub+0x6a>
 8001848:	e1ba      	b.n	8001bc0 <__aeabi_dsub+0x3e0>
 800184a:	1a86      	subs	r6, r0, r2
 800184c:	4663      	mov	r3, ip
 800184e:	42b0      	cmp	r0, r6
 8001850:	4180      	sbcs	r0, r0
 8001852:	2501      	movs	r5, #1
 8001854:	1ac9      	subs	r1, r1, r3
 8001856:	4240      	negs	r0, r0
 8001858:	1a09      	subs	r1, r1, r0
 800185a:	020b      	lsls	r3, r1, #8
 800185c:	d400      	bmi.n	8001860 <__aeabi_dsub+0x80>
 800185e:	e147      	b.n	8001af0 <__aeabi_dsub+0x310>
 8001860:	0249      	lsls	r1, r1, #9
 8001862:	0a4b      	lsrs	r3, r1, #9
 8001864:	4698      	mov	r8, r3
 8001866:	4643      	mov	r3, r8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d100      	bne.n	800186e <__aeabi_dsub+0x8e>
 800186c:	e189      	b.n	8001b82 <__aeabi_dsub+0x3a2>
 800186e:	4640      	mov	r0, r8
 8001870:	f000 fc0a 	bl	8002088 <__clzsi2>
 8001874:	0003      	movs	r3, r0
 8001876:	3b08      	subs	r3, #8
 8001878:	2b1f      	cmp	r3, #31
 800187a:	dd00      	ble.n	800187e <__aeabi_dsub+0x9e>
 800187c:	e17c      	b.n	8001b78 <__aeabi_dsub+0x398>
 800187e:	2220      	movs	r2, #32
 8001880:	0030      	movs	r0, r6
 8001882:	1ad2      	subs	r2, r2, r3
 8001884:	4641      	mov	r1, r8
 8001886:	40d0      	lsrs	r0, r2
 8001888:	4099      	lsls	r1, r3
 800188a:	0002      	movs	r2, r0
 800188c:	409e      	lsls	r6, r3
 800188e:	430a      	orrs	r2, r1
 8001890:	429d      	cmp	r5, r3
 8001892:	dd00      	ble.n	8001896 <__aeabi_dsub+0xb6>
 8001894:	e16a      	b.n	8001b6c <__aeabi_dsub+0x38c>
 8001896:	1b5d      	subs	r5, r3, r5
 8001898:	1c6b      	adds	r3, r5, #1
 800189a:	2b1f      	cmp	r3, #31
 800189c:	dd00      	ble.n	80018a0 <__aeabi_dsub+0xc0>
 800189e:	e194      	b.n	8001bca <__aeabi_dsub+0x3ea>
 80018a0:	2120      	movs	r1, #32
 80018a2:	0010      	movs	r0, r2
 80018a4:	0035      	movs	r5, r6
 80018a6:	1ac9      	subs	r1, r1, r3
 80018a8:	408e      	lsls	r6, r1
 80018aa:	40da      	lsrs	r2, r3
 80018ac:	4088      	lsls	r0, r1
 80018ae:	40dd      	lsrs	r5, r3
 80018b0:	1e71      	subs	r1, r6, #1
 80018b2:	418e      	sbcs	r6, r1
 80018b4:	0011      	movs	r1, r2
 80018b6:	2207      	movs	r2, #7
 80018b8:	4328      	orrs	r0, r5
 80018ba:	2500      	movs	r5, #0
 80018bc:	4306      	orrs	r6, r0
 80018be:	4032      	ands	r2, r6
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d009      	beq.n	80018d8 <__aeabi_dsub+0xf8>
 80018c4:	230f      	movs	r3, #15
 80018c6:	4033      	ands	r3, r6
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d005      	beq.n	80018d8 <__aeabi_dsub+0xf8>
 80018cc:	1d33      	adds	r3, r6, #4
 80018ce:	42b3      	cmp	r3, r6
 80018d0:	41b6      	sbcs	r6, r6
 80018d2:	4276      	negs	r6, r6
 80018d4:	1989      	adds	r1, r1, r6
 80018d6:	001e      	movs	r6, r3
 80018d8:	020b      	lsls	r3, r1, #8
 80018da:	d400      	bmi.n	80018de <__aeabi_dsub+0xfe>
 80018dc:	e23d      	b.n	8001d5a <__aeabi_dsub+0x57a>
 80018de:	1c6a      	adds	r2, r5, #1
 80018e0:	4b91      	ldr	r3, [pc, #580]	; (8001b28 <__aeabi_dsub+0x348>)
 80018e2:	0555      	lsls	r5, r2, #21
 80018e4:	0d6d      	lsrs	r5, r5, #21
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d100      	bne.n	80018ec <__aeabi_dsub+0x10c>
 80018ea:	e119      	b.n	8001b20 <__aeabi_dsub+0x340>
 80018ec:	4a8f      	ldr	r2, [pc, #572]	; (8001b2c <__aeabi_dsub+0x34c>)
 80018ee:	08f6      	lsrs	r6, r6, #3
 80018f0:	400a      	ands	r2, r1
 80018f2:	0757      	lsls	r7, r2, #29
 80018f4:	0252      	lsls	r2, r2, #9
 80018f6:	4337      	orrs	r7, r6
 80018f8:	0b12      	lsrs	r2, r2, #12
 80018fa:	e09b      	b.n	8001a34 <__aeabi_dsub+0x254>
 80018fc:	2e00      	cmp	r6, #0
 80018fe:	d000      	beq.n	8001902 <__aeabi_dsub+0x122>
 8001900:	e0c5      	b.n	8001a8e <__aeabi_dsub+0x2ae>
 8001902:	1c6e      	adds	r6, r5, #1
 8001904:	0576      	lsls	r6, r6, #21
 8001906:	0d76      	lsrs	r6, r6, #21
 8001908:	2e01      	cmp	r6, #1
 800190a:	dc00      	bgt.n	800190e <__aeabi_dsub+0x12e>
 800190c:	e148      	b.n	8001ba0 <__aeabi_dsub+0x3c0>
 800190e:	4667      	mov	r7, ip
 8001910:	1a86      	subs	r6, r0, r2
 8001912:	1bcb      	subs	r3, r1, r7
 8001914:	42b0      	cmp	r0, r6
 8001916:	41bf      	sbcs	r7, r7
 8001918:	427f      	negs	r7, r7
 800191a:	46b8      	mov	r8, r7
 800191c:	001f      	movs	r7, r3
 800191e:	4643      	mov	r3, r8
 8001920:	1aff      	subs	r7, r7, r3
 8001922:	003b      	movs	r3, r7
 8001924:	46b8      	mov	r8, r7
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	d500      	bpl.n	800192c <__aeabi_dsub+0x14c>
 800192a:	e15f      	b.n	8001bec <__aeabi_dsub+0x40c>
 800192c:	4337      	orrs	r7, r6
 800192e:	d19a      	bne.n	8001866 <__aeabi_dsub+0x86>
 8001930:	2200      	movs	r2, #0
 8001932:	2400      	movs	r4, #0
 8001934:	2500      	movs	r5, #0
 8001936:	e079      	b.n	8001a2c <__aeabi_dsub+0x24c>
 8001938:	2e00      	cmp	r6, #0
 800193a:	dc00      	bgt.n	800193e <__aeabi_dsub+0x15e>
 800193c:	e0fa      	b.n	8001b34 <__aeabi_dsub+0x354>
 800193e:	2f00      	cmp	r7, #0
 8001940:	d100      	bne.n	8001944 <__aeabi_dsub+0x164>
 8001942:	e08d      	b.n	8001a60 <__aeabi_dsub+0x280>
 8001944:	4b78      	ldr	r3, [pc, #480]	; (8001b28 <__aeabi_dsub+0x348>)
 8001946:	429d      	cmp	r5, r3
 8001948:	d067      	beq.n	8001a1a <__aeabi_dsub+0x23a>
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	4667      	mov	r7, ip
 800194e:	041b      	lsls	r3, r3, #16
 8001950:	431f      	orrs	r7, r3
 8001952:	46bc      	mov	ip, r7
 8001954:	2e38      	cmp	r6, #56	; 0x38
 8001956:	dc00      	bgt.n	800195a <__aeabi_dsub+0x17a>
 8001958:	e152      	b.n	8001c00 <__aeabi_dsub+0x420>
 800195a:	4663      	mov	r3, ip
 800195c:	4313      	orrs	r3, r2
 800195e:	1e5a      	subs	r2, r3, #1
 8001960:	4193      	sbcs	r3, r2
 8001962:	181e      	adds	r6, r3, r0
 8001964:	4286      	cmp	r6, r0
 8001966:	4180      	sbcs	r0, r0
 8001968:	4240      	negs	r0, r0
 800196a:	1809      	adds	r1, r1, r0
 800196c:	020b      	lsls	r3, r1, #8
 800196e:	d400      	bmi.n	8001972 <__aeabi_dsub+0x192>
 8001970:	e0be      	b.n	8001af0 <__aeabi_dsub+0x310>
 8001972:	4b6d      	ldr	r3, [pc, #436]	; (8001b28 <__aeabi_dsub+0x348>)
 8001974:	3501      	adds	r5, #1
 8001976:	429d      	cmp	r5, r3
 8001978:	d100      	bne.n	800197c <__aeabi_dsub+0x19c>
 800197a:	e0d2      	b.n	8001b22 <__aeabi_dsub+0x342>
 800197c:	4a6b      	ldr	r2, [pc, #428]	; (8001b2c <__aeabi_dsub+0x34c>)
 800197e:	0873      	lsrs	r3, r6, #1
 8001980:	400a      	ands	r2, r1
 8001982:	2101      	movs	r1, #1
 8001984:	400e      	ands	r6, r1
 8001986:	431e      	orrs	r6, r3
 8001988:	0851      	lsrs	r1, r2, #1
 800198a:	07d3      	lsls	r3, r2, #31
 800198c:	2207      	movs	r2, #7
 800198e:	431e      	orrs	r6, r3
 8001990:	4032      	ands	r2, r6
 8001992:	e795      	b.n	80018c0 <__aeabi_dsub+0xe0>
 8001994:	001e      	movs	r6, r3
 8001996:	4316      	orrs	r6, r2
 8001998:	d000      	beq.n	800199c <__aeabi_dsub+0x1bc>
 800199a:	e745      	b.n	8001828 <__aeabi_dsub+0x48>
 800199c:	e740      	b.n	8001820 <__aeabi_dsub+0x40>
 800199e:	4b62      	ldr	r3, [pc, #392]	; (8001b28 <__aeabi_dsub+0x348>)
 80019a0:	429d      	cmp	r5, r3
 80019a2:	d03a      	beq.n	8001a1a <__aeabi_dsub+0x23a>
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	4667      	mov	r7, ip
 80019a8:	041b      	lsls	r3, r3, #16
 80019aa:	431f      	orrs	r7, r3
 80019ac:	46bc      	mov	ip, r7
 80019ae:	2e38      	cmp	r6, #56	; 0x38
 80019b0:	dd00      	ble.n	80019b4 <__aeabi_dsub+0x1d4>
 80019b2:	e0eb      	b.n	8001b8c <__aeabi_dsub+0x3ac>
 80019b4:	2e1f      	cmp	r6, #31
 80019b6:	dc00      	bgt.n	80019ba <__aeabi_dsub+0x1da>
 80019b8:	e13a      	b.n	8001c30 <__aeabi_dsub+0x450>
 80019ba:	0033      	movs	r3, r6
 80019bc:	4667      	mov	r7, ip
 80019be:	3b20      	subs	r3, #32
 80019c0:	40df      	lsrs	r7, r3
 80019c2:	003b      	movs	r3, r7
 80019c4:	2e20      	cmp	r6, #32
 80019c6:	d005      	beq.n	80019d4 <__aeabi_dsub+0x1f4>
 80019c8:	2740      	movs	r7, #64	; 0x40
 80019ca:	1bbf      	subs	r7, r7, r6
 80019cc:	4666      	mov	r6, ip
 80019ce:	40be      	lsls	r6, r7
 80019d0:	4332      	orrs	r2, r6
 80019d2:	4690      	mov	r8, r2
 80019d4:	4646      	mov	r6, r8
 80019d6:	1e72      	subs	r2, r6, #1
 80019d8:	4196      	sbcs	r6, r2
 80019da:	4333      	orrs	r3, r6
 80019dc:	e0da      	b.n	8001b94 <__aeabi_dsub+0x3b4>
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x204>
 80019e2:	e214      	b.n	8001e0e <__aeabi_dsub+0x62e>
 80019e4:	4663      	mov	r3, ip
 80019e6:	4313      	orrs	r3, r2
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x20c>
 80019ea:	e168      	b.n	8001cbe <__aeabi_dsub+0x4de>
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	074e      	lsls	r6, r1, #29
 80019f0:	08c0      	lsrs	r0, r0, #3
 80019f2:	08c9      	lsrs	r1, r1, #3
 80019f4:	031b      	lsls	r3, r3, #12
 80019f6:	4306      	orrs	r6, r0
 80019f8:	4219      	tst	r1, r3
 80019fa:	d008      	beq.n	8001a0e <__aeabi_dsub+0x22e>
 80019fc:	4660      	mov	r0, ip
 80019fe:	08c0      	lsrs	r0, r0, #3
 8001a00:	4218      	tst	r0, r3
 8001a02:	d104      	bne.n	8001a0e <__aeabi_dsub+0x22e>
 8001a04:	4663      	mov	r3, ip
 8001a06:	0001      	movs	r1, r0
 8001a08:	08d2      	lsrs	r2, r2, #3
 8001a0a:	075e      	lsls	r6, r3, #29
 8001a0c:	4316      	orrs	r6, r2
 8001a0e:	00f3      	lsls	r3, r6, #3
 8001a10:	4699      	mov	r9, r3
 8001a12:	00c9      	lsls	r1, r1, #3
 8001a14:	0f72      	lsrs	r2, r6, #29
 8001a16:	4d44      	ldr	r5, [pc, #272]	; (8001b28 <__aeabi_dsub+0x348>)
 8001a18:	4311      	orrs	r1, r2
 8001a1a:	464b      	mov	r3, r9
 8001a1c:	08de      	lsrs	r6, r3, #3
 8001a1e:	4b42      	ldr	r3, [pc, #264]	; (8001b28 <__aeabi_dsub+0x348>)
 8001a20:	074f      	lsls	r7, r1, #29
 8001a22:	4337      	orrs	r7, r6
 8001a24:	08ca      	lsrs	r2, r1, #3
 8001a26:	429d      	cmp	r5, r3
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dsub+0x24c>
 8001a2a:	e06e      	b.n	8001b0a <__aeabi_dsub+0x32a>
 8001a2c:	0312      	lsls	r2, r2, #12
 8001a2e:	056d      	lsls	r5, r5, #21
 8001a30:	0b12      	lsrs	r2, r2, #12
 8001a32:	0d6d      	lsrs	r5, r5, #21
 8001a34:	2100      	movs	r1, #0
 8001a36:	0312      	lsls	r2, r2, #12
 8001a38:	0b13      	lsrs	r3, r2, #12
 8001a3a:	0d0a      	lsrs	r2, r1, #20
 8001a3c:	0512      	lsls	r2, r2, #20
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <__aeabi_dsub+0x350>)
 8001a42:	052d      	lsls	r5, r5, #20
 8001a44:	4013      	ands	r3, r2
 8001a46:	432b      	orrs	r3, r5
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	07e4      	lsls	r4, r4, #31
 8001a4c:	085b      	lsrs	r3, r3, #1
 8001a4e:	4323      	orrs	r3, r4
 8001a50:	0038      	movs	r0, r7
 8001a52:	0019      	movs	r1, r3
 8001a54:	bc3c      	pop	{r2, r3, r4, r5}
 8001a56:	4690      	mov	r8, r2
 8001a58:	4699      	mov	r9, r3
 8001a5a:	46a2      	mov	sl, r4
 8001a5c:	46ab      	mov	fp, r5
 8001a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a60:	4663      	mov	r3, ip
 8001a62:	4313      	orrs	r3, r2
 8001a64:	d011      	beq.n	8001a8a <__aeabi_dsub+0x2aa>
 8001a66:	1e73      	subs	r3, r6, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d000      	beq.n	8001a6e <__aeabi_dsub+0x28e>
 8001a6c:	e107      	b.n	8001c7e <__aeabi_dsub+0x49e>
 8001a6e:	1886      	adds	r6, r0, r2
 8001a70:	4286      	cmp	r6, r0
 8001a72:	4180      	sbcs	r0, r0
 8001a74:	4461      	add	r1, ip
 8001a76:	4240      	negs	r0, r0
 8001a78:	1809      	adds	r1, r1, r0
 8001a7a:	2501      	movs	r5, #1
 8001a7c:	020b      	lsls	r3, r1, #8
 8001a7e:	d537      	bpl.n	8001af0 <__aeabi_dsub+0x310>
 8001a80:	2502      	movs	r5, #2
 8001a82:	e77b      	b.n	800197c <__aeabi_dsub+0x19c>
 8001a84:	003e      	movs	r6, r7
 8001a86:	4661      	mov	r1, ip
 8001a88:	4691      	mov	r9, r2
 8001a8a:	0035      	movs	r5, r6
 8001a8c:	e7c5      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001a8e:	465c      	mov	r4, fp
 8001a90:	2d00      	cmp	r5, #0
 8001a92:	d000      	beq.n	8001a96 <__aeabi_dsub+0x2b6>
 8001a94:	e0e1      	b.n	8001c5a <__aeabi_dsub+0x47a>
 8001a96:	000b      	movs	r3, r1
 8001a98:	4303      	orrs	r3, r0
 8001a9a:	d0f3      	beq.n	8001a84 <__aeabi_dsub+0x2a4>
 8001a9c:	1c73      	adds	r3, r6, #1
 8001a9e:	d100      	bne.n	8001aa2 <__aeabi_dsub+0x2c2>
 8001aa0:	e1ac      	b.n	8001dfc <__aeabi_dsub+0x61c>
 8001aa2:	4b21      	ldr	r3, [pc, #132]	; (8001b28 <__aeabi_dsub+0x348>)
 8001aa4:	429f      	cmp	r7, r3
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dsub+0x2ca>
 8001aa8:	e13a      	b.n	8001d20 <__aeabi_dsub+0x540>
 8001aaa:	43f3      	mvns	r3, r6
 8001aac:	2b38      	cmp	r3, #56	; 0x38
 8001aae:	dd00      	ble.n	8001ab2 <__aeabi_dsub+0x2d2>
 8001ab0:	e16f      	b.n	8001d92 <__aeabi_dsub+0x5b2>
 8001ab2:	2b1f      	cmp	r3, #31
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dsub+0x2d8>
 8001ab6:	e18c      	b.n	8001dd2 <__aeabi_dsub+0x5f2>
 8001ab8:	2520      	movs	r5, #32
 8001aba:	000e      	movs	r6, r1
 8001abc:	1aed      	subs	r5, r5, r3
 8001abe:	40ae      	lsls	r6, r5
 8001ac0:	46b0      	mov	r8, r6
 8001ac2:	0006      	movs	r6, r0
 8001ac4:	46aa      	mov	sl, r5
 8001ac6:	40de      	lsrs	r6, r3
 8001ac8:	4645      	mov	r5, r8
 8001aca:	4335      	orrs	r5, r6
 8001acc:	002e      	movs	r6, r5
 8001ace:	4655      	mov	r5, sl
 8001ad0:	40d9      	lsrs	r1, r3
 8001ad2:	40a8      	lsls	r0, r5
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	1e45      	subs	r5, r0, #1
 8001ad8:	41a8      	sbcs	r0, r5
 8001ada:	1a5b      	subs	r3, r3, r1
 8001adc:	469c      	mov	ip, r3
 8001ade:	4330      	orrs	r0, r6
 8001ae0:	1a16      	subs	r6, r2, r0
 8001ae2:	42b2      	cmp	r2, r6
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4663      	mov	r3, ip
 8001ae8:	4252      	negs	r2, r2
 8001aea:	1a99      	subs	r1, r3, r2
 8001aec:	003d      	movs	r5, r7
 8001aee:	e6b4      	b.n	800185a <__aeabi_dsub+0x7a>
 8001af0:	2207      	movs	r2, #7
 8001af2:	4032      	ands	r2, r6
 8001af4:	2a00      	cmp	r2, #0
 8001af6:	d000      	beq.n	8001afa <__aeabi_dsub+0x31a>
 8001af8:	e6e4      	b.n	80018c4 <__aeabi_dsub+0xe4>
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <__aeabi_dsub+0x348>)
 8001afc:	08f6      	lsrs	r6, r6, #3
 8001afe:	074f      	lsls	r7, r1, #29
 8001b00:	4337      	orrs	r7, r6
 8001b02:	08ca      	lsrs	r2, r1, #3
 8001b04:	429d      	cmp	r5, r3
 8001b06:	d000      	beq.n	8001b0a <__aeabi_dsub+0x32a>
 8001b08:	e790      	b.n	8001a2c <__aeabi_dsub+0x24c>
 8001b0a:	003b      	movs	r3, r7
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x332>
 8001b10:	e1a6      	b.n	8001e60 <__aeabi_dsub+0x680>
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	031b      	lsls	r3, r3, #12
 8001b16:	431a      	orrs	r2, r3
 8001b18:	0312      	lsls	r2, r2, #12
 8001b1a:	0b12      	lsrs	r2, r2, #12
 8001b1c:	4d02      	ldr	r5, [pc, #8]	; (8001b28 <__aeabi_dsub+0x348>)
 8001b1e:	e789      	b.n	8001a34 <__aeabi_dsub+0x254>
 8001b20:	0015      	movs	r5, r2
 8001b22:	2200      	movs	r2, #0
 8001b24:	2700      	movs	r7, #0
 8001b26:	e785      	b.n	8001a34 <__aeabi_dsub+0x254>
 8001b28:	000007ff 	.word	0x000007ff
 8001b2c:	ff7fffff 	.word	0xff7fffff
 8001b30:	800fffff 	.word	0x800fffff
 8001b34:	2e00      	cmp	r6, #0
 8001b36:	d000      	beq.n	8001b3a <__aeabi_dsub+0x35a>
 8001b38:	e0c7      	b.n	8001cca <__aeabi_dsub+0x4ea>
 8001b3a:	1c6b      	adds	r3, r5, #1
 8001b3c:	055e      	lsls	r6, r3, #21
 8001b3e:	0d76      	lsrs	r6, r6, #21
 8001b40:	2e01      	cmp	r6, #1
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dsub+0x366>
 8001b44:	e0f0      	b.n	8001d28 <__aeabi_dsub+0x548>
 8001b46:	4dc8      	ldr	r5, [pc, #800]	; (8001e68 <__aeabi_dsub+0x688>)
 8001b48:	42ab      	cmp	r3, r5
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dsub+0x36e>
 8001b4c:	e0b9      	b.n	8001cc2 <__aeabi_dsub+0x4e2>
 8001b4e:	1885      	adds	r5, r0, r2
 8001b50:	000a      	movs	r2, r1
 8001b52:	4285      	cmp	r5, r0
 8001b54:	4189      	sbcs	r1, r1
 8001b56:	4462      	add	r2, ip
 8001b58:	4249      	negs	r1, r1
 8001b5a:	1851      	adds	r1, r2, r1
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	07ce      	lsls	r6, r1, #31
 8001b60:	086d      	lsrs	r5, r5, #1
 8001b62:	432e      	orrs	r6, r5
 8001b64:	0849      	lsrs	r1, r1, #1
 8001b66:	4032      	ands	r2, r6
 8001b68:	001d      	movs	r5, r3
 8001b6a:	e6a9      	b.n	80018c0 <__aeabi_dsub+0xe0>
 8001b6c:	49bf      	ldr	r1, [pc, #764]	; (8001e6c <__aeabi_dsub+0x68c>)
 8001b6e:	1aed      	subs	r5, r5, r3
 8001b70:	4011      	ands	r1, r2
 8001b72:	2207      	movs	r2, #7
 8001b74:	4032      	ands	r2, r6
 8001b76:	e6a3      	b.n	80018c0 <__aeabi_dsub+0xe0>
 8001b78:	0032      	movs	r2, r6
 8001b7a:	3828      	subs	r0, #40	; 0x28
 8001b7c:	4082      	lsls	r2, r0
 8001b7e:	2600      	movs	r6, #0
 8001b80:	e686      	b.n	8001890 <__aeabi_dsub+0xb0>
 8001b82:	0030      	movs	r0, r6
 8001b84:	f000 fa80 	bl	8002088 <__clzsi2>
 8001b88:	3020      	adds	r0, #32
 8001b8a:	e673      	b.n	8001874 <__aeabi_dsub+0x94>
 8001b8c:	4663      	mov	r3, ip
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	1e5a      	subs	r2, r3, #1
 8001b92:	4193      	sbcs	r3, r2
 8001b94:	1ac6      	subs	r6, r0, r3
 8001b96:	42b0      	cmp	r0, r6
 8001b98:	4180      	sbcs	r0, r0
 8001b9a:	4240      	negs	r0, r0
 8001b9c:	1a09      	subs	r1, r1, r0
 8001b9e:	e65c      	b.n	800185a <__aeabi_dsub+0x7a>
 8001ba0:	000e      	movs	r6, r1
 8001ba2:	4667      	mov	r7, ip
 8001ba4:	4306      	orrs	r6, r0
 8001ba6:	4317      	orrs	r7, r2
 8001ba8:	2d00      	cmp	r5, #0
 8001baa:	d15e      	bne.n	8001c6a <__aeabi_dsub+0x48a>
 8001bac:	2e00      	cmp	r6, #0
 8001bae:	d000      	beq.n	8001bb2 <__aeabi_dsub+0x3d2>
 8001bb0:	e0f3      	b.n	8001d9a <__aeabi_dsub+0x5ba>
 8001bb2:	2f00      	cmp	r7, #0
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0x3d8>
 8001bb6:	e11e      	b.n	8001df6 <__aeabi_dsub+0x616>
 8001bb8:	465c      	mov	r4, fp
 8001bba:	4661      	mov	r1, ip
 8001bbc:	4691      	mov	r9, r2
 8001bbe:	e72c      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001bc0:	4fa9      	ldr	r7, [pc, #676]	; (8001e68 <__aeabi_dsub+0x688>)
 8001bc2:	42be      	cmp	r6, r7
 8001bc4:	d07b      	beq.n	8001cbe <__aeabi_dsub+0x4de>
 8001bc6:	001e      	movs	r6, r3
 8001bc8:	e6f1      	b.n	80019ae <__aeabi_dsub+0x1ce>
 8001bca:	0010      	movs	r0, r2
 8001bcc:	3d1f      	subs	r5, #31
 8001bce:	40e8      	lsrs	r0, r5
 8001bd0:	2b20      	cmp	r3, #32
 8001bd2:	d003      	beq.n	8001bdc <__aeabi_dsub+0x3fc>
 8001bd4:	2140      	movs	r1, #64	; 0x40
 8001bd6:	1acb      	subs	r3, r1, r3
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	4316      	orrs	r6, r2
 8001bdc:	1e73      	subs	r3, r6, #1
 8001bde:	419e      	sbcs	r6, r3
 8001be0:	2207      	movs	r2, #7
 8001be2:	4306      	orrs	r6, r0
 8001be4:	4032      	ands	r2, r6
 8001be6:	2100      	movs	r1, #0
 8001be8:	2500      	movs	r5, #0
 8001bea:	e783      	b.n	8001af4 <__aeabi_dsub+0x314>
 8001bec:	1a16      	subs	r6, r2, r0
 8001bee:	4663      	mov	r3, ip
 8001bf0:	42b2      	cmp	r2, r6
 8001bf2:	4180      	sbcs	r0, r0
 8001bf4:	1a59      	subs	r1, r3, r1
 8001bf6:	4240      	negs	r0, r0
 8001bf8:	1a0b      	subs	r3, r1, r0
 8001bfa:	4698      	mov	r8, r3
 8001bfc:	465c      	mov	r4, fp
 8001bfe:	e632      	b.n	8001866 <__aeabi_dsub+0x86>
 8001c00:	2e1f      	cmp	r6, #31
 8001c02:	dd00      	ble.n	8001c06 <__aeabi_dsub+0x426>
 8001c04:	e0ab      	b.n	8001d5e <__aeabi_dsub+0x57e>
 8001c06:	2720      	movs	r7, #32
 8001c08:	1bbb      	subs	r3, r7, r6
 8001c0a:	469a      	mov	sl, r3
 8001c0c:	4663      	mov	r3, ip
 8001c0e:	4657      	mov	r7, sl
 8001c10:	40bb      	lsls	r3, r7
 8001c12:	4699      	mov	r9, r3
 8001c14:	0013      	movs	r3, r2
 8001c16:	464f      	mov	r7, r9
 8001c18:	40f3      	lsrs	r3, r6
 8001c1a:	431f      	orrs	r7, r3
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	4657      	mov	r7, sl
 8001c20:	40ba      	lsls	r2, r7
 8001c22:	1e57      	subs	r7, r2, #1
 8001c24:	41ba      	sbcs	r2, r7
 8001c26:	4313      	orrs	r3, r2
 8001c28:	4662      	mov	r2, ip
 8001c2a:	40f2      	lsrs	r2, r6
 8001c2c:	1889      	adds	r1, r1, r2
 8001c2e:	e698      	b.n	8001962 <__aeabi_dsub+0x182>
 8001c30:	2720      	movs	r7, #32
 8001c32:	1bbb      	subs	r3, r7, r6
 8001c34:	469a      	mov	sl, r3
 8001c36:	4663      	mov	r3, ip
 8001c38:	4657      	mov	r7, sl
 8001c3a:	40bb      	lsls	r3, r7
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	0013      	movs	r3, r2
 8001c40:	464f      	mov	r7, r9
 8001c42:	40f3      	lsrs	r3, r6
 8001c44:	431f      	orrs	r7, r3
 8001c46:	003b      	movs	r3, r7
 8001c48:	4657      	mov	r7, sl
 8001c4a:	40ba      	lsls	r2, r7
 8001c4c:	1e57      	subs	r7, r2, #1
 8001c4e:	41ba      	sbcs	r2, r7
 8001c50:	4313      	orrs	r3, r2
 8001c52:	4662      	mov	r2, ip
 8001c54:	40f2      	lsrs	r2, r6
 8001c56:	1a89      	subs	r1, r1, r2
 8001c58:	e79c      	b.n	8001b94 <__aeabi_dsub+0x3b4>
 8001c5a:	4b83      	ldr	r3, [pc, #524]	; (8001e68 <__aeabi_dsub+0x688>)
 8001c5c:	429f      	cmp	r7, r3
 8001c5e:	d05f      	beq.n	8001d20 <__aeabi_dsub+0x540>
 8001c60:	2580      	movs	r5, #128	; 0x80
 8001c62:	042d      	lsls	r5, r5, #16
 8001c64:	4273      	negs	r3, r6
 8001c66:	4329      	orrs	r1, r5
 8001c68:	e720      	b.n	8001aac <__aeabi_dsub+0x2cc>
 8001c6a:	2e00      	cmp	r6, #0
 8001c6c:	d10c      	bne.n	8001c88 <__aeabi_dsub+0x4a8>
 8001c6e:	2f00      	cmp	r7, #0
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x494>
 8001c72:	e0d0      	b.n	8001e16 <__aeabi_dsub+0x636>
 8001c74:	465c      	mov	r4, fp
 8001c76:	4661      	mov	r1, ip
 8001c78:	4691      	mov	r9, r2
 8001c7a:	4d7b      	ldr	r5, [pc, #492]	; (8001e68 <__aeabi_dsub+0x688>)
 8001c7c:	e6cd      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001c7e:	4f7a      	ldr	r7, [pc, #488]	; (8001e68 <__aeabi_dsub+0x688>)
 8001c80:	42be      	cmp	r6, r7
 8001c82:	d01c      	beq.n	8001cbe <__aeabi_dsub+0x4de>
 8001c84:	001e      	movs	r6, r3
 8001c86:	e665      	b.n	8001954 <__aeabi_dsub+0x174>
 8001c88:	2f00      	cmp	r7, #0
 8001c8a:	d018      	beq.n	8001cbe <__aeabi_dsub+0x4de>
 8001c8c:	08c0      	lsrs	r0, r0, #3
 8001c8e:	074e      	lsls	r6, r1, #29
 8001c90:	4306      	orrs	r6, r0
 8001c92:	2080      	movs	r0, #128	; 0x80
 8001c94:	08c9      	lsrs	r1, r1, #3
 8001c96:	0300      	lsls	r0, r0, #12
 8001c98:	4201      	tst	r1, r0
 8001c9a:	d008      	beq.n	8001cae <__aeabi_dsub+0x4ce>
 8001c9c:	4663      	mov	r3, ip
 8001c9e:	08dc      	lsrs	r4, r3, #3
 8001ca0:	4204      	tst	r4, r0
 8001ca2:	d104      	bne.n	8001cae <__aeabi_dsub+0x4ce>
 8001ca4:	0021      	movs	r1, r4
 8001ca6:	46da      	mov	sl, fp
 8001ca8:	08d2      	lsrs	r2, r2, #3
 8001caa:	075e      	lsls	r6, r3, #29
 8001cac:	4316      	orrs	r6, r2
 8001cae:	00f3      	lsls	r3, r6, #3
 8001cb0:	4699      	mov	r9, r3
 8001cb2:	2401      	movs	r4, #1
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	00c9      	lsls	r1, r1, #3
 8001cb8:	0f72      	lsrs	r2, r6, #29
 8001cba:	4311      	orrs	r1, r2
 8001cbc:	401c      	ands	r4, r3
 8001cbe:	4d6a      	ldr	r5, [pc, #424]	; (8001e68 <__aeabi_dsub+0x688>)
 8001cc0:	e6ab      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001cc2:	001d      	movs	r5, r3
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2700      	movs	r7, #0
 8001cc8:	e6b4      	b.n	8001a34 <__aeabi_dsub+0x254>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d159      	bne.n	8001d82 <__aeabi_dsub+0x5a2>
 8001cce:	000b      	movs	r3, r1
 8001cd0:	4303      	orrs	r3, r0
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_dsub+0x4f6>
 8001cd4:	e6d6      	b.n	8001a84 <__aeabi_dsub+0x2a4>
 8001cd6:	1c73      	adds	r3, r6, #1
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_dsub+0x4fc>
 8001cda:	e0b2      	b.n	8001e42 <__aeabi_dsub+0x662>
 8001cdc:	4b62      	ldr	r3, [pc, #392]	; (8001e68 <__aeabi_dsub+0x688>)
 8001cde:	429f      	cmp	r7, r3
 8001ce0:	d01e      	beq.n	8001d20 <__aeabi_dsub+0x540>
 8001ce2:	43f3      	mvns	r3, r6
 8001ce4:	2b38      	cmp	r3, #56	; 0x38
 8001ce6:	dc6f      	bgt.n	8001dc8 <__aeabi_dsub+0x5e8>
 8001ce8:	2b1f      	cmp	r3, #31
 8001cea:	dd00      	ble.n	8001cee <__aeabi_dsub+0x50e>
 8001cec:	e097      	b.n	8001e1e <__aeabi_dsub+0x63e>
 8001cee:	2520      	movs	r5, #32
 8001cf0:	000e      	movs	r6, r1
 8001cf2:	1aed      	subs	r5, r5, r3
 8001cf4:	40ae      	lsls	r6, r5
 8001cf6:	46b0      	mov	r8, r6
 8001cf8:	0006      	movs	r6, r0
 8001cfa:	46aa      	mov	sl, r5
 8001cfc:	40de      	lsrs	r6, r3
 8001cfe:	4645      	mov	r5, r8
 8001d00:	4335      	orrs	r5, r6
 8001d02:	002e      	movs	r6, r5
 8001d04:	4655      	mov	r5, sl
 8001d06:	40a8      	lsls	r0, r5
 8001d08:	40d9      	lsrs	r1, r3
 8001d0a:	1e45      	subs	r5, r0, #1
 8001d0c:	41a8      	sbcs	r0, r5
 8001d0e:	448c      	add	ip, r1
 8001d10:	4306      	orrs	r6, r0
 8001d12:	18b6      	adds	r6, r6, r2
 8001d14:	4296      	cmp	r6, r2
 8001d16:	4192      	sbcs	r2, r2
 8001d18:	4251      	negs	r1, r2
 8001d1a:	4461      	add	r1, ip
 8001d1c:	003d      	movs	r5, r7
 8001d1e:	e625      	b.n	800196c <__aeabi_dsub+0x18c>
 8001d20:	003d      	movs	r5, r7
 8001d22:	4661      	mov	r1, ip
 8001d24:	4691      	mov	r9, r2
 8001d26:	e678      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001d28:	000b      	movs	r3, r1
 8001d2a:	4303      	orrs	r3, r0
 8001d2c:	2d00      	cmp	r5, #0
 8001d2e:	d000      	beq.n	8001d32 <__aeabi_dsub+0x552>
 8001d30:	e655      	b.n	80019de <__aeabi_dsub+0x1fe>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f5      	beq.n	8001d22 <__aeabi_dsub+0x542>
 8001d36:	4663      	mov	r3, ip
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	d100      	bne.n	8001d3e <__aeabi_dsub+0x55e>
 8001d3c:	e66d      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001d3e:	1886      	adds	r6, r0, r2
 8001d40:	4286      	cmp	r6, r0
 8001d42:	4180      	sbcs	r0, r0
 8001d44:	4461      	add	r1, ip
 8001d46:	4240      	negs	r0, r0
 8001d48:	1809      	adds	r1, r1, r0
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	020b      	lsls	r3, r1, #8
 8001d4e:	d400      	bmi.n	8001d52 <__aeabi_dsub+0x572>
 8001d50:	e6d0      	b.n	8001af4 <__aeabi_dsub+0x314>
 8001d52:	4b46      	ldr	r3, [pc, #280]	; (8001e6c <__aeabi_dsub+0x68c>)
 8001d54:	3501      	adds	r5, #1
 8001d56:	4019      	ands	r1, r3
 8001d58:	e5b2      	b.n	80018c0 <__aeabi_dsub+0xe0>
 8001d5a:	46b1      	mov	r9, r6
 8001d5c:	e65d      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001d5e:	0033      	movs	r3, r6
 8001d60:	4667      	mov	r7, ip
 8001d62:	3b20      	subs	r3, #32
 8001d64:	40df      	lsrs	r7, r3
 8001d66:	003b      	movs	r3, r7
 8001d68:	2e20      	cmp	r6, #32
 8001d6a:	d005      	beq.n	8001d78 <__aeabi_dsub+0x598>
 8001d6c:	2740      	movs	r7, #64	; 0x40
 8001d6e:	1bbf      	subs	r7, r7, r6
 8001d70:	4666      	mov	r6, ip
 8001d72:	40be      	lsls	r6, r7
 8001d74:	4332      	orrs	r2, r6
 8001d76:	4690      	mov	r8, r2
 8001d78:	4646      	mov	r6, r8
 8001d7a:	1e72      	subs	r2, r6, #1
 8001d7c:	4196      	sbcs	r6, r2
 8001d7e:	4333      	orrs	r3, r6
 8001d80:	e5ef      	b.n	8001962 <__aeabi_dsub+0x182>
 8001d82:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <__aeabi_dsub+0x688>)
 8001d84:	429f      	cmp	r7, r3
 8001d86:	d0cb      	beq.n	8001d20 <__aeabi_dsub+0x540>
 8001d88:	2580      	movs	r5, #128	; 0x80
 8001d8a:	042d      	lsls	r5, r5, #16
 8001d8c:	4273      	negs	r3, r6
 8001d8e:	4329      	orrs	r1, r5
 8001d90:	e7a8      	b.n	8001ce4 <__aeabi_dsub+0x504>
 8001d92:	4308      	orrs	r0, r1
 8001d94:	1e41      	subs	r1, r0, #1
 8001d96:	4188      	sbcs	r0, r1
 8001d98:	e6a2      	b.n	8001ae0 <__aeabi_dsub+0x300>
 8001d9a:	2f00      	cmp	r7, #0
 8001d9c:	d100      	bne.n	8001da0 <__aeabi_dsub+0x5c0>
 8001d9e:	e63c      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001da0:	4663      	mov	r3, ip
 8001da2:	1a86      	subs	r6, r0, r2
 8001da4:	1acf      	subs	r7, r1, r3
 8001da6:	42b0      	cmp	r0, r6
 8001da8:	419b      	sbcs	r3, r3
 8001daa:	425b      	negs	r3, r3
 8001dac:	1afb      	subs	r3, r7, r3
 8001dae:	4698      	mov	r8, r3
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	d54e      	bpl.n	8001e52 <__aeabi_dsub+0x672>
 8001db4:	1a16      	subs	r6, r2, r0
 8001db6:	4663      	mov	r3, ip
 8001db8:	42b2      	cmp	r2, r6
 8001dba:	4192      	sbcs	r2, r2
 8001dbc:	1a59      	subs	r1, r3, r1
 8001dbe:	4252      	negs	r2, r2
 8001dc0:	1a89      	subs	r1, r1, r2
 8001dc2:	465c      	mov	r4, fp
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	e57b      	b.n	80018c0 <__aeabi_dsub+0xe0>
 8001dc8:	4301      	orrs	r1, r0
 8001dca:	000e      	movs	r6, r1
 8001dcc:	1e71      	subs	r1, r6, #1
 8001dce:	418e      	sbcs	r6, r1
 8001dd0:	e79f      	b.n	8001d12 <__aeabi_dsub+0x532>
 8001dd2:	001d      	movs	r5, r3
 8001dd4:	000e      	movs	r6, r1
 8001dd6:	3d20      	subs	r5, #32
 8001dd8:	40ee      	lsrs	r6, r5
 8001dda:	46b0      	mov	r8, r6
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d004      	beq.n	8001dea <__aeabi_dsub+0x60a>
 8001de0:	2540      	movs	r5, #64	; 0x40
 8001de2:	1aeb      	subs	r3, r5, r3
 8001de4:	4099      	lsls	r1, r3
 8001de6:	4308      	orrs	r0, r1
 8001de8:	4681      	mov	r9, r0
 8001dea:	4648      	mov	r0, r9
 8001dec:	4643      	mov	r3, r8
 8001dee:	1e41      	subs	r1, r0, #1
 8001df0:	4188      	sbcs	r0, r1
 8001df2:	4318      	orrs	r0, r3
 8001df4:	e674      	b.n	8001ae0 <__aeabi_dsub+0x300>
 8001df6:	2200      	movs	r2, #0
 8001df8:	2400      	movs	r4, #0
 8001dfa:	e617      	b.n	8001a2c <__aeabi_dsub+0x24c>
 8001dfc:	1a16      	subs	r6, r2, r0
 8001dfe:	4663      	mov	r3, ip
 8001e00:	42b2      	cmp	r2, r6
 8001e02:	4192      	sbcs	r2, r2
 8001e04:	1a59      	subs	r1, r3, r1
 8001e06:	4252      	negs	r2, r2
 8001e08:	1a89      	subs	r1, r1, r2
 8001e0a:	003d      	movs	r5, r7
 8001e0c:	e525      	b.n	800185a <__aeabi_dsub+0x7a>
 8001e0e:	4661      	mov	r1, ip
 8001e10:	4691      	mov	r9, r2
 8001e12:	4d15      	ldr	r5, [pc, #84]	; (8001e68 <__aeabi_dsub+0x688>)
 8001e14:	e601      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	2400      	movs	r4, #0
 8001e1a:	0312      	lsls	r2, r2, #12
 8001e1c:	e679      	b.n	8001b12 <__aeabi_dsub+0x332>
 8001e1e:	001d      	movs	r5, r3
 8001e20:	000e      	movs	r6, r1
 8001e22:	3d20      	subs	r5, #32
 8001e24:	40ee      	lsrs	r6, r5
 8001e26:	46b0      	mov	r8, r6
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	d004      	beq.n	8001e36 <__aeabi_dsub+0x656>
 8001e2c:	2540      	movs	r5, #64	; 0x40
 8001e2e:	1aeb      	subs	r3, r5, r3
 8001e30:	4099      	lsls	r1, r3
 8001e32:	4308      	orrs	r0, r1
 8001e34:	4681      	mov	r9, r0
 8001e36:	464e      	mov	r6, r9
 8001e38:	4643      	mov	r3, r8
 8001e3a:	1e71      	subs	r1, r6, #1
 8001e3c:	418e      	sbcs	r6, r1
 8001e3e:	431e      	orrs	r6, r3
 8001e40:	e767      	b.n	8001d12 <__aeabi_dsub+0x532>
 8001e42:	1886      	adds	r6, r0, r2
 8001e44:	4296      	cmp	r6, r2
 8001e46:	419b      	sbcs	r3, r3
 8001e48:	4461      	add	r1, ip
 8001e4a:	425b      	negs	r3, r3
 8001e4c:	18c9      	adds	r1, r1, r3
 8001e4e:	003d      	movs	r5, r7
 8001e50:	e58c      	b.n	800196c <__aeabi_dsub+0x18c>
 8001e52:	4647      	mov	r7, r8
 8001e54:	4337      	orrs	r7, r6
 8001e56:	d0ce      	beq.n	8001df6 <__aeabi_dsub+0x616>
 8001e58:	2207      	movs	r2, #7
 8001e5a:	4641      	mov	r1, r8
 8001e5c:	4032      	ands	r2, r6
 8001e5e:	e649      	b.n	8001af4 <__aeabi_dsub+0x314>
 8001e60:	2700      	movs	r7, #0
 8001e62:	003a      	movs	r2, r7
 8001e64:	e5e6      	b.n	8001a34 <__aeabi_dsub+0x254>
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	000007ff 	.word	0x000007ff
 8001e6c:	ff7fffff 	.word	0xff7fffff

08001e70 <__aeabi_d2iz>:
 8001e70:	b530      	push	{r4, r5, lr}
 8001e72:	4d14      	ldr	r5, [pc, #80]	; (8001ec4 <__aeabi_d2iz+0x54>)
 8001e74:	030a      	lsls	r2, r1, #12
 8001e76:	004b      	lsls	r3, r1, #1
 8001e78:	0b12      	lsrs	r2, r2, #12
 8001e7a:	0d5b      	lsrs	r3, r3, #21
 8001e7c:	0fc9      	lsrs	r1, r1, #31
 8001e7e:	2400      	movs	r4, #0
 8001e80:	42ab      	cmp	r3, r5
 8001e82:	dd11      	ble.n	8001ea8 <__aeabi_d2iz+0x38>
 8001e84:	4c10      	ldr	r4, [pc, #64]	; (8001ec8 <__aeabi_d2iz+0x58>)
 8001e86:	42a3      	cmp	r3, r4
 8001e88:	dc10      	bgt.n	8001eac <__aeabi_d2iz+0x3c>
 8001e8a:	2480      	movs	r4, #128	; 0x80
 8001e8c:	0364      	lsls	r4, r4, #13
 8001e8e:	4322      	orrs	r2, r4
 8001e90:	4c0e      	ldr	r4, [pc, #56]	; (8001ecc <__aeabi_d2iz+0x5c>)
 8001e92:	1ae4      	subs	r4, r4, r3
 8001e94:	2c1f      	cmp	r4, #31
 8001e96:	dd0c      	ble.n	8001eb2 <__aeabi_d2iz+0x42>
 8001e98:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <__aeabi_d2iz+0x60>)
 8001e9a:	1ac3      	subs	r3, r0, r3
 8001e9c:	40da      	lsrs	r2, r3
 8001e9e:	0013      	movs	r3, r2
 8001ea0:	425c      	negs	r4, r3
 8001ea2:	2900      	cmp	r1, #0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_d2iz+0x38>
 8001ea6:	001c      	movs	r4, r3
 8001ea8:	0020      	movs	r0, r4
 8001eaa:	bd30      	pop	{r4, r5, pc}
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <__aeabi_d2iz+0x64>)
 8001eae:	18cc      	adds	r4, r1, r3
 8001eb0:	e7fa      	b.n	8001ea8 <__aeabi_d2iz+0x38>
 8001eb2:	4d09      	ldr	r5, [pc, #36]	; (8001ed8 <__aeabi_d2iz+0x68>)
 8001eb4:	40e0      	lsrs	r0, r4
 8001eb6:	46ac      	mov	ip, r5
 8001eb8:	4463      	add	r3, ip
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	0013      	movs	r3, r2
 8001ebe:	4303      	orrs	r3, r0
 8001ec0:	e7ee      	b.n	8001ea0 <__aeabi_d2iz+0x30>
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	000003fe 	.word	0x000003fe
 8001ec8:	0000041d 	.word	0x0000041d
 8001ecc:	00000433 	.word	0x00000433
 8001ed0:	00000413 	.word	0x00000413
 8001ed4:	7fffffff 	.word	0x7fffffff
 8001ed8:	fffffbed 	.word	0xfffffbed

08001edc <__aeabi_f2d>:
 8001edc:	0041      	lsls	r1, r0, #1
 8001ede:	0e09      	lsrs	r1, r1, #24
 8001ee0:	1c4b      	adds	r3, r1, #1
 8001ee2:	b570      	push	{r4, r5, r6, lr}
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	0246      	lsls	r6, r0, #9
 8001ee8:	0a75      	lsrs	r5, r6, #9
 8001eea:	0fc4      	lsrs	r4, r0, #31
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	dd14      	ble.n	8001f1a <__aeabi_f2d+0x3e>
 8001ef0:	23e0      	movs	r3, #224	; 0xe0
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	076d      	lsls	r5, r5, #29
 8001ef6:	0b36      	lsrs	r6, r6, #12
 8001ef8:	18cb      	adds	r3, r1, r3
 8001efa:	2100      	movs	r1, #0
 8001efc:	0d0a      	lsrs	r2, r1, #20
 8001efe:	0028      	movs	r0, r5
 8001f00:	0512      	lsls	r2, r2, #20
 8001f02:	4d1c      	ldr	r5, [pc, #112]	; (8001f74 <__aeabi_f2d+0x98>)
 8001f04:	4332      	orrs	r2, r6
 8001f06:	055b      	lsls	r3, r3, #21
 8001f08:	402a      	ands	r2, r5
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	07e4      	lsls	r4, r4, #31
 8001f12:	085b      	lsrs	r3, r3, #1
 8001f14:	4323      	orrs	r3, r4
 8001f16:	0019      	movs	r1, r3
 8001f18:	bd70      	pop	{r4, r5, r6, pc}
 8001f1a:	2900      	cmp	r1, #0
 8001f1c:	d114      	bne.n	8001f48 <__aeabi_f2d+0x6c>
 8001f1e:	2d00      	cmp	r5, #0
 8001f20:	d01e      	beq.n	8001f60 <__aeabi_f2d+0x84>
 8001f22:	0028      	movs	r0, r5
 8001f24:	f000 f8b0 	bl	8002088 <__clzsi2>
 8001f28:	280a      	cmp	r0, #10
 8001f2a:	dc1c      	bgt.n	8001f66 <__aeabi_f2d+0x8a>
 8001f2c:	230b      	movs	r3, #11
 8001f2e:	002a      	movs	r2, r5
 8001f30:	1a1b      	subs	r3, r3, r0
 8001f32:	40da      	lsrs	r2, r3
 8001f34:	0003      	movs	r3, r0
 8001f36:	3315      	adds	r3, #21
 8001f38:	409d      	lsls	r5, r3
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <__aeabi_f2d+0x9c>)
 8001f3c:	0312      	lsls	r2, r2, #12
 8001f3e:	1a1b      	subs	r3, r3, r0
 8001f40:	055b      	lsls	r3, r3, #21
 8001f42:	0b16      	lsrs	r6, r2, #12
 8001f44:	0d5b      	lsrs	r3, r3, #21
 8001f46:	e7d8      	b.n	8001efa <__aeabi_f2d+0x1e>
 8001f48:	2d00      	cmp	r5, #0
 8001f4a:	d006      	beq.n	8001f5a <__aeabi_f2d+0x7e>
 8001f4c:	0b32      	lsrs	r2, r6, #12
 8001f4e:	2680      	movs	r6, #128	; 0x80
 8001f50:	0336      	lsls	r6, r6, #12
 8001f52:	076d      	lsls	r5, r5, #29
 8001f54:	4316      	orrs	r6, r2
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <__aeabi_f2d+0xa0>)
 8001f58:	e7cf      	b.n	8001efa <__aeabi_f2d+0x1e>
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <__aeabi_f2d+0xa0>)
 8001f5c:	2600      	movs	r6, #0
 8001f5e:	e7cc      	b.n	8001efa <__aeabi_f2d+0x1e>
 8001f60:	2300      	movs	r3, #0
 8001f62:	2600      	movs	r6, #0
 8001f64:	e7c9      	b.n	8001efa <__aeabi_f2d+0x1e>
 8001f66:	0003      	movs	r3, r0
 8001f68:	002a      	movs	r2, r5
 8001f6a:	3b0b      	subs	r3, #11
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	2500      	movs	r5, #0
 8001f70:	e7e3      	b.n	8001f3a <__aeabi_f2d+0x5e>
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	800fffff 	.word	0x800fffff
 8001f78:	00000389 	.word	0x00000389
 8001f7c:	000007ff 	.word	0x000007ff

08001f80 <__aeabi_d2f>:
 8001f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f82:	004c      	lsls	r4, r1, #1
 8001f84:	0d64      	lsrs	r4, r4, #21
 8001f86:	030b      	lsls	r3, r1, #12
 8001f88:	1c62      	adds	r2, r4, #1
 8001f8a:	0a5b      	lsrs	r3, r3, #9
 8001f8c:	0f46      	lsrs	r6, r0, #29
 8001f8e:	0552      	lsls	r2, r2, #21
 8001f90:	0fc9      	lsrs	r1, r1, #31
 8001f92:	431e      	orrs	r6, r3
 8001f94:	00c5      	lsls	r5, r0, #3
 8001f96:	0d52      	lsrs	r2, r2, #21
 8001f98:	2a01      	cmp	r2, #1
 8001f9a:	dd29      	ble.n	8001ff0 <__aeabi_d2f+0x70>
 8001f9c:	4b37      	ldr	r3, [pc, #220]	; (800207c <__aeabi_d2f+0xfc>)
 8001f9e:	18e7      	adds	r7, r4, r3
 8001fa0:	2ffe      	cmp	r7, #254	; 0xfe
 8001fa2:	dc1c      	bgt.n	8001fde <__aeabi_d2f+0x5e>
 8001fa4:	2f00      	cmp	r7, #0
 8001fa6:	dd3b      	ble.n	8002020 <__aeabi_d2f+0xa0>
 8001fa8:	0180      	lsls	r0, r0, #6
 8001faa:	1e43      	subs	r3, r0, #1
 8001fac:	4198      	sbcs	r0, r3
 8001fae:	2207      	movs	r2, #7
 8001fb0:	00f3      	lsls	r3, r6, #3
 8001fb2:	0f6d      	lsrs	r5, r5, #29
 8001fb4:	4303      	orrs	r3, r0
 8001fb6:	432b      	orrs	r3, r5
 8001fb8:	401a      	ands	r2, r3
 8001fba:	2a00      	cmp	r2, #0
 8001fbc:	d004      	beq.n	8001fc8 <__aeabi_d2f+0x48>
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	2a04      	cmp	r2, #4
 8001fc4:	d000      	beq.n	8001fc8 <__aeabi_d2f+0x48>
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	2280      	movs	r2, #128	; 0x80
 8001fca:	04d2      	lsls	r2, r2, #19
 8001fcc:	401a      	ands	r2, r3
 8001fce:	d024      	beq.n	800201a <__aeabi_d2f+0x9a>
 8001fd0:	3701      	adds	r7, #1
 8001fd2:	b2fa      	uxtb	r2, r7
 8001fd4:	2fff      	cmp	r7, #255	; 0xff
 8001fd6:	d002      	beq.n	8001fde <__aeabi_d2f+0x5e>
 8001fd8:	019b      	lsls	r3, r3, #6
 8001fda:	0a58      	lsrs	r0, r3, #9
 8001fdc:	e001      	b.n	8001fe2 <__aeabi_d2f+0x62>
 8001fde:	22ff      	movs	r2, #255	; 0xff
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	0240      	lsls	r0, r0, #9
 8001fe4:	05d2      	lsls	r2, r2, #23
 8001fe6:	0a40      	lsrs	r0, r0, #9
 8001fe8:	07c9      	lsls	r1, r1, #31
 8001fea:	4310      	orrs	r0, r2
 8001fec:	4308      	orrs	r0, r1
 8001fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff0:	4335      	orrs	r5, r6
 8001ff2:	2c00      	cmp	r4, #0
 8001ff4:	d104      	bne.n	8002000 <__aeabi_d2f+0x80>
 8001ff6:	2d00      	cmp	r5, #0
 8001ff8:	d10a      	bne.n	8002010 <__aeabi_d2f+0x90>
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	e7f0      	b.n	8001fe2 <__aeabi_d2f+0x62>
 8002000:	2d00      	cmp	r5, #0
 8002002:	d0ec      	beq.n	8001fde <__aeabi_d2f+0x5e>
 8002004:	2080      	movs	r0, #128	; 0x80
 8002006:	03c0      	lsls	r0, r0, #15
 8002008:	4330      	orrs	r0, r6
 800200a:	22ff      	movs	r2, #255	; 0xff
 800200c:	e7e9      	b.n	8001fe2 <__aeabi_d2f+0x62>
 800200e:	2400      	movs	r4, #0
 8002010:	2300      	movs	r3, #0
 8002012:	025b      	lsls	r3, r3, #9
 8002014:	0a58      	lsrs	r0, r3, #9
 8002016:	b2e2      	uxtb	r2, r4
 8002018:	e7e3      	b.n	8001fe2 <__aeabi_d2f+0x62>
 800201a:	08db      	lsrs	r3, r3, #3
 800201c:	003c      	movs	r4, r7
 800201e:	e7f8      	b.n	8002012 <__aeabi_d2f+0x92>
 8002020:	003b      	movs	r3, r7
 8002022:	3317      	adds	r3, #23
 8002024:	dbf3      	blt.n	800200e <__aeabi_d2f+0x8e>
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	041b      	lsls	r3, r3, #16
 800202a:	4333      	orrs	r3, r6
 800202c:	261e      	movs	r6, #30
 800202e:	1bf6      	subs	r6, r6, r7
 8002030:	2e1f      	cmp	r6, #31
 8002032:	dd14      	ble.n	800205e <__aeabi_d2f+0xde>
 8002034:	2202      	movs	r2, #2
 8002036:	4252      	negs	r2, r2
 8002038:	1bd7      	subs	r7, r2, r7
 800203a:	001a      	movs	r2, r3
 800203c:	40fa      	lsrs	r2, r7
 800203e:	0017      	movs	r7, r2
 8002040:	2e20      	cmp	r6, #32
 8002042:	d004      	beq.n	800204e <__aeabi_d2f+0xce>
 8002044:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <__aeabi_d2f+0x100>)
 8002046:	4694      	mov	ip, r2
 8002048:	4464      	add	r4, ip
 800204a:	40a3      	lsls	r3, r4
 800204c:	431d      	orrs	r5, r3
 800204e:	002b      	movs	r3, r5
 8002050:	1e5d      	subs	r5, r3, #1
 8002052:	41ab      	sbcs	r3, r5
 8002054:	2207      	movs	r2, #7
 8002056:	433b      	orrs	r3, r7
 8002058:	401a      	ands	r2, r3
 800205a:	2700      	movs	r7, #0
 800205c:	e7ad      	b.n	8001fba <__aeabi_d2f+0x3a>
 800205e:	4a09      	ldr	r2, [pc, #36]	; (8002084 <__aeabi_d2f+0x104>)
 8002060:	0028      	movs	r0, r5
 8002062:	18a2      	adds	r2, r4, r2
 8002064:	4095      	lsls	r5, r2
 8002066:	4093      	lsls	r3, r2
 8002068:	1e6c      	subs	r4, r5, #1
 800206a:	41a5      	sbcs	r5, r4
 800206c:	40f0      	lsrs	r0, r6
 800206e:	2207      	movs	r2, #7
 8002070:	432b      	orrs	r3, r5
 8002072:	4303      	orrs	r3, r0
 8002074:	401a      	ands	r2, r3
 8002076:	2700      	movs	r7, #0
 8002078:	e79f      	b.n	8001fba <__aeabi_d2f+0x3a>
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	fffffc80 	.word	0xfffffc80
 8002080:	fffffca2 	.word	0xfffffca2
 8002084:	fffffc82 	.word	0xfffffc82

08002088 <__clzsi2>:
 8002088:	211c      	movs	r1, #28
 800208a:	2301      	movs	r3, #1
 800208c:	041b      	lsls	r3, r3, #16
 800208e:	4298      	cmp	r0, r3
 8002090:	d301      	bcc.n	8002096 <__clzsi2+0xe>
 8002092:	0c00      	lsrs	r0, r0, #16
 8002094:	3910      	subs	r1, #16
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	4298      	cmp	r0, r3
 800209a:	d301      	bcc.n	80020a0 <__clzsi2+0x18>
 800209c:	0a00      	lsrs	r0, r0, #8
 800209e:	3908      	subs	r1, #8
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	4298      	cmp	r0, r3
 80020a4:	d301      	bcc.n	80020aa <__clzsi2+0x22>
 80020a6:	0900      	lsrs	r0, r0, #4
 80020a8:	3904      	subs	r1, #4
 80020aa:	a202      	add	r2, pc, #8	; (adr r2, 80020b4 <__clzsi2+0x2c>)
 80020ac:	5c10      	ldrb	r0, [r2, r0]
 80020ae:	1840      	adds	r0, r0, r1
 80020b0:	4770      	bx	lr
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	02020304 	.word	0x02020304
 80020b8:	01010101 	.word	0x01010101
	...

080020c4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b095      	sub	sp, #84	; 0x54
 80020c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ca:	2420      	movs	r4, #32
 80020cc:	193b      	adds	r3, r7, r4
 80020ce:	0018      	movs	r0, r3
 80020d0:	2330      	movs	r3, #48	; 0x30
 80020d2:	001a      	movs	r2, r3
 80020d4:	2100      	movs	r1, #0
 80020d6:	f002 fe55 	bl	8004d84 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020da:	2310      	movs	r3, #16
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	0018      	movs	r0, r3
 80020e0:	2310      	movs	r3, #16
 80020e2:	001a      	movs	r2, r3
 80020e4:	2100      	movs	r1, #0
 80020e6:	f002 fe4d 	bl	8004d84 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020ea:	003b      	movs	r3, r7
 80020ec:	0018      	movs	r0, r3
 80020ee:	2310      	movs	r3, #16
 80020f0:	001a      	movs	r2, r3
 80020f2:	2100      	movs	r1, #0
 80020f4:	f002 fe46 	bl	8004d84 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80020f8:	0021      	movs	r1, r4
 80020fa:	187b      	adds	r3, r7, r1
 80020fc:	2212      	movs	r2, #18
 80020fe:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002100:	187b      	adds	r3, r7, r1
 8002102:	2201      	movs	r2, #1
 8002104:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002106:	187b      	adds	r3, r7, r1
 8002108:	2201      	movs	r2, #1
 800210a:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800210c:	187b      	adds	r3, r7, r1
 800210e:	2210      	movs	r2, #16
 8002110:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002112:	187b      	adds	r3, r7, r1
 8002114:	2210      	movs	r2, #16
 8002116:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002118:	187b      	adds	r3, r7, r1
 800211a:	2200      	movs	r2, #0
 800211c:	621a      	str	r2, [r3, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800211e:	187b      	adds	r3, r7, r1
 8002120:	0018      	movs	r0, r3
 8002122:	f001 fced 	bl	8003b00 <HAL_RCC_OscConfig>
 8002126:	1e03      	subs	r3, r0, #0
 8002128:	d001      	beq.n	800212e <SystemClock_Config+0x6a>
	{
		Error_Handler();
 800212a:	f000 f929 	bl	8002380 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800212e:	2110      	movs	r1, #16
 8002130:	187b      	adds	r3, r7, r1
 8002132:	2207      	movs	r2, #7
 8002134:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002136:	187b      	adds	r3, r7, r1
 8002138:	2200      	movs	r2, #0
 800213a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800213c:	187b      	adds	r3, r7, r1
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002142:	187b      	adds	r3, r7, r1
 8002144:	2200      	movs	r2, #0
 8002146:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002148:	187b      	adds	r3, r7, r1
 800214a:	2100      	movs	r1, #0
 800214c:	0018      	movs	r0, r3
 800214e:	f001 fff3 	bl	8004138 <HAL_RCC_ClockConfig>
 8002152:	1e03      	subs	r3, r0, #0
 8002154:	d001      	beq.n	800215a <SystemClock_Config+0x96>
	{
		Error_Handler();
 8002156:	f000 f913 	bl	8002380 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800215a:	003b      	movs	r3, r7
 800215c:	2201      	movs	r2, #1
 800215e:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002160:	003b      	movs	r3, r7
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002166:	003b      	movs	r3, r7
 8002168:	0018      	movs	r0, r3
 800216a:	f002 f937 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 800216e:	1e03      	subs	r3, r0, #0
 8002170:	d001      	beq.n	8002176 <SystemClock_Config+0xb2>
	{
		Error_Handler();
 8002172:	f000 f905 	bl	8002380 <Error_Handler>
	}
}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	46bd      	mov	sp, r7
 800217a:	b015      	add	sp, #84	; 0x54
 800217c:	bd90      	pop	{r4, r7, pc}
	...

08002180 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
void MX_ADC_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	0018      	movs	r0, r3
 800218a:	230c      	movs	r3, #12
 800218c:	001a      	movs	r2, r3
 800218e:	2100      	movs	r1, #0
 8002190:	f002 fdf8 	bl	8004d84 <memset>
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8002194:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <MX_ADC_Init+0xc8>)
 8002196:	4a2d      	ldr	r2, [pc, #180]	; (800224c <MX_ADC_Init+0xcc>)
 8002198:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800219a:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <MX_ADC_Init+0xc8>)
 800219c:	2200      	movs	r2, #0
 800219e:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <MX_ADC_Init+0xc8>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021a6:	4b28      	ldr	r3, [pc, #160]	; (8002248 <MX_ADC_Init+0xc8>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80021ac:	4b26      	ldr	r3, [pc, #152]	; (8002248 <MX_ADC_Init+0xc8>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80021b2:	4b25      	ldr	r3, [pc, #148]	; (8002248 <MX_ADC_Init+0xc8>)
 80021b4:	2208      	movs	r2, #8
 80021b6:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 80021b8:	4b23      	ldr	r3, [pc, #140]	; (8002248 <MX_ADC_Init+0xc8>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <MX_ADC_Init+0xc8>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = ENABLE;
 80021c4:	4b20      	ldr	r3, [pc, #128]	; (8002248 <MX_ADC_Init+0xc8>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	769a      	strb	r2, [r3, #26]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80021ca:	4b1f      	ldr	r3, [pc, #124]	; (8002248 <MX_ADC_Init+0xc8>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	76da      	strb	r2, [r3, #27]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021d0:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <MX_ADC_Init+0xc8>)
 80021d2:	22c2      	movs	r2, #194	; 0xc2
 80021d4:	32ff      	adds	r2, #255	; 0xff
 80021d6:	61da      	str	r2, [r3, #28]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021d8:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <MX_ADC_Init+0xc8>)
 80021da:	2200      	movs	r2, #0
 80021dc:	621a      	str	r2, [r3, #32]
	hadc.Init.DMAContinuousRequests = ENABLE;
 80021de:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <MX_ADC_Init+0xc8>)
 80021e0:	2224      	movs	r2, #36	; 0x24
 80021e2:	2101      	movs	r1, #1
 80021e4:	5499      	strb	r1, [r3, r2]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80021e6:	4b18      	ldr	r3, [pc, #96]	; (8002248 <MX_ADC_Init+0xc8>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 80021ec:	4b16      	ldr	r3, [pc, #88]	; (8002248 <MX_ADC_Init+0xc8>)
 80021ee:	0018      	movs	r0, r3
 80021f0:	f000 fcb2 	bl	8002b58 <HAL_ADC_Init>
 80021f4:	1e03      	subs	r3, r0, #0
 80021f6:	d001      	beq.n	80021fc <MX_ADC_Init+0x7c>
	{
		Error_Handler();
 80021f8:	f000 f8c2 	bl	8002380 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	2280      	movs	r2, #128	; 0x80
 8002206:	0152      	lsls	r2, r2, #5
 8002208:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	2280      	movs	r2, #128	; 0x80
 800220e:	0552      	lsls	r2, r2, #21
 8002210:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002212:	1d3a      	adds	r2, r7, #4
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <MX_ADC_Init+0xc8>)
 8002216:	0011      	movs	r1, r2
 8002218:	0018      	movs	r0, r3
 800221a:	f000 fe77 	bl	8002f0c <HAL_ADC_ConfigChannel>
 800221e:	1e03      	subs	r3, r0, #0
 8002220:	d001      	beq.n	8002226 <MX_ADC_Init+0xa6>
	{
		Error_Handler();
 8002222:	f000 f8ad 	bl	8002380 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	2201      	movs	r2, #1
 800222a:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800222c:	1d3a      	adds	r2, r7, #4
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <MX_ADC_Init+0xc8>)
 8002230:	0011      	movs	r1, r2
 8002232:	0018      	movs	r0, r3
 8002234:	f000 fe6a 	bl	8002f0c <HAL_ADC_ConfigChannel>
 8002238:	1e03      	subs	r3, r0, #0
 800223a:	d001      	beq.n	8002240 <MX_ADC_Init+0xc0>
	{
		Error_Handler();
 800223c:	f000 f8a0 	bl	8002380 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b004      	add	sp, #16
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200000f4 	.word	0x200000f4
 800224c:	40012400 	.word	0x40012400

08002250 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART1_UART_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002254:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <MX_USART1_UART_Init+0x58>)
 8002256:	4a15      	ldr	r2, [pc, #84]	; (80022ac <MX_USART1_UART_Init+0x5c>)
 8002258:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 921600;
 800225a:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <MX_USART1_UART_Init+0x58>)
 800225c:	22e1      	movs	r2, #225	; 0xe1
 800225e:	0312      	lsls	r2, r2, #12
 8002260:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <MX_USART1_UART_Init+0x58>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <MX_USART1_UART_Init+0x58>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <MX_USART1_UART_Init+0x58>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <MX_USART1_UART_Init+0x58>)
 8002276:	220c      	movs	r2, #12
 8002278:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <MX_USART1_UART_Init+0x58>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <MX_USART1_UART_Init+0x58>)
 8002282:	2200      	movs	r2, #0
 8002284:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <MX_USART1_UART_Init+0x58>)
 8002288:	2200      	movs	r2, #0
 800228a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <MX_USART1_UART_Init+0x58>)
 800228e:	2200      	movs	r2, #0
 8002290:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <MX_USART1_UART_Init+0x58>)
 8002294:	0018      	movs	r0, r3
 8002296:	f002 f96f 	bl	8004578 <HAL_UART_Init>
 800229a:	1e03      	subs	r3, r0, #0
 800229c:	d001      	beq.n	80022a2 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 800229e:	f000 f86f 	bl	8002380 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000030 	.word	0x20000030
 80022ac:	40013800 	.word	0x40013800

080022b0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
void MX_DMA_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <MX_DMA_Init+0x38>)
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <MX_DMA_Init+0x38>)
 80022bc:	2101      	movs	r1, #1
 80022be:	430a      	orrs	r2, r1
 80022c0:	615a      	str	r2, [r3, #20]
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <MX_DMA_Init+0x38>)
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	2201      	movs	r2, #1
 80022c8:	4013      	ands	r3, r2
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2100      	movs	r1, #0
 80022d2:	2009      	movs	r0, #9
 80022d4:	f001 f8bc 	bl	8003450 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022d8:	2009      	movs	r0, #9
 80022da:	f001 f8ce 	bl	800347a <HAL_NVIC_EnableIRQ>

}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b002      	add	sp, #8
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	40021000 	.word	0x40021000

080022ec <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f2:	240c      	movs	r4, #12
 80022f4:	193b      	adds	r3, r7, r4
 80022f6:	0018      	movs	r0, r3
 80022f8:	2314      	movs	r3, #20
 80022fa:	001a      	movs	r2, r3
 80022fc:	2100      	movs	r1, #0
 80022fe:	f002 fd41 	bl	8004d84 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <MX_GPIO_Init+0x8c>)
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <MX_GPIO_Init+0x8c>)
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	0289      	lsls	r1, r1, #10
 800230c:	430a      	orrs	r2, r1
 800230e:	615a      	str	r2, [r3, #20]
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <MX_GPIO_Init+0x8c>)
 8002312:	695a      	ldr	r2, [r3, #20]
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	029b      	lsls	r3, r3, #10
 8002318:	4013      	ands	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <MX_GPIO_Init+0x8c>)
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <MX_GPIO_Init+0x8c>)
 8002324:	2180      	movs	r1, #128	; 0x80
 8002326:	02c9      	lsls	r1, r1, #11
 8002328:	430a      	orrs	r2, r1
 800232a:	615a      	str	r2, [r3, #20]
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <MX_GPIO_Init+0x8c>)
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	02db      	lsls	r3, r3, #11
 8002334:	4013      	ands	r3, r2
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	480f      	ldr	r0, [pc, #60]	; (800237c <MX_GPIO_Init+0x90>)
 8002340:	2200      	movs	r2, #0
 8002342:	0019      	movs	r1, r3
 8002344:	f001 fbbe 	bl	8003ac4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002348:	193b      	adds	r3, r7, r4
 800234a:	2280      	movs	r2, #128	; 0x80
 800234c:	0212      	lsls	r2, r2, #8
 800234e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002350:	193b      	adds	r3, r7, r4
 8002352:	2201      	movs	r2, #1
 8002354:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	193b      	adds	r3, r7, r4
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	193b      	adds	r3, r7, r4
 800235e:	2200      	movs	r2, #0
 8002360:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002362:	193b      	adds	r3, r7, r4
 8002364:	4a05      	ldr	r2, [pc, #20]	; (800237c <MX_GPIO_Init+0x90>)
 8002366:	0019      	movs	r1, r3
 8002368:	0010      	movs	r0, r2
 800236a:	f001 fa3b 	bl	80037e4 <HAL_GPIO_Init>

}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	46bd      	mov	sp, r7
 8002372:	b009      	add	sp, #36	; 0x24
 8002374:	bd90      	pop	{r4, r7, pc}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	40021000 	.word	0x40021000
 800237c:	48000400 	.word	0x48000400

08002380 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002384:	46c0      	nop			; (mov r8, r8)
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <atan2_approx>:

//#define HIGH_ACCURACY_SIN
float theta_m_prev;

float atan2_approx(float sinVal, float cosVal)
{
 800238c:	b5b0      	push	{r4, r5, r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
	float abs_s = sinVal;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
	if(abs_s < 0)
 800239a:	2100      	movs	r1, #0
 800239c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800239e:	f7fd ff51 	bl	8000244 <__aeabi_fcmplt>
 80023a2:	1e03      	subs	r3, r0, #0
 80023a4:	d004      	beq.n	80023b0 <atan2_approx+0x24>
		abs_s = -abs_s;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	2280      	movs	r2, #128	; 0x80
 80023aa:	0612      	lsls	r2, r2, #24
 80023ac:	4053      	eors	r3, r2
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
	float abs_c = cosVal;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	623b      	str	r3, [r7, #32]
	if(abs_c < 0)
 80023b4:	2100      	movs	r1, #0
 80023b6:	6a38      	ldr	r0, [r7, #32]
 80023b8:	f7fd ff44 	bl	8000244 <__aeabi_fcmplt>
 80023bc:	1e03      	subs	r3, r0, #0
 80023be:	d004      	beq.n	80023ca <atan2_approx+0x3e>
		abs_c = -abs_c;
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	2280      	movs	r2, #128	; 0x80
 80023c4:	0612      	lsls	r2, r2, #24
 80023c6:	4053      	eors	r3, r2
 80023c8:	623b      	str	r3, [r7, #32]
	float min_v = abs_c;
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	61fb      	str	r3, [r7, #28]
	float max_v = abs_s;
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	61bb      	str	r3, [r7, #24]
	if(abs_s < abs_c)
 80023d2:	6a39      	ldr	r1, [r7, #32]
 80023d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023d6:	f7fd ff35 	bl	8000244 <__aeabi_fcmplt>
 80023da:	1e03      	subs	r3, r0, #0
 80023dc:	d003      	beq.n	80023e6 <atan2_approx+0x5a>
	{
		min_v = abs_s;
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	61fb      	str	r3, [r7, #28]
		max_v = abs_c;
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	61bb      	str	r3, [r7, #24]
	}
	float a = min_v/max_v;
 80023e6:	69b9      	ldr	r1, [r7, #24]
 80023e8:	69f8      	ldr	r0, [r7, #28]
 80023ea:	f7fd ff53 	bl	8000294 <__aeabi_fdiv>
 80023ee:	1c03      	adds	r3, r0, #0
 80023f0:	613b      	str	r3, [r7, #16]
	float sv = a*a;
 80023f2:	6939      	ldr	r1, [r7, #16]
 80023f4:	6938      	ldr	r0, [r7, #16]
 80023f6:	f7fe f925 	bl	8000644 <__aeabi_fmul>
 80023fa:	1c03      	adds	r3, r0, #0
 80023fc:	60fb      	str	r3, [r7, #12]
	float r = ((-0.0464964749 * sv + 0.15931422)*sv- 0.327622764) * sv * a + a;
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f7ff fd6c 	bl	8001edc <__aeabi_f2d>
 8002404:	4a48      	ldr	r2, [pc, #288]	; (8002528 <atan2_approx+0x19c>)
 8002406:	4b49      	ldr	r3, [pc, #292]	; (800252c <atan2_approx+0x1a0>)
 8002408:	f7fe ff78 	bl	80012fc <__aeabi_dmul>
 800240c:	0003      	movs	r3, r0
 800240e:	000c      	movs	r4, r1
 8002410:	0018      	movs	r0, r3
 8002412:	0021      	movs	r1, r4
 8002414:	4a46      	ldr	r2, [pc, #280]	; (8002530 <atan2_approx+0x1a4>)
 8002416:	4b47      	ldr	r3, [pc, #284]	; (8002534 <atan2_approx+0x1a8>)
 8002418:	f7fe fc54 	bl	8000cc4 <__aeabi_dadd>
 800241c:	0003      	movs	r3, r0
 800241e:	000c      	movs	r4, r1
 8002420:	0025      	movs	r5, r4
 8002422:	001c      	movs	r4, r3
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f7ff fd59 	bl	8001edc <__aeabi_f2d>
 800242a:	0002      	movs	r2, r0
 800242c:	000b      	movs	r3, r1
 800242e:	0020      	movs	r0, r4
 8002430:	0029      	movs	r1, r5
 8002432:	f7fe ff63 	bl	80012fc <__aeabi_dmul>
 8002436:	0003      	movs	r3, r0
 8002438:	000c      	movs	r4, r1
 800243a:	0018      	movs	r0, r3
 800243c:	0021      	movs	r1, r4
 800243e:	4a3e      	ldr	r2, [pc, #248]	; (8002538 <atan2_approx+0x1ac>)
 8002440:	4b3e      	ldr	r3, [pc, #248]	; (800253c <atan2_approx+0x1b0>)
 8002442:	f7ff f9cd 	bl	80017e0 <__aeabi_dsub>
 8002446:	0003      	movs	r3, r0
 8002448:	000c      	movs	r4, r1
 800244a:	0025      	movs	r5, r4
 800244c:	001c      	movs	r4, r3
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f7ff fd44 	bl	8001edc <__aeabi_f2d>
 8002454:	0002      	movs	r2, r0
 8002456:	000b      	movs	r3, r1
 8002458:	0020      	movs	r0, r4
 800245a:	0029      	movs	r1, r5
 800245c:	f7fe ff4e 	bl	80012fc <__aeabi_dmul>
 8002460:	0003      	movs	r3, r0
 8002462:	000c      	movs	r4, r1
 8002464:	0025      	movs	r5, r4
 8002466:	001c      	movs	r4, r3
 8002468:	6938      	ldr	r0, [r7, #16]
 800246a:	f7ff fd37 	bl	8001edc <__aeabi_f2d>
 800246e:	0002      	movs	r2, r0
 8002470:	000b      	movs	r3, r1
 8002472:	0020      	movs	r0, r4
 8002474:	0029      	movs	r1, r5
 8002476:	f7fe ff41 	bl	80012fc <__aeabi_dmul>
 800247a:	0003      	movs	r3, r0
 800247c:	000c      	movs	r4, r1
 800247e:	0025      	movs	r5, r4
 8002480:	001c      	movs	r4, r3
 8002482:	6938      	ldr	r0, [r7, #16]
 8002484:	f7ff fd2a 	bl	8001edc <__aeabi_f2d>
 8002488:	0002      	movs	r2, r0
 800248a:	000b      	movs	r3, r1
 800248c:	0020      	movs	r0, r4
 800248e:	0029      	movs	r1, r5
 8002490:	f7fe fc18 	bl	8000cc4 <__aeabi_dadd>
 8002494:	0003      	movs	r3, r0
 8002496:	000c      	movs	r4, r1
 8002498:	0018      	movs	r0, r3
 800249a:	0021      	movs	r1, r4
 800249c:	f7ff fd70 	bl	8001f80 <__aeabi_d2f>
 80024a0:	1c03      	adds	r3, r0, #0
 80024a2:	617b      	str	r3, [r7, #20]
	if(abs_s > abs_c)
 80024a4:	6a39      	ldr	r1, [r7, #32]
 80024a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024a8:	f7fd fee0 	bl	800026c <__aeabi_fcmpgt>
 80024ac:	1e03      	subs	r3, r0, #0
 80024ae:	d012      	beq.n	80024d6 <atan2_approx+0x14a>
		r = 1.57079637 -r;
 80024b0:	6978      	ldr	r0, [r7, #20]
 80024b2:	f7ff fd13 	bl	8001edc <__aeabi_f2d>
 80024b6:	0003      	movs	r3, r0
 80024b8:	000c      	movs	r4, r1
 80024ba:	001a      	movs	r2, r3
 80024bc:	0023      	movs	r3, r4
 80024be:	4820      	ldr	r0, [pc, #128]	; (8002540 <atan2_approx+0x1b4>)
 80024c0:	4920      	ldr	r1, [pc, #128]	; (8002544 <atan2_approx+0x1b8>)
 80024c2:	f7ff f98d 	bl	80017e0 <__aeabi_dsub>
 80024c6:	0003      	movs	r3, r0
 80024c8:	000c      	movs	r4, r1
 80024ca:	0018      	movs	r0, r3
 80024cc:	0021      	movs	r1, r4
 80024ce:	f7ff fd57 	bl	8001f80 <__aeabi_d2f>
 80024d2:	1c03      	adds	r3, r0, #0
 80024d4:	617b      	str	r3, [r7, #20]
	if(cosVal < 0)
 80024d6:	2100      	movs	r1, #0
 80024d8:	6838      	ldr	r0, [r7, #0]
 80024da:	f7fd feb3 	bl	8000244 <__aeabi_fcmplt>
 80024de:	1e03      	subs	r3, r0, #0
 80024e0:	d012      	beq.n	8002508 <atan2_approx+0x17c>
		r = 3.14159274 - r;
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f7ff fcfa 	bl	8001edc <__aeabi_f2d>
 80024e8:	0003      	movs	r3, r0
 80024ea:	000c      	movs	r4, r1
 80024ec:	001a      	movs	r2, r3
 80024ee:	0023      	movs	r3, r4
 80024f0:	4813      	ldr	r0, [pc, #76]	; (8002540 <atan2_approx+0x1b4>)
 80024f2:	4915      	ldr	r1, [pc, #84]	; (8002548 <atan2_approx+0x1bc>)
 80024f4:	f7ff f974 	bl	80017e0 <__aeabi_dsub>
 80024f8:	0003      	movs	r3, r0
 80024fa:	000c      	movs	r4, r1
 80024fc:	0018      	movs	r0, r3
 80024fe:	0021      	movs	r1, r4
 8002500:	f7ff fd3e 	bl	8001f80 <__aeabi_d2f>
 8002504:	1c03      	adds	r3, r0, #0
 8002506:	617b      	str	r3, [r7, #20]
	if(sinVal < 0)
 8002508:	2100      	movs	r1, #0
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fd fe9a 	bl	8000244 <__aeabi_fcmplt>
 8002510:	1e03      	subs	r3, r0, #0
 8002512:	d004      	beq.n	800251e <atan2_approx+0x192>
		r = -r;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2280      	movs	r2, #128	; 0x80
 8002518:	0612      	lsls	r2, r2, #24
 800251a:	4053      	eors	r3, r2
 800251c:	617b      	str	r3, [r7, #20]
	return r;
 800251e:	697b      	ldr	r3, [r7, #20]
}
 8002520:	1c18      	adds	r0, r3, #0
 8002522:	46bd      	mov	sp, r7
 8002524:	b00a      	add	sp, #40	; 0x28
 8002526:	bdb0      	pop	{r4, r5, r7, pc}
 8002528:	ce264a34 	.word	0xce264a34
 800252c:	bfa7ce62 	.word	0xbfa7ce62
 8002530:	8a58082a 	.word	0x8a58082a
 8002534:	3fc46468 	.word	0x3fc46468
 8002538:	78338730 	.word	0x78338730
 800253c:	3fd4f7c5 	.word	0x3fd4f7c5
 8002540:	5fdd3550 	.word	0x5fdd3550
 8002544:	3ff921fb 	.word	0x3ff921fb
 8002548:	400921fb 	.word	0x400921fb

0800254c <theta_abs_rad>:
{
	return sin_fast(theta + HALF_PI);
}

float theta_abs_rad()
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
	int16_t sinVal = dma_adc_raw[ADC_SIN_CHAN]-sin_mid;
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <theta_abs_rad+0x5c>)
 8002554:	891a      	ldrh	r2, [r3, #8]
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <theta_abs_rad+0x60>)
 8002558:	2100      	movs	r1, #0
 800255a:	5e5b      	ldrsh	r3, [r3, r1]
 800255c:	b29b      	uxth	r3, r3
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	b29a      	uxth	r2, r3
 8002562:	1dbb      	adds	r3, r7, #6
 8002564:	801a      	strh	r2, [r3, #0]
	int16_t cosVal = dma_adc_raw[ADC_COS_CHAN]-cos_mid;
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <theta_abs_rad+0x5c>)
 8002568:	88da      	ldrh	r2, [r3, #6]
 800256a:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <theta_abs_rad+0x64>)
 800256c:	2100      	movs	r1, #0
 800256e:	5e5b      	ldrsh	r3, [r3, r1]
 8002570:	b29b      	uxth	r3, r3
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	b29a      	uxth	r2, r3
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	801a      	strh	r2, [r3, #0]
//	return atan2((float)sinVal,(float)cosVal);
	return atan2_approx((float)sinVal,(float)cosVal);
 800257a:	1dbb      	adds	r3, r7, #6
 800257c:	2200      	movs	r2, #0
 800257e:	5e9b      	ldrsh	r3, [r3, r2]
 8002580:	0018      	movs	r0, r3
 8002582:	f7fe fb55 	bl	8000c30 <__aeabi_i2f>
 8002586:	1c04      	adds	r4, r0, #0
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	2200      	movs	r2, #0
 800258c:	5e9b      	ldrsh	r3, [r3, r2]
 800258e:	0018      	movs	r0, r3
 8002590:	f7fe fb4e 	bl	8000c30 <__aeabi_i2f>
 8002594:	1c03      	adds	r3, r0, #0
 8002596:	1c19      	adds	r1, r3, #0
 8002598:	1c20      	adds	r0, r4, #0
 800259a:	f7ff fef7 	bl	800238c <atan2_approx>
 800259e:	1c03      	adds	r3, r0, #0
}
 80025a0:	1c18      	adds	r0, r3, #0
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b003      	add	sp, #12
 80025a6:	bd90      	pop	{r4, r7, pc}
 80025a8:	2000002c 	.word	0x2000002c
 80025ac:	20000000 	.word	0x20000000
 80025b0:	20000002 	.word	0x20000002

080025b4 <fmod_2pi>:

/*
 * Helper Function to quickly perform floating point mod of two pi
 */
float fmod_2pi(float in)
{
 80025b4:	b5b0      	push	{r4, r5, r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	uint8_t aneg = 0;
 80025bc:	2317      	movs	r3, #23
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
	float in_eval = in;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	613b      	str	r3, [r7, #16]
	if(in < 0)
 80025c8:	2100      	movs	r1, #0
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fd fe3a 	bl	8000244 <__aeabi_fcmplt>
 80025d0:	1e03      	subs	r3, r0, #0
 80025d2:	d008      	beq.n	80025e6 <fmod_2pi+0x32>
	{
		aneg = 1;
 80025d4:	2317      	movs	r3, #23
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
		in_eval = -in;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2280      	movs	r2, #128	; 0x80
 80025e0:	0612      	lsls	r2, r2, #24
 80025e2:	4053      	eors	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
	}
	float fv = (float)((int)(in_eval*ONE_BY_TWO_PI));
 80025e6:	6938      	ldr	r0, [r7, #16]
 80025e8:	f7ff fc78 	bl	8001edc <__aeabi_f2d>
 80025ec:	4a1e      	ldr	r2, [pc, #120]	; (8002668 <fmod_2pi+0xb4>)
 80025ee:	4b1f      	ldr	r3, [pc, #124]	; (800266c <fmod_2pi+0xb8>)
 80025f0:	f7fe fe84 	bl	80012fc <__aeabi_dmul>
 80025f4:	0003      	movs	r3, r0
 80025f6:	000c      	movs	r4, r1
 80025f8:	0018      	movs	r0, r3
 80025fa:	0021      	movs	r1, r4
 80025fc:	f7ff fc38 	bl	8001e70 <__aeabi_d2iz>
 8002600:	0003      	movs	r3, r0
 8002602:	0018      	movs	r0, r3
 8002604:	f7fe fb14 	bl	8000c30 <__aeabi_i2f>
 8002608:	1c03      	adds	r3, r0, #0
 800260a:	60fb      	str	r3, [r7, #12]
	if(aneg == 1)
 800260c:	2317      	movs	r3, #23
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d10a      	bne.n	800262c <fmod_2pi+0x78>
		fv = (-fv)-1;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2280      	movs	r2, #128	; 0x80
 800261a:	0612      	lsls	r2, r2, #24
 800261c:	4053      	eors	r3, r2
 800261e:	21fe      	movs	r1, #254	; 0xfe
 8002620:	0589      	lsls	r1, r1, #22
 8002622:	1c18      	adds	r0, r3, #0
 8002624:	f7fe f940 	bl	80008a8 <__aeabi_fsub>
 8002628:	1c03      	adds	r3, r0, #0
 800262a:	60fb      	str	r3, [r7, #12]
	return in-TWO_PI*fv;
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff fc55 	bl	8001edc <__aeabi_f2d>
 8002632:	0004      	movs	r4, r0
 8002634:	000d      	movs	r5, r1
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff fc50 	bl	8001edc <__aeabi_f2d>
 800263c:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <fmod_2pi+0xbc>)
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <fmod_2pi+0xc0>)
 8002640:	f7fe fe5c 	bl	80012fc <__aeabi_dmul>
 8002644:	0002      	movs	r2, r0
 8002646:	000b      	movs	r3, r1
 8002648:	0020      	movs	r0, r4
 800264a:	0029      	movs	r1, r5
 800264c:	f7ff f8c8 	bl	80017e0 <__aeabi_dsub>
 8002650:	0003      	movs	r3, r0
 8002652:	000c      	movs	r4, r1
 8002654:	0018      	movs	r0, r3
 8002656:	0021      	movs	r1, r4
 8002658:	f7ff fc92 	bl	8001f80 <__aeabi_d2f>
 800265c:	1c03      	adds	r3, r0, #0
}
 800265e:	1c18      	adds	r0, r3, #0
 8002660:	46bd      	mov	sp, r7
 8002662:	b006      	add	sp, #24
 8002664:	bdb0      	pop	{r4, r5, r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	113fc364 	.word	0x113fc364
 800266c:	3fc45f30 	.word	0x3fc45f30
 8002670:	54442eea 	.word	0x54442eea
 8002674:	401921fb 	.word	0x401921fb

08002678 <unwrap>:

float unwrap(float theta, float * prev_theta)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
	float dif = fmod_2pi(fmod_2pi(*prev_theta) - theta + PI);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	1c18      	adds	r0, r3, #0
 8002688:	f7ff ff94 	bl	80025b4 <fmod_2pi>
 800268c:	1c03      	adds	r3, r0, #0
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	1c18      	adds	r0, r3, #0
 8002692:	f7fe f909 	bl	80008a8 <__aeabi_fsub>
 8002696:	1c03      	adds	r3, r0, #0
 8002698:	1c18      	adds	r0, r3, #0
 800269a:	f7ff fc1f 	bl	8001edc <__aeabi_f2d>
 800269e:	4a22      	ldr	r2, [pc, #136]	; (8002728 <unwrap+0xb0>)
 80026a0:	4b22      	ldr	r3, [pc, #136]	; (800272c <unwrap+0xb4>)
 80026a2:	f7fe fb0f 	bl	8000cc4 <__aeabi_dadd>
 80026a6:	0003      	movs	r3, r0
 80026a8:	000c      	movs	r4, r1
 80026aa:	0018      	movs	r0, r3
 80026ac:	0021      	movs	r1, r4
 80026ae:	f7ff fc67 	bl	8001f80 <__aeabi_d2f>
 80026b2:	1c03      	adds	r3, r0, #0
 80026b4:	1c18      	adds	r0, r3, #0
 80026b6:	f7ff ff7d 	bl	80025b4 <fmod_2pi>
 80026ba:	1c03      	adds	r3, r0, #0
 80026bc:	60fb      	str	r3, [r7, #12]
	if(dif < 0)
 80026be:	2100      	movs	r1, #0
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f7fd fdbf 	bl	8000244 <__aeabi_fcmplt>
 80026c6:	1e03      	subs	r3, r0, #0
 80026c8:	d00e      	beq.n	80026e8 <unwrap+0x70>
		dif = dif + TWO_PI;
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f7ff fc06 	bl	8001edc <__aeabi_f2d>
 80026d0:	4a15      	ldr	r2, [pc, #84]	; (8002728 <unwrap+0xb0>)
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <unwrap+0xb8>)
 80026d4:	f7fe faf6 	bl	8000cc4 <__aeabi_dadd>
 80026d8:	0003      	movs	r3, r0
 80026da:	000c      	movs	r4, r1
 80026dc:	0018      	movs	r0, r3
 80026de:	0021      	movs	r1, r4
 80026e0:	f7ff fc4e 	bl	8001f80 <__aeabi_d2f>
 80026e4:	1c03      	adds	r3, r0, #0
 80026e6:	60fb      	str	r3, [r7, #12]
	dif = dif - PI;
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7ff fbf7 	bl	8001edc <__aeabi_f2d>
 80026ee:	4a0e      	ldr	r2, [pc, #56]	; (8002728 <unwrap+0xb0>)
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <unwrap+0xb4>)
 80026f2:	f7ff f875 	bl	80017e0 <__aeabi_dsub>
 80026f6:	0003      	movs	r3, r0
 80026f8:	000c      	movs	r4, r1
 80026fa:	0018      	movs	r0, r3
 80026fc:	0021      	movs	r1, r4
 80026fe:	f7ff fc3f 	bl	8001f80 <__aeabi_d2f>
 8002702:	1c03      	adds	r3, r0, #0
 8002704:	60fb      	str	r3, [r7, #12]
	float theta_ret = *prev_theta - dif;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68f9      	ldr	r1, [r7, #12]
 800270c:	1c18      	adds	r0, r3, #0
 800270e:	f7fe f8cb 	bl	80008a8 <__aeabi_fsub>
 8002712:	1c03      	adds	r3, r0, #0
 8002714:	60bb      	str	r3, [r7, #8]
	*prev_theta = theta_ret;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	601a      	str	r2, [r3, #0]
	return theta_ret;
 800271c:	68bb      	ldr	r3, [r7, #8]
}
 800271e:	1c18      	adds	r0, r3, #0
 8002720:	46bd      	mov	sp, r7
 8002722:	b005      	add	sp, #20
 8002724:	bd90      	pop	{r4, r7, pc}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	54442eea 	.word	0x54442eea
 800272c:	400921fb 	.word	0x400921fb
 8002730:	401921fb 	.word	0x401921fb

08002734 <main>:
	float v;
	uint8_t d[4];
}floatsend_t;

int main(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
	HAL_Init();
 800273a:	f000 f987 	bl	8002a4c <HAL_Init>
	SystemClock_Config();
 800273e:	f7ff fcc1 	bl	80020c4 <SystemClock_Config>
	MX_GPIO_Init();
 8002742:	f7ff fdd3 	bl	80022ec <MX_GPIO_Init>
	MX_DMA_Init();
 8002746:	f7ff fdb3 	bl	80022b0 <MX_DMA_Init>
	MX_ADC_Init();
 800274a:	f7ff fd19 	bl	8002180 <MX_ADC_Init>
	MX_USART1_UART_Init();
 800274e:	f7ff fd7f 	bl	8002250 <MX_USART1_UART_Init>

	HAL_ADC_Start_DMA(&hadc, (uint32_t * )dma_adc_raw, NUM_ADC);
 8002752:	491d      	ldr	r1, [pc, #116]	; (80027c8 <main+0x94>)
 8002754:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <main+0x98>)
 8002756:	2202      	movs	r2, #2
 8002758:	0018      	movs	r0, r3
 800275a:	f000 fb3d 	bl	8002dd8 <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	481b      	ldr	r0, [pc, #108]	; (80027d0 <main+0x9c>)
 8002764:	2201      	movs	r2, #1
 8002766:	0019      	movs	r1, r3
 8002768:	f001 f9ac 	bl	8003ac4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800276c:	2064      	movs	r0, #100	; 0x64
 800276e:	f000 f9d1 	bl	8002b14 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,0);
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	021b      	lsls	r3, r3, #8
 8002776:	4816      	ldr	r0, [pc, #88]	; (80027d0 <main+0x9c>)
 8002778:	2200      	movs	r2, #0
 800277a:	0019      	movs	r1, r3
 800277c:	f001 f9a2 	bl	8003ac4 <HAL_GPIO_WritePin>

	floatsend_t theta;
	float prev_theta = 0.f;
 8002780:	2300      	movs	r3, #0
 8002782:	603b      	str	r3, [r7, #0]

	uint32_t uart_disp_ts = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
	const uint32_t uart_update_period = 2;	//in ms
 8002788:	2302      	movs	r3, #2
 800278a:	60bb      	str	r3, [r7, #8]

	while (1)
	{
		theta.v = unwrap(theta_abs_rad(),&prev_theta);
 800278c:	f7ff fede 	bl	800254c <theta_abs_rad>
 8002790:	1c02      	adds	r2, r0, #0
 8002792:	003b      	movs	r3, r7
 8002794:	0019      	movs	r1, r3
 8002796:	1c10      	adds	r0, r2, #0
 8002798:	f7ff ff6e 	bl	8002678 <unwrap>
 800279c:	1c03      	adds	r3, r0, #0
 800279e:	607b      	str	r3, [r7, #4]

		if(HAL_GetTick() >= uart_disp_ts) //update frequency may be prone to jitters due to high calculation time of unwrap and atan2
 80027a0:	f000 f9ae 	bl	8002b00 <HAL_GetTick>
 80027a4:	0002      	movs	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d8ef      	bhi.n	800278c <main+0x58>
		{
			HAL_UART_Transmit(&huart1, theta.d, 4, uart_update_period);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	1d39      	adds	r1, r7, #4
 80027b0:	4808      	ldr	r0, [pc, #32]	; (80027d4 <main+0xa0>)
 80027b2:	2204      	movs	r2, #4
 80027b4:	f001 ff34 	bl	8004620 <HAL_UART_Transmit>
			uart_disp_ts = HAL_GetTick()+uart_update_period;	//1 = 1khz, 2 = 500Hz, 3 = 333Hz
 80027b8:	f000 f9a2 	bl	8002b00 <HAL_GetTick>
 80027bc:	0002      	movs	r2, r0
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	189b      	adds	r3, r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
		theta.v = unwrap(theta_abs_rad(),&prev_theta);
 80027c4:	e7e2      	b.n	800278c <main+0x58>
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	2000002c 	.word	0x2000002c
 80027cc:	200000f4 	.word	0x200000f4
 80027d0:	48000400 	.word	0x48000400
 80027d4:	20000030 	.word	0x20000030

080027d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027de:	4b0f      	ldr	r3, [pc, #60]	; (800281c <HAL_MspInit+0x44>)
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_MspInit+0x44>)
 80027e4:	2101      	movs	r1, #1
 80027e6:	430a      	orrs	r2, r1
 80027e8:	619a      	str	r2, [r3, #24]
 80027ea:	4b0c      	ldr	r3, [pc, #48]	; (800281c <HAL_MspInit+0x44>)
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2201      	movs	r2, #1
 80027f0:	4013      	ands	r3, r2
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_MspInit+0x44>)
 80027f8:	69da      	ldr	r2, [r3, #28]
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_MspInit+0x44>)
 80027fc:	2180      	movs	r1, #128	; 0x80
 80027fe:	0549      	lsls	r1, r1, #21
 8002800:	430a      	orrs	r2, r1
 8002802:	61da      	str	r2, [r3, #28]
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_MspInit+0x44>)
 8002806:	69da      	ldr	r2, [r3, #28]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	055b      	lsls	r3, r3, #21
 800280c:	4013      	ands	r3, r2
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	46bd      	mov	sp, r7
 8002816:	b002      	add	sp, #8
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	40021000 	.word	0x40021000

08002820 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	; 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	2314      	movs	r3, #20
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	0018      	movs	r0, r3
 800282e:	2314      	movs	r3, #20
 8002830:	001a      	movs	r2, r3
 8002832:	2100      	movs	r1, #0
 8002834:	f002 faa6 	bl	8004d84 <memset>
  if(hadc->Instance==ADC1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2d      	ldr	r2, [pc, #180]	; (80028f4 <HAL_ADC_MspInit+0xd4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d154      	bne.n	80028ec <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002842:	4b2d      	ldr	r3, [pc, #180]	; (80028f8 <HAL_ADC_MspInit+0xd8>)
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	4b2c      	ldr	r3, [pc, #176]	; (80028f8 <HAL_ADC_MspInit+0xd8>)
 8002848:	2180      	movs	r1, #128	; 0x80
 800284a:	0089      	lsls	r1, r1, #2
 800284c:	430a      	orrs	r2, r1
 800284e:	619a      	str	r2, [r3, #24]
 8002850:	4b29      	ldr	r3, [pc, #164]	; (80028f8 <HAL_ADC_MspInit+0xd8>)
 8002852:	699a      	ldr	r2, [r3, #24]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <HAL_ADC_MspInit+0xd8>)
 8002860:	695a      	ldr	r2, [r3, #20]
 8002862:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <HAL_ADC_MspInit+0xd8>)
 8002864:	2180      	movs	r1, #128	; 0x80
 8002866:	0289      	lsls	r1, r1, #10
 8002868:	430a      	orrs	r2, r1
 800286a:	615a      	str	r2, [r3, #20]
 800286c:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <HAL_ADC_MspInit+0xd8>)
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	029b      	lsls	r3, r3, #10
 8002874:	4013      	ands	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800287a:	2114      	movs	r1, #20
 800287c:	187b      	adds	r3, r7, r1
 800287e:	2203      	movs	r2, #3
 8002880:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002882:	187b      	adds	r3, r7, r1
 8002884:	2203      	movs	r2, #3
 8002886:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	187b      	adds	r3, r7, r1
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288e:	187a      	adds	r2, r7, r1
 8002890:	2390      	movs	r3, #144	; 0x90
 8002892:	05db      	lsls	r3, r3, #23
 8002894:	0011      	movs	r1, r2
 8002896:	0018      	movs	r0, r3
 8002898:	f000 ffa4 	bl	80037e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800289c:	4b17      	ldr	r3, [pc, #92]	; (80028fc <HAL_ADC_MspInit+0xdc>)
 800289e:	4a18      	ldr	r2, [pc, #96]	; (8002900 <HAL_ADC_MspInit+0xe0>)
 80028a0:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028a2:	4b16      	ldr	r3, [pc, #88]	; (80028fc <HAL_ADC_MspInit+0xdc>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <HAL_ADC_MspInit+0xdc>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <HAL_ADC_MspInit+0xdc>)
 80028b0:	2280      	movs	r2, #128	; 0x80
 80028b2:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <HAL_ADC_MspInit+0xdc>)
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	0052      	lsls	r2, r2, #1
 80028ba:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <HAL_ADC_MspInit+0xdc>)
 80028be:	2280      	movs	r2, #128	; 0x80
 80028c0:	00d2      	lsls	r2, r2, #3
 80028c2:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80028c4:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <HAL_ADC_MspInit+0xdc>)
 80028c6:	2220      	movs	r2, #32
 80028c8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <HAL_ADC_MspInit+0xdc>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <HAL_ADC_MspInit+0xdc>)
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 fdee 	bl	80034b4 <HAL_DMA_Init>
 80028d8:	1e03      	subs	r3, r0, #0
 80028da:	d001      	beq.n	80028e0 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80028dc:	f7ff fd50 	bl	8002380 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a06      	ldr	r2, [pc, #24]	; (80028fc <HAL_ADC_MspInit+0xdc>)
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_ADC_MspInit+0xdc>)
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028ec:	46c0      	nop			; (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b00a      	add	sp, #40	; 0x28
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40012400 	.word	0x40012400
 80028f8:	40021000 	.word	0x40021000
 80028fc:	200000b0 	.word	0x200000b0
 8002900:	40020008 	.word	0x40020008

08002904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	2314      	movs	r3, #20
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	0018      	movs	r0, r3
 8002912:	2314      	movs	r3, #20
 8002914:	001a      	movs	r2, r3
 8002916:	2100      	movs	r1, #0
 8002918:	f002 fa34 	bl	8004d84 <memset>
  if(huart->Instance==USART1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <HAL_UART_MspInit+0x90>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d131      	bne.n	800298a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002926:	4b1c      	ldr	r3, [pc, #112]	; (8002998 <HAL_UART_MspInit+0x94>)
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_UART_MspInit+0x94>)
 800292c:	2180      	movs	r1, #128	; 0x80
 800292e:	01c9      	lsls	r1, r1, #7
 8002930:	430a      	orrs	r2, r1
 8002932:	619a      	str	r2, [r3, #24]
 8002934:	4b18      	ldr	r3, [pc, #96]	; (8002998 <HAL_UART_MspInit+0x94>)
 8002936:	699a      	ldr	r2, [r3, #24]
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	01db      	lsls	r3, r3, #7
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <HAL_UART_MspInit+0x94>)
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <HAL_UART_MspInit+0x94>)
 8002948:	2180      	movs	r1, #128	; 0x80
 800294a:	02c9      	lsls	r1, r1, #11
 800294c:	430a      	orrs	r2, r1
 800294e:	615a      	str	r2, [r3, #20]
 8002950:	4b11      	ldr	r3, [pc, #68]	; (8002998 <HAL_UART_MspInit+0x94>)
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	02db      	lsls	r3, r3, #11
 8002958:	4013      	ands	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800295e:	2114      	movs	r1, #20
 8002960:	187b      	adds	r3, r7, r1
 8002962:	22c0      	movs	r2, #192	; 0xc0
 8002964:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	187b      	adds	r3, r7, r1
 8002968:	2202      	movs	r2, #2
 800296a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	187b      	adds	r3, r7, r1
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002972:	187b      	adds	r3, r7, r1
 8002974:	2203      	movs	r2, #3
 8002976:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002978:	187b      	adds	r3, r7, r1
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297e:	187b      	adds	r3, r7, r1
 8002980:	4a06      	ldr	r2, [pc, #24]	; (800299c <HAL_UART_MspInit+0x98>)
 8002982:	0019      	movs	r1, r3
 8002984:	0010      	movs	r0, r2
 8002986:	f000 ff2d 	bl	80037e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	46bd      	mov	sp, r7
 800298e:	b00a      	add	sp, #40	; 0x28
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	40013800 	.word	0x40013800
 8002998:	40021000 	.word	0x40021000
 800299c:	48000400 	.word	0x48000400

080029a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ae:	e7fe      	b.n	80029ae <HardFault_Handler+0x4>

080029b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c8:	f000 f888 	bl	8002adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029cc:	46c0      	nop			; (mov r8, r8)
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <DMA1_Channel1_IRQHandler+0x14>)
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 fe18 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029e0:	46c0      	nop			; (mov r8, r8)
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	200000b0 	.word	0x200000b0

080029ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029f8:	480d      	ldr	r0, [pc, #52]	; (8002a30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029fc:	480d      	ldr	r0, [pc, #52]	; (8002a34 <LoopForever+0x6>)
  ldr r1, =_edata
 80029fe:	490e      	ldr	r1, [pc, #56]	; (8002a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a00:	4a0e      	ldr	r2, [pc, #56]	; (8002a3c <LoopForever+0xe>)
  movs r3, #0
 8002a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a04:	e002      	b.n	8002a0c <LoopCopyDataInit>

08002a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a0a:	3304      	adds	r3, #4

08002a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a10:	d3f9      	bcc.n	8002a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a12:	4a0b      	ldr	r2, [pc, #44]	; (8002a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a14:	4c0b      	ldr	r4, [pc, #44]	; (8002a44 <LoopForever+0x16>)
  movs r3, #0
 8002a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a18:	e001      	b.n	8002a1e <LoopFillZerobss>

08002a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a1c:	3204      	adds	r2, #4

08002a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a20:	d3fb      	bcc.n	8002a1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a22:	f7ff ffe3 	bl	80029ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002a26:	f002 f989 	bl	8004d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a2a:	f7ff fe83 	bl	8002734 <main>

08002a2e <LoopForever>:

LoopForever:
    b LoopForever
 8002a2e:	e7fe      	b.n	8002a2e <LoopForever>
  ldr   r0, =_estack
 8002a30:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a38:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002a3c:	08004eec 	.word	0x08004eec
  ldr r2, =_sbss
 8002a40:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002a44:	20000138 	.word	0x20000138

08002a48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a48:	e7fe      	b.n	8002a48 <ADC1_IRQHandler>
	...

08002a4c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a50:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <HAL_Init+0x24>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_Init+0x24>)
 8002a56:	2110      	movs	r1, #16
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f000 f809 	bl	8002a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a62:	f7ff feb9 	bl	80027d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	0018      	movs	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	40022000 	.word	0x40022000

08002a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <HAL_InitTick+0x5c>)
 8002a7e:	681c      	ldr	r4, [r3, #0]
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_InitTick+0x60>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	0019      	movs	r1, r3
 8002a86:	23fa      	movs	r3, #250	; 0xfa
 8002a88:	0098      	lsls	r0, r3, #2
 8002a8a:	f7fd fb3d 	bl	8000108 <__udivsi3>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	0019      	movs	r1, r3
 8002a92:	0020      	movs	r0, r4
 8002a94:	f7fd fb38 	bl	8000108 <__udivsi3>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f000 fcfd 	bl	800349a <HAL_SYSTICK_Config>
 8002aa0:	1e03      	subs	r3, r0, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e00f      	b.n	8002ac8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d80b      	bhi.n	8002ac6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	425b      	negs	r3, r3
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 fcca 	bl	8003450 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <HAL_InitTick+0x64>)
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b003      	add	sp, #12
 8002ace:	bd90      	pop	{r4, r7, pc}
 8002ad0:	20000004 	.word	0x20000004
 8002ad4:	2000000c 	.word	0x2000000c
 8002ad8:	20000008 	.word	0x20000008

08002adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_IncTick+0x1c>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	001a      	movs	r2, r3
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_IncTick+0x20>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	18d2      	adds	r2, r2, r3
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HAL_IncTick+0x20>)
 8002aee:	601a      	str	r2, [r3, #0]
}
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	2000000c 	.word	0x2000000c
 8002afc:	20000134 	.word	0x20000134

08002b00 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  return uwTick;
 8002b04:	4b02      	ldr	r3, [pc, #8]	; (8002b10 <HAL_GetTick+0x10>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	0018      	movs	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	20000134 	.word	0x20000134

08002b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b1c:	f7ff fff0 	bl	8002b00 <HAL_GetTick>
 8002b20:	0003      	movs	r3, r0
 8002b22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	d005      	beq.n	8002b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_Delay+0x40>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	001a      	movs	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	189b      	adds	r3, r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	f7ff ffe0 	bl	8002b00 <HAL_GetTick>
 8002b40:	0002      	movs	r2, r0
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d8f7      	bhi.n	8002b3c <HAL_Delay+0x28>
  {
  }
}
 8002b4c:	46c0      	nop			; (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b004      	add	sp, #16
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	2000000c 	.word	0x2000000c

08002b58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b60:	230f      	movs	r3, #15
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e125      	b.n	8002dc2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10a      	bne.n	8002b94 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2234      	movs	r2, #52	; 0x34
 8002b88:	2100      	movs	r1, #0
 8002b8a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f7ff fe46 	bl	8002820 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	2210      	movs	r2, #16
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d000      	beq.n	8002ba0 <HAL_ADC_Init+0x48>
 8002b9e:	e103      	b.n	8002da8 <HAL_ADC_Init+0x250>
 8002ba0:	230f      	movs	r3, #15
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d000      	beq.n	8002bac <HAL_ADC_Init+0x54>
 8002baa:	e0fd      	b.n	8002da8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2204      	movs	r2, #4
 8002bb4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002bb6:	d000      	beq.n	8002bba <HAL_ADC_Init+0x62>
 8002bb8:	e0f6      	b.n	8002da8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	4a83      	ldr	r2, [pc, #524]	; (8002dcc <HAL_ADC_Init+0x274>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d112      	bne.n	8002bfe <HAL_ADC_Init+0xa6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2201      	movs	r2, #1
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d009      	beq.n	8002bfa <HAL_ADC_Init+0xa2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	2380      	movs	r3, #128	; 0x80
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	401a      	ands	r2, r3
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_Init+0xa6>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_ADC_Init+0xa8>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d116      	bne.n	8002c32 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2218      	movs	r2, #24
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	0899      	lsrs	r1, r3, #2
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4964      	ldr	r1, [pc, #400]	; (8002dd0 <HAL_ADC_Init+0x278>)
 8002c3e:	400a      	ands	r2, r1
 8002c40:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	7e1b      	ldrb	r3, [r3, #24]
 8002c46:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	7e5b      	ldrb	r3, [r3, #25]
 8002c4c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c4e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	7e9b      	ldrb	r3, [r3, #26]
 8002c54:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c56:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d002      	beq.n	8002c66 <HAL_ADC_Init+0x10e>
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	015b      	lsls	r3, r3, #5
 8002c64:	e000      	b.n	8002c68 <HAL_ADC_Init+0x110>
 8002c66:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c68:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c6e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_Init+0x124>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	e000      	b.n	8002c7e <HAL_ADC_Init+0x126>
 8002c7c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002c7e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2124      	movs	r1, #36	; 0x24
 8002c84:	5c5b      	ldrb	r3, [r3, r1]
 8002c86:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c88:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7edb      	ldrb	r3, [r3, #27]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d115      	bne.n	8002cc4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	7e9b      	ldrb	r3, [r3, #26]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d105      	bne.n	8002cac <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2280      	movs	r2, #128	; 0x80
 8002ca4:	0252      	lsls	r2, r2, #9
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	e00b      	b.n	8002cc4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69da      	ldr	r2, [r3, #28]
 8002cc8:	23c2      	movs	r3, #194	; 0xc2
 8002cca:	33ff      	adds	r3, #255	; 0xff
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d007      	beq.n	8002ce0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68d9      	ldr	r1, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	055b      	lsls	r3, r3, #21
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d01b      	beq.n	8002d34 <HAL_ADC_Init+0x1dc>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d017      	beq.n	8002d34 <HAL_ADC_Init+0x1dc>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d013      	beq.n	8002d34 <HAL_ADC_Init+0x1dc>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d00f      	beq.n	8002d34 <HAL_ADC_Init+0x1dc>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d00b      	beq.n	8002d34 <HAL_ADC_Init+0x1dc>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	2b05      	cmp	r3, #5
 8002d22:	d007      	beq.n	8002d34 <HAL_ADC_Init+0x1dc>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	2b06      	cmp	r3, #6
 8002d2a:	d003      	beq.n	8002d34 <HAL_ADC_Init+0x1dc>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	2b07      	cmp	r3, #7
 8002d32:	d112      	bne.n	8002d5a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2107      	movs	r1, #7
 8002d40:	438a      	bics	r2, r1
 8002d42:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6959      	ldr	r1, [r3, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	2207      	movs	r2, #7
 8002d50:	401a      	ands	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a1c      	ldr	r2, [pc, #112]	; (8002dd4 <HAL_ADC_Init+0x27c>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d10b      	bne.n	8002d82 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d74:	2203      	movs	r2, #3
 8002d76:	4393      	bics	r3, r2
 8002d78:	2201      	movs	r2, #1
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d80:	e01c      	b.n	8002dbc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d86:	2212      	movs	r2, #18
 8002d88:	4393      	bics	r3, r2
 8002d8a:	2210      	movs	r2, #16
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d96:	2201      	movs	r2, #1
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002d9e:	230f      	movs	r3, #15
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002da6:	e009      	b.n	8002dbc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dac:	2210      	movs	r2, #16
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002db4:	230f      	movs	r3, #15
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002dbc:	230f      	movs	r3, #15
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	781b      	ldrb	r3, [r3, #0]
}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b004      	add	sp, #16
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	fffffefd 	.word	0xfffffefd
 8002dd0:	fffe0219 	.word	0xfffe0219
 8002dd4:	833fffe7 	.word	0x833fffe7

08002dd8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de4:	2317      	movs	r3, #23
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2204      	movs	r2, #4
 8002df4:	4013      	ands	r3, r2
 8002df6:	d15e      	bne.n	8002eb6 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2234      	movs	r2, #52	; 0x34
 8002dfc:	5c9b      	ldrb	r3, [r3, r2]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_ADC_Start_DMA+0x2e>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e05e      	b.n	8002ec4 <HAL_ADC_Start_DMA+0xec>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2234      	movs	r2, #52	; 0x34
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	7e5b      	ldrb	r3, [r3, #25]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d007      	beq.n	8002e26 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002e16:	2317      	movs	r3, #23
 8002e18:	18fc      	adds	r4, r7, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 f96b 	bl	80030f8 <ADC_Enable>
 8002e22:	0003      	movs	r3, r0
 8002e24:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e26:	2317      	movs	r3, #23
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d146      	bne.n	8002ebe <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	4a25      	ldr	r2, [pc, #148]	; (8002ecc <HAL_ADC_Start_DMA+0xf4>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	2280      	movs	r2, #128	; 0x80
 8002e3a:	0052      	lsls	r2, r2, #1
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2234      	movs	r2, #52	; 0x34
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	4a1e      	ldr	r2, [pc, #120]	; (8002ed0 <HAL_ADC_Start_DMA+0xf8>)
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <HAL_ADC_Start_DMA+0xfc>)
 8002e5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	4a1c      	ldr	r2, [pc, #112]	; (8002ed8 <HAL_ADC_Start_DMA+0x100>)
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	221c      	movs	r2, #28
 8002e6e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2110      	movs	r1, #16
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3340      	adds	r3, #64	; 0x40
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f000 fb50 	bl	8003544 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2104      	movs	r1, #4
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	e003      	b.n	8002ebe <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002eb6:	2317      	movs	r3, #23
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	2202      	movs	r2, #2
 8002ebc:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002ebe:	2317      	movs	r3, #23
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	781b      	ldrb	r3, [r3, #0]
}
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b007      	add	sp, #28
 8002eca:	bd90      	pop	{r4, r7, pc}
 8002ecc:	fffff0fe 	.word	0xfffff0fe
 8002ed0:	080031f1 	.word	0x080031f1
 8002ed4:	080032a5 	.word	0x080032a5
 8002ed8:	080032c3 	.word	0x080032c3

08002edc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b002      	add	sp, #8
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f16:	230f      	movs	r3, #15
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	055b      	lsls	r3, r3, #21
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d011      	beq.n	8002f52 <HAL_ADC_ConfigChannel+0x46>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d00d      	beq.n	8002f52 <HAL_ADC_ConfigChannel+0x46>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d009      	beq.n	8002f52 <HAL_ADC_ConfigChannel+0x46>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d005      	beq.n	8002f52 <HAL_ADC_ConfigChannel+0x46>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d001      	beq.n	8002f52 <HAL_ADC_ConfigChannel+0x46>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2234      	movs	r2, #52	; 0x34
 8002f56:	5c9b      	ldrb	r3, [r3, r2]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x54>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e0bb      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x1cc>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2234      	movs	r2, #52	; 0x34
 8002f64:	2101      	movs	r1, #1
 8002f66:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2204      	movs	r2, #4
 8002f70:	4013      	ands	r3, r2
 8002f72:	d000      	beq.n	8002f76 <HAL_ADC_ConfigChannel+0x6a>
 8002f74:	e09f      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4a59      	ldr	r2, [pc, #356]	; (80030e0 <HAL_ADC_ConfigChannel+0x1d4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d100      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x76>
 8002f80:	e077      	b.n	8003072 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	055b      	lsls	r3, r3, #21
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d037      	beq.n	8003014 <HAL_ADC_ConfigChannel+0x108>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d033      	beq.n	8003014 <HAL_ADC_ConfigChannel+0x108>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d02f      	beq.n	8003014 <HAL_ADC_ConfigChannel+0x108>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d02b      	beq.n	8003014 <HAL_ADC_ConfigChannel+0x108>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d027      	beq.n	8003014 <HAL_ADC_ConfigChannel+0x108>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d023      	beq.n	8003014 <HAL_ADC_ConfigChannel+0x108>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	2b06      	cmp	r3, #6
 8002fd2:	d01f      	beq.n	8003014 <HAL_ADC_ConfigChannel+0x108>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	2b07      	cmp	r3, #7
 8002fda:	d01b      	beq.n	8003014 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	2107      	movs	r1, #7
 8002fe8:	400b      	ands	r3, r1
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d012      	beq.n	8003014 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2107      	movs	r1, #7
 8002ffa:	438a      	bics	r2, r1
 8002ffc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6959      	ldr	r1, [r3, #20]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2207      	movs	r2, #7
 800300a:	401a      	ands	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b10      	cmp	r3, #16
 800301a:	d003      	beq.n	8003024 <HAL_ADC_ConfigChannel+0x118>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b11      	cmp	r3, #17
 8003022:	d152      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003024:	4b2f      	ldr	r3, [pc, #188]	; (80030e4 <HAL_ADC_ConfigChannel+0x1d8>)
 8003026:	6819      	ldr	r1, [r3, #0]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b10      	cmp	r3, #16
 800302e:	d102      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x12a>
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	041b      	lsls	r3, r3, #16
 8003034:	e001      	b.n	800303a <HAL_ADC_ConfigChannel+0x12e>
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	03db      	lsls	r3, r3, #15
 800303a:	4a2a      	ldr	r2, [pc, #168]	; (80030e4 <HAL_ADC_ConfigChannel+0x1d8>)
 800303c:	430b      	orrs	r3, r1
 800303e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b10      	cmp	r3, #16
 8003046:	d140      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <HAL_ADC_ConfigChannel+0x1dc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4927      	ldr	r1, [pc, #156]	; (80030ec <HAL_ADC_ConfigChannel+0x1e0>)
 800304e:	0018      	movs	r0, r3
 8003050:	f7fd f85a 	bl	8000108 <__udivsi3>
 8003054:	0003      	movs	r3, r0
 8003056:	001a      	movs	r2, r3
 8003058:	0013      	movs	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	189b      	adds	r3, r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003062:	e002      	b.n	800306a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	3b01      	subs	r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f9      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x158>
 8003070:	e02b      	b.n	80030ca <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2101      	movs	r1, #1
 800307e:	4099      	lsls	r1, r3
 8003080:	000b      	movs	r3, r1
 8003082:	43d9      	mvns	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	400a      	ands	r2, r1
 800308a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b10      	cmp	r3, #16
 8003092:	d003      	beq.n	800309c <HAL_ADC_ConfigChannel+0x190>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b11      	cmp	r3, #17
 800309a:	d116      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_ADC_ConfigChannel+0x1d8>)
 800309e:	6819      	ldr	r1, [r3, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d101      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x1a0>
 80030a8:	4a11      	ldr	r2, [pc, #68]	; (80030f0 <HAL_ADC_ConfigChannel+0x1e4>)
 80030aa:	e000      	b.n	80030ae <HAL_ADC_ConfigChannel+0x1a2>
 80030ac:	4a11      	ldr	r2, [pc, #68]	; (80030f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <HAL_ADC_ConfigChannel+0x1d8>)
 80030b0:	400a      	ands	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	e009      	b.n	80030ca <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ba:	2220      	movs	r2, #32
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80030c2:	230f      	movs	r3, #15
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	2201      	movs	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2234      	movs	r2, #52	; 0x34
 80030ce:	2100      	movs	r1, #0
 80030d0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80030d2:	230f      	movs	r3, #15
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	781b      	ldrb	r3, [r3, #0]
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b004      	add	sp, #16
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	00001001 	.word	0x00001001
 80030e4:	40012708 	.word	0x40012708
 80030e8:	20000004 	.word	0x20000004
 80030ec:	000f4240 	.word	0x000f4240
 80030f0:	ff7fffff 	.word	0xff7fffff
 80030f4:	ffbfffff 	.word	0xffbfffff

080030f8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2203      	movs	r2, #3
 8003110:	4013      	ands	r3, r2
 8003112:	2b01      	cmp	r3, #1
 8003114:	d112      	bne.n	800313c <ADC_Enable+0x44>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2201      	movs	r2, #1
 800311e:	4013      	ands	r3, r2
 8003120:	2b01      	cmp	r3, #1
 8003122:	d009      	beq.n	8003138 <ADC_Enable+0x40>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	401a      	ands	r2, r3
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	429a      	cmp	r2, r3
 8003136:	d101      	bne.n	800313c <ADC_Enable+0x44>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <ADC_Enable+0x46>
 800313c:	2300      	movs	r3, #0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d14b      	bne.n	80031da <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a26      	ldr	r2, [pc, #152]	; (80031e4 <ADC_Enable+0xec>)
 800314a:	4013      	ands	r3, r2
 800314c:	d00d      	beq.n	800316a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	2210      	movs	r2, #16
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	2201      	movs	r2, #1
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e038      	b.n	80031dc <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2101      	movs	r1, #1
 8003176:	430a      	orrs	r2, r1
 8003178:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800317a:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <ADC_Enable+0xf0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	491b      	ldr	r1, [pc, #108]	; (80031ec <ADC_Enable+0xf4>)
 8003180:	0018      	movs	r0, r3
 8003182:	f7fc ffc1 	bl	8000108 <__udivsi3>
 8003186:	0003      	movs	r3, r0
 8003188:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800318a:	e002      	b.n	8003192 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	3b01      	subs	r3, #1
 8003190:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1f9      	bne.n	800318c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003198:	f7ff fcb2 	bl	8002b00 <HAL_GetTick>
 800319c:	0003      	movs	r3, r0
 800319e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031a0:	e014      	b.n	80031cc <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031a2:	f7ff fcad 	bl	8002b00 <HAL_GetTick>
 80031a6:	0002      	movs	r2, r0
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d90d      	bls.n	80031cc <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	2210      	movs	r2, #16
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c0:	2201      	movs	r2, #1
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e007      	b.n	80031dc <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2201      	movs	r2, #1
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d1e3      	bne.n	80031a2 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	0018      	movs	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	b004      	add	sp, #16
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	80000017 	.word	0x80000017
 80031e8:	20000004 	.word	0x20000004
 80031ec:	000f4240 	.word	0x000f4240

080031f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	2250      	movs	r2, #80	; 0x50
 8003204:	4013      	ands	r3, r2
 8003206:	d140      	bne.n	800328a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	2280      	movs	r2, #128	; 0x80
 800320e:	0092      	lsls	r2, r2, #2
 8003210:	431a      	orrs	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	23c0      	movs	r3, #192	; 0xc0
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	4013      	ands	r3, r2
 8003222:	d12d      	bne.n	8003280 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003228:	2b00      	cmp	r3, #0
 800322a:	d129      	bne.n	8003280 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2208      	movs	r2, #8
 8003234:	4013      	ands	r3, r2
 8003236:	2b08      	cmp	r3, #8
 8003238:	d122      	bne.n	8003280 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2204      	movs	r2, #4
 8003242:	4013      	ands	r3, r2
 8003244:	d110      	bne.n	8003268 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	210c      	movs	r1, #12
 8003252:	438a      	bics	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325a:	4a11      	ldr	r2, [pc, #68]	; (80032a0 <ADC_DMAConvCplt+0xb0>)
 800325c:	4013      	ands	r3, r2
 800325e:	2201      	movs	r2, #1
 8003260:	431a      	orrs	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	639a      	str	r2, [r3, #56]	; 0x38
 8003266:	e00b      	b.n	8003280 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326c:	2220      	movs	r2, #32
 800326e:	431a      	orrs	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003278:	2201      	movs	r2, #1
 800327a:	431a      	orrs	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	0018      	movs	r0, r3
 8003284:	f7ff fe2a 	bl	8002edc <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003288:	e005      	b.n	8003296 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	0010      	movs	r0, r2
 8003294:	4798      	blx	r3
}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	46bd      	mov	sp, r7
 800329a:	b004      	add	sp, #16
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	fffffefe 	.word	0xfffffefe

080032a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7ff fe19 	bl	8002eec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	46bd      	mov	sp, r7
 80032be:	b004      	add	sp, #16
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	2240      	movs	r2, #64	; 0x40
 80032d6:	431a      	orrs	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	2204      	movs	r2, #4
 80032e2:	431a      	orrs	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	0018      	movs	r0, r3
 80032ec:	f7ff fe06 	bl	8002efc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b004      	add	sp, #16
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	0002      	movs	r2, r0
 8003300:	1dfb      	adds	r3, r7, #7
 8003302:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003304:	1dfb      	adds	r3, r7, #7
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b7f      	cmp	r3, #127	; 0x7f
 800330a:	d809      	bhi.n	8003320 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330c:	1dfb      	adds	r3, r7, #7
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	001a      	movs	r2, r3
 8003312:	231f      	movs	r3, #31
 8003314:	401a      	ands	r2, r3
 8003316:	4b04      	ldr	r3, [pc, #16]	; (8003328 <__NVIC_EnableIRQ+0x30>)
 8003318:	2101      	movs	r1, #1
 800331a:	4091      	lsls	r1, r2
 800331c:	000a      	movs	r2, r1
 800331e:	601a      	str	r2, [r3, #0]
  }
}
 8003320:	46c0      	nop			; (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b002      	add	sp, #8
 8003326:	bd80      	pop	{r7, pc}
 8003328:	e000e100 	.word	0xe000e100

0800332c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	0002      	movs	r2, r0
 8003334:	6039      	str	r1, [r7, #0]
 8003336:	1dfb      	adds	r3, r7, #7
 8003338:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b7f      	cmp	r3, #127	; 0x7f
 8003340:	d828      	bhi.n	8003394 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003342:	4a2f      	ldr	r2, [pc, #188]	; (8003400 <__NVIC_SetPriority+0xd4>)
 8003344:	1dfb      	adds	r3, r7, #7
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	b25b      	sxtb	r3, r3
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	33c0      	adds	r3, #192	; 0xc0
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	589b      	ldr	r3, [r3, r2]
 8003352:	1dfa      	adds	r2, r7, #7
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	0011      	movs	r1, r2
 8003358:	2203      	movs	r2, #3
 800335a:	400a      	ands	r2, r1
 800335c:	00d2      	lsls	r2, r2, #3
 800335e:	21ff      	movs	r1, #255	; 0xff
 8003360:	4091      	lsls	r1, r2
 8003362:	000a      	movs	r2, r1
 8003364:	43d2      	mvns	r2, r2
 8003366:	401a      	ands	r2, r3
 8003368:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	019b      	lsls	r3, r3, #6
 800336e:	22ff      	movs	r2, #255	; 0xff
 8003370:	401a      	ands	r2, r3
 8003372:	1dfb      	adds	r3, r7, #7
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	0018      	movs	r0, r3
 8003378:	2303      	movs	r3, #3
 800337a:	4003      	ands	r3, r0
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003380:	481f      	ldr	r0, [pc, #124]	; (8003400 <__NVIC_SetPriority+0xd4>)
 8003382:	1dfb      	adds	r3, r7, #7
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	b25b      	sxtb	r3, r3
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	430a      	orrs	r2, r1
 800338c:	33c0      	adds	r3, #192	; 0xc0
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003392:	e031      	b.n	80033f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003394:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <__NVIC_SetPriority+0xd8>)
 8003396:	1dfb      	adds	r3, r7, #7
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	0019      	movs	r1, r3
 800339c:	230f      	movs	r3, #15
 800339e:	400b      	ands	r3, r1
 80033a0:	3b08      	subs	r3, #8
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3306      	adds	r3, #6
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	18d3      	adds	r3, r2, r3
 80033aa:	3304      	adds	r3, #4
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	1dfa      	adds	r2, r7, #7
 80033b0:	7812      	ldrb	r2, [r2, #0]
 80033b2:	0011      	movs	r1, r2
 80033b4:	2203      	movs	r2, #3
 80033b6:	400a      	ands	r2, r1
 80033b8:	00d2      	lsls	r2, r2, #3
 80033ba:	21ff      	movs	r1, #255	; 0xff
 80033bc:	4091      	lsls	r1, r2
 80033be:	000a      	movs	r2, r1
 80033c0:	43d2      	mvns	r2, r2
 80033c2:	401a      	ands	r2, r3
 80033c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	019b      	lsls	r3, r3, #6
 80033ca:	22ff      	movs	r2, #255	; 0xff
 80033cc:	401a      	ands	r2, r3
 80033ce:	1dfb      	adds	r3, r7, #7
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	0018      	movs	r0, r3
 80033d4:	2303      	movs	r3, #3
 80033d6:	4003      	ands	r3, r0
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033dc:	4809      	ldr	r0, [pc, #36]	; (8003404 <__NVIC_SetPriority+0xd8>)
 80033de:	1dfb      	adds	r3, r7, #7
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	001c      	movs	r4, r3
 80033e4:	230f      	movs	r3, #15
 80033e6:	4023      	ands	r3, r4
 80033e8:	3b08      	subs	r3, #8
 80033ea:	089b      	lsrs	r3, r3, #2
 80033ec:	430a      	orrs	r2, r1
 80033ee:	3306      	adds	r3, #6
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	18c3      	adds	r3, r0, r3
 80033f4:	3304      	adds	r3, #4
 80033f6:	601a      	str	r2, [r3, #0]
}
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b003      	add	sp, #12
 80033fe:	bd90      	pop	{r4, r7, pc}
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3b01      	subs	r3, #1
 8003414:	4a0c      	ldr	r2, [pc, #48]	; (8003448 <SysTick_Config+0x40>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341a:	2301      	movs	r3, #1
 800341c:	e010      	b.n	8003440 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341e:	4b0b      	ldr	r3, [pc, #44]	; (800344c <SysTick_Config+0x44>)
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	3a01      	subs	r2, #1
 8003424:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003426:	2301      	movs	r3, #1
 8003428:	425b      	negs	r3, r3
 800342a:	2103      	movs	r1, #3
 800342c:	0018      	movs	r0, r3
 800342e:	f7ff ff7d 	bl	800332c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <SysTick_Config+0x44>)
 8003434:	2200      	movs	r2, #0
 8003436:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003438:	4b04      	ldr	r3, [pc, #16]	; (800344c <SysTick_Config+0x44>)
 800343a:	2207      	movs	r2, #7
 800343c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800343e:	2300      	movs	r3, #0
}
 8003440:	0018      	movs	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	b002      	add	sp, #8
 8003446:	bd80      	pop	{r7, pc}
 8003448:	00ffffff 	.word	0x00ffffff
 800344c:	e000e010 	.word	0xe000e010

08003450 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	210f      	movs	r1, #15
 800345c:	187b      	adds	r3, r7, r1
 800345e:	1c02      	adds	r2, r0, #0
 8003460:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	187b      	adds	r3, r7, r1
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	b25b      	sxtb	r3, r3
 800346a:	0011      	movs	r1, r2
 800346c:	0018      	movs	r0, r3
 800346e:	f7ff ff5d 	bl	800332c <__NVIC_SetPriority>
}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	46bd      	mov	sp, r7
 8003476:	b004      	add	sp, #16
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	0002      	movs	r2, r0
 8003482:	1dfb      	adds	r3, r7, #7
 8003484:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003486:	1dfb      	adds	r3, r7, #7
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	b25b      	sxtb	r3, r3
 800348c:	0018      	movs	r0, r3
 800348e:	f7ff ff33 	bl	80032f8 <__NVIC_EnableIRQ>
}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	46bd      	mov	sp, r7
 8003496:	b002      	add	sp, #8
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	0018      	movs	r0, r3
 80034a6:	f7ff ffaf 	bl	8003408 <SysTick_Config>
 80034aa:	0003      	movs	r3, r0
}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e036      	b.n	8003538 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2221      	movs	r2, #33	; 0x21
 80034ce:	2102      	movs	r1, #2
 80034d0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4a18      	ldr	r2, [pc, #96]	; (8003540 <HAL_DMA_Init+0x8c>)
 80034de:	4013      	ands	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80034ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003502:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	0018      	movs	r0, r3
 800351c:	f000 f946 	bl	80037ac <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2221      	movs	r2, #33	; 0x21
 800352a:	2101      	movs	r1, #1
 800352c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	2100      	movs	r1, #0
 8003534:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}  
 8003538:	0018      	movs	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	b004      	add	sp, #16
 800353e:	bd80      	pop	{r7, pc}
 8003540:	ffffc00f 	.word	0xffffc00f

08003544 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003552:	2317      	movs	r3, #23
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	2200      	movs	r2, #0
 8003558:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	5c9b      	ldrb	r3, [r3, r2]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_DMA_Start_IT+0x24>
 8003564:	2302      	movs	r3, #2
 8003566:	e04f      	b.n	8003608 <HAL_DMA_Start_IT+0xc4>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	2101      	movs	r1, #1
 800356e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2221      	movs	r2, #33	; 0x21
 8003574:	5c9b      	ldrb	r3, [r3, r2]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	d13a      	bne.n	80035f2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2221      	movs	r2, #33	; 0x21
 8003580:	2102      	movs	r1, #2
 8003582:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2101      	movs	r1, #1
 8003596:	438a      	bics	r2, r1
 8003598:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f8d7 	bl	8003754 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	210e      	movs	r1, #14
 80035ba:	430a      	orrs	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e00f      	b.n	80035e0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	210a      	movs	r1, #10
 80035cc:	430a      	orrs	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2104      	movs	r1, #4
 80035dc:	438a      	bics	r2, r1
 80035de:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2101      	movs	r1, #1
 80035ec:	430a      	orrs	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	e007      	b.n	8003602 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	2100      	movs	r1, #0
 80035f8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80035fa:	2317      	movs	r3, #23
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	2202      	movs	r2, #2
 8003600:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8003602:	2317      	movs	r3, #23
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	781b      	ldrb	r3, [r3, #0]
} 
 8003608:	0018      	movs	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	b006      	add	sp, #24
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	2204      	movs	r2, #4
 800362e:	409a      	lsls	r2, r3
 8003630:	0013      	movs	r3, r2
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4013      	ands	r3, r2
 8003636:	d024      	beq.n	8003682 <HAL_DMA_IRQHandler+0x72>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2204      	movs	r2, #4
 800363c:	4013      	ands	r3, r2
 800363e:	d020      	beq.n	8003682 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2220      	movs	r2, #32
 8003648:	4013      	ands	r3, r2
 800364a:	d107      	bne.n	800365c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2104      	movs	r1, #4
 8003658:	438a      	bics	r2, r1
 800365a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003664:	2104      	movs	r1, #4
 8003666:	4091      	lsls	r1, r2
 8003668:	000a      	movs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d100      	bne.n	8003676 <HAL_DMA_IRQHandler+0x66>
 8003674:	e06a      	b.n	800374c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	0010      	movs	r0, r2
 800367e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003680:	e064      	b.n	800374c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2202      	movs	r2, #2
 8003688:	409a      	lsls	r2, r3
 800368a:	0013      	movs	r3, r2
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4013      	ands	r3, r2
 8003690:	d02b      	beq.n	80036ea <HAL_DMA_IRQHandler+0xda>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2202      	movs	r2, #2
 8003696:	4013      	ands	r3, r2
 8003698:	d027      	beq.n	80036ea <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2220      	movs	r2, #32
 80036a2:	4013      	ands	r3, r2
 80036a4:	d10b      	bne.n	80036be <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	210a      	movs	r1, #10
 80036b2:	438a      	bics	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2221      	movs	r2, #33	; 0x21
 80036ba:	2101      	movs	r1, #1
 80036bc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	2102      	movs	r1, #2
 80036c8:	4091      	lsls	r1, r2
 80036ca:	000a      	movs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	2100      	movs	r1, #0
 80036d4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d036      	beq.n	800374c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	0010      	movs	r0, r2
 80036e6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80036e8:	e030      	b.n	800374c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2208      	movs	r2, #8
 80036f0:	409a      	lsls	r2, r3
 80036f2:	0013      	movs	r3, r2
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4013      	ands	r3, r2
 80036f8:	d028      	beq.n	800374c <HAL_DMA_IRQHandler+0x13c>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2208      	movs	r2, #8
 80036fe:	4013      	ands	r3, r2
 8003700:	d024      	beq.n	800374c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	210e      	movs	r1, #14
 800370e:	438a      	bics	r2, r1
 8003710:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	2101      	movs	r1, #1
 800371c:	4091      	lsls	r1, r2
 800371e:	000a      	movs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2221      	movs	r2, #33	; 0x21
 800372c:	2101      	movs	r1, #1
 800372e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	2100      	movs	r1, #0
 8003736:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	0010      	movs	r0, r2
 8003748:	4798      	blx	r3
    }
   }
}  
 800374a:	e7ff      	b.n	800374c <HAL_DMA_IRQHandler+0x13c>
 800374c:	46c0      	nop			; (mov r8, r8)
 800374e:	46bd      	mov	sp, r7
 8003750:	b004      	add	sp, #16
 8003752:	bd80      	pop	{r7, pc}

08003754 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376a:	2101      	movs	r1, #1
 800376c:	4091      	lsls	r1, r2
 800376e:	000a      	movs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b10      	cmp	r3, #16
 8003780:	d108      	bne.n	8003794 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003792:	e007      	b.n	80037a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	60da      	str	r2, [r3, #12]
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b004      	add	sp, #16
 80037aa:	bd80      	pop	{r7, pc}

080037ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a08      	ldr	r2, [pc, #32]	; (80037dc <DMA_CalcBaseAndBitshift+0x30>)
 80037ba:	4694      	mov	ip, r2
 80037bc:	4463      	add	r3, ip
 80037be:	2114      	movs	r1, #20
 80037c0:	0018      	movs	r0, r3
 80037c2:	f7fc fca1 	bl	8000108 <__udivsi3>
 80037c6:	0003      	movs	r3, r0
 80037c8:	009a      	lsls	r2, r3, #2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a03      	ldr	r2, [pc, #12]	; (80037e0 <DMA_CalcBaseAndBitshift+0x34>)
 80037d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b002      	add	sp, #8
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	bffdfff8 	.word	0xbffdfff8
 80037e0:	40020000 	.word	0x40020000

080037e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037f2:	e14f      	b.n	8003a94 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2101      	movs	r1, #1
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4091      	lsls	r1, r2
 80037fe:	000a      	movs	r2, r1
 8003800:	4013      	ands	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d100      	bne.n	800380c <HAL_GPIO_Init+0x28>
 800380a:	e140      	b.n	8003a8e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x38>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b12      	cmp	r3, #18
 800381a:	d123      	bne.n	8003864 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	08da      	lsrs	r2, r3, #3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3208      	adds	r2, #8
 8003824:	0092      	lsls	r2, r2, #2
 8003826:	58d3      	ldr	r3, [r2, r3]
 8003828:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2207      	movs	r2, #7
 800382e:	4013      	ands	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	220f      	movs	r2, #15
 8003834:	409a      	lsls	r2, r3
 8003836:	0013      	movs	r3, r2
 8003838:	43da      	mvns	r2, r3
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4013      	ands	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2107      	movs	r1, #7
 8003848:	400b      	ands	r3, r1
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	409a      	lsls	r2, r3
 800384e:	0013      	movs	r3, r2
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	08da      	lsrs	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3208      	adds	r2, #8
 800385e:	0092      	lsls	r2, r2, #2
 8003860:	6939      	ldr	r1, [r7, #16]
 8003862:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	2203      	movs	r2, #3
 8003870:	409a      	lsls	r2, r3
 8003872:	0013      	movs	r3, r2
 8003874:	43da      	mvns	r2, r3
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4013      	ands	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2203      	movs	r2, #3
 8003882:	401a      	ands	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	409a      	lsls	r2, r3
 800388a:	0013      	movs	r3, r2
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d00b      	beq.n	80038b8 <HAL_GPIO_Init+0xd4>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d007      	beq.n	80038b8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038ac:	2b11      	cmp	r3, #17
 80038ae:	d003      	beq.n	80038b8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b12      	cmp	r3, #18
 80038b6:	d130      	bne.n	800391a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	2203      	movs	r2, #3
 80038c4:	409a      	lsls	r2, r3
 80038c6:	0013      	movs	r3, r2
 80038c8:	43da      	mvns	r2, r3
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	409a      	lsls	r2, r3
 80038da:	0013      	movs	r3, r2
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038ee:	2201      	movs	r2, #1
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	409a      	lsls	r2, r3
 80038f4:	0013      	movs	r3, r2
 80038f6:	43da      	mvns	r2, r3
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4013      	ands	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	2201      	movs	r2, #1
 8003906:	401a      	ands	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	409a      	lsls	r2, r3
 800390c:	0013      	movs	r3, r2
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	2203      	movs	r2, #3
 8003926:	409a      	lsls	r2, r3
 8003928:	0013      	movs	r3, r2
 800392a:	43da      	mvns	r2, r3
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4013      	ands	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	409a      	lsls	r2, r3
 800393c:	0013      	movs	r3, r2
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	2380      	movs	r3, #128	; 0x80
 8003950:	055b      	lsls	r3, r3, #21
 8003952:	4013      	ands	r3, r2
 8003954:	d100      	bne.n	8003958 <HAL_GPIO_Init+0x174>
 8003956:	e09a      	b.n	8003a8e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003958:	4b54      	ldr	r3, [pc, #336]	; (8003aac <HAL_GPIO_Init+0x2c8>)
 800395a:	699a      	ldr	r2, [r3, #24]
 800395c:	4b53      	ldr	r3, [pc, #332]	; (8003aac <HAL_GPIO_Init+0x2c8>)
 800395e:	2101      	movs	r1, #1
 8003960:	430a      	orrs	r2, r1
 8003962:	619a      	str	r2, [r3, #24]
 8003964:	4b51      	ldr	r3, [pc, #324]	; (8003aac <HAL_GPIO_Init+0x2c8>)
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2201      	movs	r2, #1
 800396a:	4013      	ands	r3, r2
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003970:	4a4f      	ldr	r2, [pc, #316]	; (8003ab0 <HAL_GPIO_Init+0x2cc>)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	089b      	lsrs	r3, r3, #2
 8003976:	3302      	adds	r3, #2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	589b      	ldr	r3, [r3, r2]
 800397c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2203      	movs	r2, #3
 8003982:	4013      	ands	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	220f      	movs	r2, #15
 8003988:	409a      	lsls	r2, r3
 800398a:	0013      	movs	r3, r2
 800398c:	43da      	mvns	r2, r3
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4013      	ands	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	2390      	movs	r3, #144	; 0x90
 8003998:	05db      	lsls	r3, r3, #23
 800399a:	429a      	cmp	r2, r3
 800399c:	d013      	beq.n	80039c6 <HAL_GPIO_Init+0x1e2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a44      	ldr	r2, [pc, #272]	; (8003ab4 <HAL_GPIO_Init+0x2d0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00d      	beq.n	80039c2 <HAL_GPIO_Init+0x1de>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a43      	ldr	r2, [pc, #268]	; (8003ab8 <HAL_GPIO_Init+0x2d4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d007      	beq.n	80039be <HAL_GPIO_Init+0x1da>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a42      	ldr	r2, [pc, #264]	; (8003abc <HAL_GPIO_Init+0x2d8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <HAL_GPIO_Init+0x1d6>
 80039b6:	2303      	movs	r3, #3
 80039b8:	e006      	b.n	80039c8 <HAL_GPIO_Init+0x1e4>
 80039ba:	2305      	movs	r3, #5
 80039bc:	e004      	b.n	80039c8 <HAL_GPIO_Init+0x1e4>
 80039be:	2302      	movs	r3, #2
 80039c0:	e002      	b.n	80039c8 <HAL_GPIO_Init+0x1e4>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <HAL_GPIO_Init+0x1e4>
 80039c6:	2300      	movs	r3, #0
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	2103      	movs	r1, #3
 80039cc:	400a      	ands	r2, r1
 80039ce:	0092      	lsls	r2, r2, #2
 80039d0:	4093      	lsls	r3, r2
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039d8:	4935      	ldr	r1, [pc, #212]	; (8003ab0 <HAL_GPIO_Init+0x2cc>)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	3302      	adds	r3, #2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039e6:	4b36      	ldr	r3, [pc, #216]	; (8003ac0 <HAL_GPIO_Init+0x2dc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	43da      	mvns	r2, r3
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4013      	ands	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	025b      	lsls	r3, r3, #9
 80039fe:	4013      	ands	r3, r2
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a0a:	4b2d      	ldr	r3, [pc, #180]	; (8003ac0 <HAL_GPIO_Init+0x2dc>)
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003a10:	4b2b      	ldr	r3, [pc, #172]	; (8003ac0 <HAL_GPIO_Init+0x2dc>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	43da      	mvns	r2, r3
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	2380      	movs	r3, #128	; 0x80
 8003a26:	029b      	lsls	r3, r3, #10
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a34:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <HAL_GPIO_Init+0x2dc>)
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a3a:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <HAL_GPIO_Init+0x2dc>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	43da      	mvns	r2, r3
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4013      	ands	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	2380      	movs	r3, #128	; 0x80
 8003a50:	035b      	lsls	r3, r3, #13
 8003a52:	4013      	ands	r3, r2
 8003a54:	d003      	beq.n	8003a5e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a5e:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <HAL_GPIO_Init+0x2dc>)
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003a64:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <HAL_GPIO_Init+0x2dc>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	43da      	mvns	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4013      	ands	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	039b      	lsls	r3, r3, #14
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d003      	beq.n	8003a88 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a88:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <HAL_GPIO_Init+0x2dc>)
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	3301      	adds	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	40da      	lsrs	r2, r3
 8003a9c:	1e13      	subs	r3, r2, #0
 8003a9e:	d000      	beq.n	8003aa2 <HAL_GPIO_Init+0x2be>
 8003aa0:	e6a8      	b.n	80037f4 <HAL_GPIO_Init+0x10>
  } 
}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	b006      	add	sp, #24
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	48000400 	.word	0x48000400
 8003ab8:	48000800 	.word	0x48000800
 8003abc:	48000c00 	.word	0x48000c00
 8003ac0:	40010400 	.word	0x40010400

08003ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	0008      	movs	r0, r1
 8003ace:	0011      	movs	r1, r2
 8003ad0:	1cbb      	adds	r3, r7, #2
 8003ad2:	1c02      	adds	r2, r0, #0
 8003ad4:	801a      	strh	r2, [r3, #0]
 8003ad6:	1c7b      	adds	r3, r7, #1
 8003ad8:	1c0a      	adds	r2, r1, #0
 8003ada:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003adc:	1c7b      	adds	r3, r7, #1
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d004      	beq.n	8003aee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ae4:	1cbb      	adds	r3, r7, #2
 8003ae6:	881a      	ldrh	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003aec:	e003      	b.n	8003af6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aee:	1cbb      	adds	r3, r7, #2
 8003af0:	881a      	ldrh	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b002      	add	sp, #8
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e303      	b.n	800411a <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2201      	movs	r2, #1
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d100      	bne.n	8003b1e <HAL_RCC_OscConfig+0x1e>
 8003b1c:	e08d      	b.n	8003c3a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b1e:	4bc4      	ldr	r3, [pc, #784]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	220c      	movs	r2, #12
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d00e      	beq.n	8003b48 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b2a:	4bc1      	ldr	r3, [pc, #772]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	220c      	movs	r2, #12
 8003b30:	4013      	ands	r3, r2
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d116      	bne.n	8003b64 <HAL_RCC_OscConfig+0x64>
 8003b36:	4bbe      	ldr	r3, [pc, #760]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	025b      	lsls	r3, r3, #9
 8003b3e:	401a      	ands	r2, r3
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	025b      	lsls	r3, r3, #9
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d10d      	bne.n	8003b64 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b48:	4bb9      	ldr	r3, [pc, #740]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	029b      	lsls	r3, r3, #10
 8003b50:	4013      	ands	r3, r2
 8003b52:	d100      	bne.n	8003b56 <HAL_RCC_OscConfig+0x56>
 8003b54:	e070      	b.n	8003c38 <HAL_RCC_OscConfig+0x138>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d000      	beq.n	8003b60 <HAL_RCC_OscConfig+0x60>
 8003b5e:	e06b      	b.n	8003c38 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e2da      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d107      	bne.n	8003b7c <HAL_RCC_OscConfig+0x7c>
 8003b6c:	4bb0      	ldr	r3, [pc, #704]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4baf      	ldr	r3, [pc, #700]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003b72:	2180      	movs	r1, #128	; 0x80
 8003b74:	0249      	lsls	r1, r1, #9
 8003b76:	430a      	orrs	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e02f      	b.n	8003bdc <HAL_RCC_OscConfig+0xdc>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10c      	bne.n	8003b9e <HAL_RCC_OscConfig+0x9e>
 8003b84:	4baa      	ldr	r3, [pc, #680]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4ba9      	ldr	r3, [pc, #676]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003b8a:	49aa      	ldr	r1, [pc, #680]	; (8003e34 <HAL_RCC_OscConfig+0x334>)
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	4ba7      	ldr	r3, [pc, #668]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4ba6      	ldr	r3, [pc, #664]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003b96:	49a8      	ldr	r1, [pc, #672]	; (8003e38 <HAL_RCC_OscConfig+0x338>)
 8003b98:	400a      	ands	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	e01e      	b.n	8003bdc <HAL_RCC_OscConfig+0xdc>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b05      	cmp	r3, #5
 8003ba4:	d10e      	bne.n	8003bc4 <HAL_RCC_OscConfig+0xc4>
 8003ba6:	4ba2      	ldr	r3, [pc, #648]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4ba1      	ldr	r3, [pc, #644]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003bac:	2180      	movs	r1, #128	; 0x80
 8003bae:	02c9      	lsls	r1, r1, #11
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	4b9e      	ldr	r3, [pc, #632]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	4b9d      	ldr	r3, [pc, #628]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003bba:	2180      	movs	r1, #128	; 0x80
 8003bbc:	0249      	lsls	r1, r1, #9
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCC_OscConfig+0xdc>
 8003bc4:	4b9a      	ldr	r3, [pc, #616]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4b99      	ldr	r3, [pc, #612]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003bca:	499a      	ldr	r1, [pc, #616]	; (8003e34 <HAL_RCC_OscConfig+0x334>)
 8003bcc:	400a      	ands	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	4b97      	ldr	r3, [pc, #604]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4b96      	ldr	r3, [pc, #600]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003bd6:	4998      	ldr	r1, [pc, #608]	; (8003e38 <HAL_RCC_OscConfig+0x338>)
 8003bd8:	400a      	ands	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d014      	beq.n	8003c0e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fe ff8c 	bl	8002b00 <HAL_GetTick>
 8003be8:	0003      	movs	r3, r0
 8003bea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bee:	f7fe ff87 	bl	8002b00 <HAL_GetTick>
 8003bf2:	0002      	movs	r2, r0
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b64      	cmp	r3, #100	; 0x64
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e28c      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c00:	4b8b      	ldr	r3, [pc, #556]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	029b      	lsls	r3, r3, #10
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0xee>
 8003c0c:	e015      	b.n	8003c3a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0e:	f7fe ff77 	bl	8002b00 <HAL_GetTick>
 8003c12:	0003      	movs	r3, r0
 8003c14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c18:	f7fe ff72 	bl	8002b00 <HAL_GetTick>
 8003c1c:	0002      	movs	r2, r0
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	; 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e277      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2a:	4b81      	ldr	r3, [pc, #516]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	2380      	movs	r3, #128	; 0x80
 8003c30:	029b      	lsls	r3, r3, #10
 8003c32:	4013      	ands	r3, r2
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x118>
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	4013      	ands	r3, r2
 8003c42:	d100      	bne.n	8003c46 <HAL_RCC_OscConfig+0x146>
 8003c44:	e069      	b.n	8003d1a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c46:	4b7a      	ldr	r3, [pc, #488]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	220c      	movs	r2, #12
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d00b      	beq.n	8003c68 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c50:	4b77      	ldr	r3, [pc, #476]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	220c      	movs	r2, #12
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d11c      	bne.n	8003c96 <HAL_RCC_OscConfig+0x196>
 8003c5c:	4b74      	ldr	r3, [pc, #464]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	2380      	movs	r3, #128	; 0x80
 8003c62:	025b      	lsls	r3, r3, #9
 8003c64:	4013      	ands	r3, r2
 8003c66:	d116      	bne.n	8003c96 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c68:	4b71      	ldr	r3, [pc, #452]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d005      	beq.n	8003c7e <HAL_RCC_OscConfig+0x17e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d001      	beq.n	8003c7e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e24d      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7e:	4b6c      	ldr	r3, [pc, #432]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	22f8      	movs	r2, #248	; 0xf8
 8003c84:	4393      	bics	r3, r2
 8003c86:	0019      	movs	r1, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	00da      	lsls	r2, r3, #3
 8003c8e:	4b68      	ldr	r3, [pc, #416]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003c90:	430a      	orrs	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c94:	e041      	b.n	8003d1a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d024      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c9e:	4b64      	ldr	r3, [pc, #400]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	4b63      	ldr	r3, [pc, #396]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003caa:	f7fe ff29 	bl	8002b00 <HAL_GetTick>
 8003cae:	0003      	movs	r3, r0
 8003cb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb4:	f7fe ff24 	bl	8002b00 <HAL_GetTick>
 8003cb8:	0002      	movs	r2, r0
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e229      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc6:	4b5a      	ldr	r3, [pc, #360]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d0f1      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd0:	4b57      	ldr	r3, [pc, #348]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	22f8      	movs	r2, #248	; 0xf8
 8003cd6:	4393      	bics	r3, r2
 8003cd8:	0019      	movs	r1, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	00da      	lsls	r2, r3, #3
 8003ce0:	4b53      	ldr	r3, [pc, #332]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e018      	b.n	8003d1a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce8:	4b51      	ldr	r3, [pc, #324]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	4b50      	ldr	r3, [pc, #320]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003cee:	2101      	movs	r1, #1
 8003cf0:	438a      	bics	r2, r1
 8003cf2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7fe ff04 	bl	8002b00 <HAL_GetTick>
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cfe:	f7fe feff 	bl	8002b00 <HAL_GetTick>
 8003d02:	0002      	movs	r2, r0
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e204      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d10:	4b47      	ldr	r3, [pc, #284]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2202      	movs	r2, #2
 8003d16:	4013      	ands	r3, r2
 8003d18:	d1f1      	bne.n	8003cfe <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2208      	movs	r2, #8
 8003d20:	4013      	ands	r3, r2
 8003d22:	d036      	beq.n	8003d92 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d019      	beq.n	8003d60 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d2c:	4b40      	ldr	r3, [pc, #256]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d30:	4b3f      	ldr	r3, [pc, #252]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003d32:	2101      	movs	r1, #1
 8003d34:	430a      	orrs	r2, r1
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d38:	f7fe fee2 	bl	8002b00 <HAL_GetTick>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d42:	f7fe fedd 	bl	8002b00 <HAL_GetTick>
 8003d46:	0002      	movs	r2, r0
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e1e2      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d54:	4b36      	ldr	r3, [pc, #216]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	2202      	movs	r2, #2
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d0f1      	beq.n	8003d42 <HAL_RCC_OscConfig+0x242>
 8003d5e:	e018      	b.n	8003d92 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d60:	4b33      	ldr	r3, [pc, #204]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d64:	4b32      	ldr	r3, [pc, #200]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003d66:	2101      	movs	r1, #1
 8003d68:	438a      	bics	r2, r1
 8003d6a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6c:	f7fe fec8 	bl	8002b00 <HAL_GetTick>
 8003d70:	0003      	movs	r3, r0
 8003d72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d76:	f7fe fec3 	bl	8002b00 <HAL_GetTick>
 8003d7a:	0002      	movs	r2, r0
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e1c8      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d88:	4b29      	ldr	r3, [pc, #164]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d1f1      	bne.n	8003d76 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2204      	movs	r2, #4
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d100      	bne.n	8003d9e <HAL_RCC_OscConfig+0x29e>
 8003d9c:	e0b6      	b.n	8003f0c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9e:	231f      	movs	r3, #31
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da6:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003da8:	69da      	ldr	r2, [r3, #28]
 8003daa:	2380      	movs	r3, #128	; 0x80
 8003dac:	055b      	lsls	r3, r3, #21
 8003dae:	4013      	ands	r3, r2
 8003db0:	d111      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db2:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003db4:	69da      	ldr	r2, [r3, #28]
 8003db6:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003db8:	2180      	movs	r1, #128	; 0x80
 8003dba:	0549      	lsls	r1, r1, #21
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	61da      	str	r2, [r3, #28]
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	055b      	lsls	r3, r3, #21
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003dce:	231f      	movs	r3, #31
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd6:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <HAL_RCC_OscConfig+0x33c>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	2380      	movs	r3, #128	; 0x80
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4013      	ands	r3, r2
 8003de0:	d11a      	bne.n	8003e18 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003de2:	4b16      	ldr	r3, [pc, #88]	; (8003e3c <HAL_RCC_OscConfig+0x33c>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <HAL_RCC_OscConfig+0x33c>)
 8003de8:	2180      	movs	r1, #128	; 0x80
 8003dea:	0049      	lsls	r1, r1, #1
 8003dec:	430a      	orrs	r2, r1
 8003dee:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df0:	f7fe fe86 	bl	8002b00 <HAL_GetTick>
 8003df4:	0003      	movs	r3, r0
 8003df6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfa:	f7fe fe81 	bl	8002b00 <HAL_GetTick>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b64      	cmp	r3, #100	; 0x64
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e186      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCC_OscConfig+0x33c>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	4013      	ands	r3, r2
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d10f      	bne.n	8003e40 <HAL_RCC_OscConfig+0x340>
 8003e20:	4b03      	ldr	r3, [pc, #12]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003e22:	6a1a      	ldr	r2, [r3, #32]
 8003e24:	4b02      	ldr	r3, [pc, #8]	; (8003e30 <HAL_RCC_OscConfig+0x330>)
 8003e26:	2101      	movs	r1, #1
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	621a      	str	r2, [r3, #32]
 8003e2c:	e036      	b.n	8003e9c <HAL_RCC_OscConfig+0x39c>
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	40021000 	.word	0x40021000
 8003e34:	fffeffff 	.word	0xfffeffff
 8003e38:	fffbffff 	.word	0xfffbffff
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10c      	bne.n	8003e62 <HAL_RCC_OscConfig+0x362>
 8003e48:	4bb6      	ldr	r3, [pc, #728]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003e4a:	6a1a      	ldr	r2, [r3, #32]
 8003e4c:	4bb5      	ldr	r3, [pc, #724]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003e4e:	2101      	movs	r1, #1
 8003e50:	438a      	bics	r2, r1
 8003e52:	621a      	str	r2, [r3, #32]
 8003e54:	4bb3      	ldr	r3, [pc, #716]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003e56:	6a1a      	ldr	r2, [r3, #32]
 8003e58:	4bb2      	ldr	r3, [pc, #712]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003e5a:	2104      	movs	r1, #4
 8003e5c:	438a      	bics	r2, r1
 8003e5e:	621a      	str	r2, [r3, #32]
 8003e60:	e01c      	b.n	8003e9c <HAL_RCC_OscConfig+0x39c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b05      	cmp	r3, #5
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x384>
 8003e6a:	4bae      	ldr	r3, [pc, #696]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003e6c:	6a1a      	ldr	r2, [r3, #32]
 8003e6e:	4bad      	ldr	r3, [pc, #692]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003e70:	2104      	movs	r1, #4
 8003e72:	430a      	orrs	r2, r1
 8003e74:	621a      	str	r2, [r3, #32]
 8003e76:	4bab      	ldr	r3, [pc, #684]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003e78:	6a1a      	ldr	r2, [r3, #32]
 8003e7a:	4baa      	ldr	r3, [pc, #680]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	621a      	str	r2, [r3, #32]
 8003e82:	e00b      	b.n	8003e9c <HAL_RCC_OscConfig+0x39c>
 8003e84:	4ba7      	ldr	r3, [pc, #668]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003e86:	6a1a      	ldr	r2, [r3, #32]
 8003e88:	4ba6      	ldr	r3, [pc, #664]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	438a      	bics	r2, r1
 8003e8e:	621a      	str	r2, [r3, #32]
 8003e90:	4ba4      	ldr	r3, [pc, #656]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003e92:	6a1a      	ldr	r2, [r3, #32]
 8003e94:	4ba3      	ldr	r3, [pc, #652]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003e96:	2104      	movs	r1, #4
 8003e98:	438a      	bics	r2, r1
 8003e9a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d014      	beq.n	8003ece <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea4:	f7fe fe2c 	bl	8002b00 <HAL_GetTick>
 8003ea8:	0003      	movs	r3, r0
 8003eaa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eac:	e009      	b.n	8003ec2 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fe fe27 	bl	8002b00 <HAL_GetTick>
 8003eb2:	0002      	movs	r2, r0
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	4a9b      	ldr	r2, [pc, #620]	; (8004128 <HAL_RCC_OscConfig+0x628>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e12b      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec2:	4b98      	ldr	r3, [pc, #608]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x3ae>
 8003ecc:	e013      	b.n	8003ef6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ece:	f7fe fe17 	bl	8002b00 <HAL_GetTick>
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed6:	e009      	b.n	8003eec <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed8:	f7fe fe12 	bl	8002b00 <HAL_GetTick>
 8003edc:	0002      	movs	r2, r0
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	4a91      	ldr	r2, [pc, #580]	; (8004128 <HAL_RCC_OscConfig+0x628>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e116      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eec:	4b8d      	ldr	r3, [pc, #564]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ef6:	231f      	movs	r3, #31
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d105      	bne.n	8003f0c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f00:	4b88      	ldr	r3, [pc, #544]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	4b87      	ldr	r3, [pc, #540]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003f06:	4989      	ldr	r1, [pc, #548]	; (800412c <HAL_RCC_OscConfig+0x62c>)
 8003f08:	400a      	ands	r2, r1
 8003f0a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2210      	movs	r2, #16
 8003f12:	4013      	ands	r3, r2
 8003f14:	d063      	beq.n	8003fde <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d12a      	bne.n	8003f74 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f1e:	4b81      	ldr	r3, [pc, #516]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f22:	4b80      	ldr	r3, [pc, #512]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003f24:	2104      	movs	r1, #4
 8003f26:	430a      	orrs	r2, r1
 8003f28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003f2a:	4b7e      	ldr	r3, [pc, #504]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2e:	4b7d      	ldr	r3, [pc, #500]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003f30:	2101      	movs	r1, #1
 8003f32:	430a      	orrs	r2, r1
 8003f34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f36:	f7fe fde3 	bl	8002b00 <HAL_GetTick>
 8003f3a:	0003      	movs	r3, r0
 8003f3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f40:	f7fe fdde 	bl	8002b00 <HAL_GetTick>
 8003f44:	0002      	movs	r2, r0
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0e3      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f52:	4b74      	ldr	r3, [pc, #464]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f56:	2202      	movs	r2, #2
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d0f1      	beq.n	8003f40 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f5c:	4b71      	ldr	r3, [pc, #452]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f60:	22f8      	movs	r2, #248	; 0xf8
 8003f62:	4393      	bics	r3, r2
 8003f64:	0019      	movs	r1, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	00da      	lsls	r2, r3, #3
 8003f6c:	4b6d      	ldr	r3, [pc, #436]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	635a      	str	r2, [r3, #52]	; 0x34
 8003f72:	e034      	b.n	8003fde <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	3305      	adds	r3, #5
 8003f7a:	d111      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003f7c:	4b69      	ldr	r3, [pc, #420]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f80:	4b68      	ldr	r3, [pc, #416]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003f82:	2104      	movs	r1, #4
 8003f84:	438a      	bics	r2, r1
 8003f86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f88:	4b66      	ldr	r3, [pc, #408]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8c:	22f8      	movs	r2, #248	; 0xf8
 8003f8e:	4393      	bics	r3, r2
 8003f90:	0019      	movs	r1, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	00da      	lsls	r2, r3, #3
 8003f98:	4b62      	ldr	r3, [pc, #392]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f9e:	e01e      	b.n	8003fde <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003fa0:	4b60      	ldr	r3, [pc, #384]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa4:	4b5f      	ldr	r3, [pc, #380]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003fa6:	2104      	movs	r1, #4
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003fac:	4b5d      	ldr	r3, [pc, #372]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb0:	4b5c      	ldr	r3, [pc, #368]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	438a      	bics	r2, r1
 8003fb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb8:	f7fe fda2 	bl	8002b00 <HAL_GetTick>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003fc2:	f7fe fd9d 	bl	8002b00 <HAL_GetTick>
 8003fc6:	0002      	movs	r2, r0
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e0a2      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003fd4:	4b53      	ldr	r3, [pc, #332]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd8:	2202      	movs	r2, #2
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d1f1      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d100      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x4e8>
 8003fe6:	e097      	b.n	8004118 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fe8:	4b4e      	ldr	r3, [pc, #312]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	220c      	movs	r2, #12
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d100      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x4f6>
 8003ff4:	e06b      	b.n	80040ce <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d14c      	bne.n	8004098 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffe:	4b49      	ldr	r3, [pc, #292]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4b48      	ldr	r3, [pc, #288]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8004004:	494a      	ldr	r1, [pc, #296]	; (8004130 <HAL_RCC_OscConfig+0x630>)
 8004006:	400a      	ands	r2, r1
 8004008:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400a:	f7fe fd79 	bl	8002b00 <HAL_GetTick>
 800400e:	0003      	movs	r3, r0
 8004010:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004014:	f7fe fd74 	bl	8002b00 <HAL_GetTick>
 8004018:	0002      	movs	r2, r0
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e079      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004026:	4b3f      	ldr	r3, [pc, #252]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	2380      	movs	r3, #128	; 0x80
 800402c:	049b      	lsls	r3, r3, #18
 800402e:	4013      	ands	r3, r2
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004032:	4b3c      	ldr	r3, [pc, #240]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	220f      	movs	r2, #15
 8004038:	4393      	bics	r3, r2
 800403a:	0019      	movs	r1, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004040:	4b38      	ldr	r3, [pc, #224]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8004042:	430a      	orrs	r2, r1
 8004044:	62da      	str	r2, [r3, #44]	; 0x2c
 8004046:	4b37      	ldr	r3, [pc, #220]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4a3a      	ldr	r2, [pc, #232]	; (8004134 <HAL_RCC_OscConfig+0x634>)
 800404c:	4013      	ands	r3, r2
 800404e:	0019      	movs	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	431a      	orrs	r2, r3
 800405a:	4b32      	ldr	r3, [pc, #200]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 800405c:	430a      	orrs	r2, r1
 800405e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004060:	4b30      	ldr	r3, [pc, #192]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4b2f      	ldr	r3, [pc, #188]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 8004066:	2180      	movs	r1, #128	; 0x80
 8004068:	0449      	lsls	r1, r1, #17
 800406a:	430a      	orrs	r2, r1
 800406c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406e:	f7fe fd47 	bl	8002b00 <HAL_GetTick>
 8004072:	0003      	movs	r3, r0
 8004074:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004078:	f7fe fd42 	bl	8002b00 <HAL_GetTick>
 800407c:	0002      	movs	r2, r0
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e047      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800408a:	4b26      	ldr	r3, [pc, #152]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	049b      	lsls	r3, r3, #18
 8004092:	4013      	ands	r3, r2
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0x578>
 8004096:	e03f      	b.n	8004118 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004098:	4b22      	ldr	r3, [pc, #136]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b21      	ldr	r3, [pc, #132]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 800409e:	4924      	ldr	r1, [pc, #144]	; (8004130 <HAL_RCC_OscConfig+0x630>)
 80040a0:	400a      	ands	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fe fd2c 	bl	8002b00 <HAL_GetTick>
 80040a8:	0003      	movs	r3, r0
 80040aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ae:	f7fe fd27 	bl	8002b00 <HAL_GetTick>
 80040b2:	0002      	movs	r2, r0
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e02c      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c0:	4b18      	ldr	r3, [pc, #96]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	049b      	lsls	r3, r3, #18
 80040c8:	4013      	ands	r3, r2
 80040ca:	d1f0      	bne.n	80040ae <HAL_RCC_OscConfig+0x5ae>
 80040cc:	e024      	b.n	8004118 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e01f      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80040da:	4b12      	ldr	r3, [pc, #72]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80040e0:	4b10      	ldr	r3, [pc, #64]	; (8004124 <HAL_RCC_OscConfig+0x624>)
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	2380      	movs	r3, #128	; 0x80
 80040ea:	025b      	lsls	r3, r3, #9
 80040ec:	401a      	ands	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d10e      	bne.n	8004114 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	220f      	movs	r2, #15
 80040fa:	401a      	ands	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d107      	bne.n	8004114 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	23f0      	movs	r3, #240	; 0xf0
 8004108:	039b      	lsls	r3, r3, #14
 800410a:	401a      	ands	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	0018      	movs	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	b008      	add	sp, #32
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	40021000 	.word	0x40021000
 8004128:	00001388 	.word	0x00001388
 800412c:	efffffff 	.word	0xefffffff
 8004130:	feffffff 	.word	0xfeffffff
 8004134:	ffc2ffff 	.word	0xffc2ffff

08004138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0b3      	b.n	80042b4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800414c:	4b5b      	ldr	r3, [pc, #364]	; (80042bc <HAL_RCC_ClockConfig+0x184>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2201      	movs	r2, #1
 8004152:	4013      	ands	r3, r2
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d911      	bls.n	800417e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b58      	ldr	r3, [pc, #352]	; (80042bc <HAL_RCC_ClockConfig+0x184>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2201      	movs	r2, #1
 8004160:	4393      	bics	r3, r2
 8004162:	0019      	movs	r1, r3
 8004164:	4b55      	ldr	r3, [pc, #340]	; (80042bc <HAL_RCC_ClockConfig+0x184>)
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416c:	4b53      	ldr	r3, [pc, #332]	; (80042bc <HAL_RCC_ClockConfig+0x184>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2201      	movs	r2, #1
 8004172:	4013      	ands	r3, r2
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d001      	beq.n	800417e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e09a      	b.n	80042b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2202      	movs	r2, #2
 8004184:	4013      	ands	r3, r2
 8004186:	d015      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2204      	movs	r2, #4
 800418e:	4013      	ands	r3, r2
 8004190:	d006      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004192:	4b4b      	ldr	r3, [pc, #300]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	4b4a      	ldr	r3, [pc, #296]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 8004198:	21e0      	movs	r1, #224	; 0xe0
 800419a:	00c9      	lsls	r1, r1, #3
 800419c:	430a      	orrs	r2, r1
 800419e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a0:	4b47      	ldr	r3, [pc, #284]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	22f0      	movs	r2, #240	; 0xf0
 80041a6:	4393      	bics	r3, r2
 80041a8:	0019      	movs	r1, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	4b44      	ldr	r3, [pc, #272]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2201      	movs	r2, #1
 80041ba:	4013      	ands	r3, r2
 80041bc:	d040      	beq.n	8004240 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	4b3e      	ldr	r3, [pc, #248]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	2380      	movs	r3, #128	; 0x80
 80041cc:	029b      	lsls	r3, r3, #10
 80041ce:	4013      	ands	r3, r2
 80041d0:	d114      	bne.n	80041fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e06e      	b.n	80042b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041de:	4b38      	ldr	r3, [pc, #224]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	049b      	lsls	r3, r3, #18
 80041e6:	4013      	ands	r3, r2
 80041e8:	d108      	bne.n	80041fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e062      	b.n	80042b4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ee:	4b34      	ldr	r3, [pc, #208]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2202      	movs	r2, #2
 80041f4:	4013      	ands	r3, r2
 80041f6:	d101      	bne.n	80041fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e05b      	b.n	80042b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fc:	4b30      	ldr	r3, [pc, #192]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2203      	movs	r2, #3
 8004202:	4393      	bics	r3, r2
 8004204:	0019      	movs	r1, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	4b2d      	ldr	r3, [pc, #180]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 800420c:	430a      	orrs	r2, r1
 800420e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004210:	f7fe fc76 	bl	8002b00 <HAL_GetTick>
 8004214:	0003      	movs	r3, r0
 8004216:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004218:	e009      	b.n	800422e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421a:	f7fe fc71 	bl	8002b00 <HAL_GetTick>
 800421e:	0002      	movs	r2, r0
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	4a27      	ldr	r2, [pc, #156]	; (80042c4 <HAL_RCC_ClockConfig+0x18c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e042      	b.n	80042b4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	220c      	movs	r2, #12
 8004234:	401a      	ands	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	429a      	cmp	r2, r3
 800423e:	d1ec      	bne.n	800421a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004240:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <HAL_RCC_ClockConfig+0x184>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2201      	movs	r2, #1
 8004246:	4013      	ands	r3, r2
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d211      	bcs.n	8004272 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <HAL_RCC_ClockConfig+0x184>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2201      	movs	r2, #1
 8004254:	4393      	bics	r3, r2
 8004256:	0019      	movs	r1, r3
 8004258:	4b18      	ldr	r3, [pc, #96]	; (80042bc <HAL_RCC_ClockConfig+0x184>)
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004260:	4b16      	ldr	r3, [pc, #88]	; (80042bc <HAL_RCC_ClockConfig+0x184>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2201      	movs	r2, #1
 8004266:	4013      	ands	r3, r2
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d001      	beq.n	8004272 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e020      	b.n	80042b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2204      	movs	r2, #4
 8004278:	4013      	ands	r3, r2
 800427a:	d009      	beq.n	8004290 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800427c:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	4a11      	ldr	r2, [pc, #68]	; (80042c8 <HAL_RCC_ClockConfig+0x190>)
 8004282:	4013      	ands	r3, r2
 8004284:	0019      	movs	r1, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004290:	f000 f820 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 8004294:	0001      	movs	r1, r0
 8004296:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	220f      	movs	r2, #15
 800429e:	4013      	ands	r3, r2
 80042a0:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <HAL_RCC_ClockConfig+0x194>)
 80042a2:	5cd3      	ldrb	r3, [r2, r3]
 80042a4:	000a      	movs	r2, r1
 80042a6:	40da      	lsrs	r2, r3
 80042a8:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <HAL_RCC_ClockConfig+0x198>)
 80042aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80042ac:	2000      	movs	r0, #0
 80042ae:	f7fe fbe1 	bl	8002a74 <HAL_InitTick>
  
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	0018      	movs	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b004      	add	sp, #16
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40022000 	.word	0x40022000
 80042c0:	40021000 	.word	0x40021000
 80042c4:	00001388 	.word	0x00001388
 80042c8:	fffff8ff 	.word	0xfffff8ff
 80042cc:	08004ecc 	.word	0x08004ecc
 80042d0:	20000004 	.word	0x20000004

080042d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d4:	b590      	push	{r4, r7, lr}
 80042d6:	b08f      	sub	sp, #60	; 0x3c
 80042d8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80042da:	2314      	movs	r3, #20
 80042dc:	18fb      	adds	r3, r7, r3
 80042de:	4a2b      	ldr	r2, [pc, #172]	; (800438c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80042e2:	c313      	stmia	r3!, {r0, r1, r4}
 80042e4:	6812      	ldr	r2, [r2, #0]
 80042e6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80042e8:	1d3b      	adds	r3, r7, #4
 80042ea:	4a29      	ldr	r2, [pc, #164]	; (8004390 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80042ee:	c313      	stmia	r3!, {r0, r1, r4}
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042f8:	2300      	movs	r3, #0
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80042fc:	2300      	movs	r3, #0
 80042fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004300:	2300      	movs	r3, #0
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004308:	4b22      	ldr	r3, [pc, #136]	; (8004394 <HAL_RCC_GetSysClockFreq+0xc0>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004310:	220c      	movs	r2, #12
 8004312:	4013      	ands	r3, r2
 8004314:	2b04      	cmp	r3, #4
 8004316:	d002      	beq.n	800431e <HAL_RCC_GetSysClockFreq+0x4a>
 8004318:	2b08      	cmp	r3, #8
 800431a:	d003      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0x50>
 800431c:	e02d      	b.n	800437a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800431e:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004320:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004322:	e02d      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004326:	0c9b      	lsrs	r3, r3, #18
 8004328:	220f      	movs	r2, #15
 800432a:	4013      	ands	r3, r2
 800432c:	2214      	movs	r2, #20
 800432e:	18ba      	adds	r2, r7, r2
 8004330:	5cd3      	ldrb	r3, [r2, r3]
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004334:	4b17      	ldr	r3, [pc, #92]	; (8004394 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	220f      	movs	r2, #15
 800433a:	4013      	ands	r3, r2
 800433c:	1d3a      	adds	r2, r7, #4
 800433e:	5cd3      	ldrb	r3, [r2, r3]
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	025b      	lsls	r3, r3, #9
 8004348:	4013      	ands	r3, r2
 800434a:	d009      	beq.n	8004360 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800434c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800434e:	4812      	ldr	r0, [pc, #72]	; (8004398 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004350:	f7fb feda 	bl	8000108 <__udivsi3>
 8004354:	0003      	movs	r3, r0
 8004356:	001a      	movs	r2, r3
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	4353      	muls	r3, r2
 800435c:	637b      	str	r3, [r7, #52]	; 0x34
 800435e:	e009      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004362:	000a      	movs	r2, r1
 8004364:	0152      	lsls	r2, r2, #5
 8004366:	1a52      	subs	r2, r2, r1
 8004368:	0193      	lsls	r3, r2, #6
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	185b      	adds	r3, r3, r1
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004376:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004378:	e002      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800437a:	4b07      	ldr	r3, [pc, #28]	; (8004398 <HAL_RCC_GetSysClockFreq+0xc4>)
 800437c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800437e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004382:	0018      	movs	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	b00f      	add	sp, #60	; 0x3c
 8004388:	bd90      	pop	{r4, r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	08004dac 	.word	0x08004dac
 8004390:	08004dbc 	.word	0x08004dbc
 8004394:	40021000 	.word	0x40021000
 8004398:	007a1200 	.word	0x007a1200

0800439c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a0:	4b02      	ldr	r3, [pc, #8]	; (80043ac <HAL_RCC_GetHCLKFreq+0x10>)
 80043a2:	681b      	ldr	r3, [r3, #0]
}
 80043a4:	0018      	movs	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	20000004 	.word	0x20000004

080043b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80043b4:	f7ff fff2 	bl	800439c <HAL_RCC_GetHCLKFreq>
 80043b8:	0001      	movs	r1, r0
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	2207      	movs	r2, #7
 80043c2:	4013      	ands	r3, r2
 80043c4:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043c6:	5cd3      	ldrb	r3, [r2, r3]
 80043c8:	40d9      	lsrs	r1, r3
 80043ca:	000b      	movs	r3, r1
}    
 80043cc:	0018      	movs	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	40021000 	.word	0x40021000
 80043d8:	08004edc 	.word	0x08004edc

080043dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	2380      	movs	r3, #128	; 0x80
 80043f2:	025b      	lsls	r3, r3, #9
 80043f4:	4013      	ands	r3, r2
 80043f6:	d100      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80043f8:	e08f      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80043fa:	2317      	movs	r3, #23
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	2200      	movs	r2, #0
 8004400:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004402:	4b57      	ldr	r3, [pc, #348]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004404:	69da      	ldr	r2, [r3, #28]
 8004406:	2380      	movs	r3, #128	; 0x80
 8004408:	055b      	lsls	r3, r3, #21
 800440a:	4013      	ands	r3, r2
 800440c:	d111      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800440e:	4b54      	ldr	r3, [pc, #336]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004410:	69da      	ldr	r2, [r3, #28]
 8004412:	4b53      	ldr	r3, [pc, #332]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004414:	2180      	movs	r1, #128	; 0x80
 8004416:	0549      	lsls	r1, r1, #21
 8004418:	430a      	orrs	r2, r1
 800441a:	61da      	str	r2, [r3, #28]
 800441c:	4b50      	ldr	r3, [pc, #320]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	055b      	lsls	r3, r3, #21
 8004424:	4013      	ands	r3, r2
 8004426:	60bb      	str	r3, [r7, #8]
 8004428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800442a:	2317      	movs	r3, #23
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	2201      	movs	r2, #1
 8004430:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004432:	4b4c      	ldr	r3, [pc, #304]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	4013      	ands	r3, r2
 800443c:	d11a      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800443e:	4b49      	ldr	r3, [pc, #292]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4b48      	ldr	r3, [pc, #288]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004444:	2180      	movs	r1, #128	; 0x80
 8004446:	0049      	lsls	r1, r1, #1
 8004448:	430a      	orrs	r2, r1
 800444a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800444c:	f7fe fb58 	bl	8002b00 <HAL_GetTick>
 8004450:	0003      	movs	r3, r0
 8004452:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004454:	e008      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004456:	f7fe fb53 	bl	8002b00 <HAL_GetTick>
 800445a:	0002      	movs	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b64      	cmp	r3, #100	; 0x64
 8004462:	d901      	bls.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e077      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004468:	4b3e      	ldr	r3, [pc, #248]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	4013      	ands	r3, r2
 8004472:	d0f0      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004474:	4b3a      	ldr	r3, [pc, #232]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004476:	6a1a      	ldr	r2, [r3, #32]
 8004478:	23c0      	movs	r3, #192	; 0xc0
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4013      	ands	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d034      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	23c0      	movs	r3, #192	; 0xc0
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4013      	ands	r3, r2
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	429a      	cmp	r2, r3
 8004494:	d02c      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004496:	4b32      	ldr	r3, [pc, #200]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	4a33      	ldr	r2, [pc, #204]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800449c:	4013      	ands	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044a0:	4b2f      	ldr	r3, [pc, #188]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044a2:	6a1a      	ldr	r2, [r3, #32]
 80044a4:	4b2e      	ldr	r3, [pc, #184]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044a6:	2180      	movs	r1, #128	; 0x80
 80044a8:	0249      	lsls	r1, r1, #9
 80044aa:	430a      	orrs	r2, r1
 80044ac:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044ae:	4b2c      	ldr	r3, [pc, #176]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044b0:	6a1a      	ldr	r2, [r3, #32]
 80044b2:	4b2b      	ldr	r3, [pc, #172]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044b4:	492d      	ldr	r1, [pc, #180]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80044b6:	400a      	ands	r2, r1
 80044b8:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044ba:	4b29      	ldr	r3, [pc, #164]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	4013      	ands	r3, r2
 80044c6:	d013      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c8:	f7fe fb1a 	bl	8002b00 <HAL_GetTick>
 80044cc:	0003      	movs	r3, r0
 80044ce:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d0:	e009      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d2:	f7fe fb15 	bl	8002b00 <HAL_GetTick>
 80044d6:	0002      	movs	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	4a24      	ldr	r2, [pc, #144]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e038      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e6:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	2202      	movs	r2, #2
 80044ec:	4013      	ands	r3, r2
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044f0:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	4a1c      	ldr	r2, [pc, #112]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	0019      	movs	r1, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	4b18      	ldr	r3, [pc, #96]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004500:	430a      	orrs	r2, r1
 8004502:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004504:	2317      	movs	r3, #23
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d105      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800450e:	4b14      	ldr	r3, [pc, #80]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	4b13      	ldr	r3, [pc, #76]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004514:	4917      	ldr	r1, [pc, #92]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004516:	400a      	ands	r2, r1
 8004518:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2201      	movs	r2, #1
 8004520:	4013      	ands	r3, r2
 8004522:	d009      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004524:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	2203      	movs	r2, #3
 800452a:	4393      	bics	r3, r2
 800452c:	0019      	movs	r1, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004534:	430a      	orrs	r2, r1
 8004536:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2220      	movs	r2, #32
 800453e:	4013      	ands	r3, r2
 8004540:	d009      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004542:	4b07      	ldr	r3, [pc, #28]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	2210      	movs	r2, #16
 8004548:	4393      	bics	r3, r2
 800454a:	0019      	movs	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	4b03      	ldr	r3, [pc, #12]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004552:	430a      	orrs	r2, r1
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	0018      	movs	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	b006      	add	sp, #24
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40021000 	.word	0x40021000
 8004564:	40007000 	.word	0x40007000
 8004568:	fffffcff 	.word	0xfffffcff
 800456c:	fffeffff 	.word	0xfffeffff
 8004570:	00001388 	.word	0x00001388
 8004574:	efffffff 	.word	0xefffffff

08004578 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e044      	b.n	8004614 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458e:	2b00      	cmp	r3, #0
 8004590:	d107      	bne.n	80045a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2270      	movs	r2, #112	; 0x70
 8004596:	2100      	movs	r1, #0
 8004598:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	0018      	movs	r0, r3
 800459e:	f7fe f9b1 	bl	8002904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2224      	movs	r2, #36	; 0x24
 80045a6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2101      	movs	r1, #1
 80045b4:	438a      	bics	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	0018      	movs	r0, r3
 80045bc:	f000 f8d8 	bl	8004770 <UART_SetConfig>
 80045c0:	0003      	movs	r3, r0
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d101      	bne.n	80045ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e024      	b.n	8004614 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f000 fa39 	bl	8004a4c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	490d      	ldr	r1, [pc, #52]	; (800461c <HAL_UART_Init+0xa4>)
 80045e6:	400a      	ands	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2108      	movs	r1, #8
 80045f6:	438a      	bics	r2, r1
 80045f8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2101      	movs	r1, #1
 8004606:	430a      	orrs	r2, r1
 8004608:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	0018      	movs	r0, r3
 800460e:	f000 fad1 	bl	8004bb4 <UART_CheckIdleState>
 8004612:	0003      	movs	r3, r0
}
 8004614:	0018      	movs	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	b002      	add	sp, #8
 800461a:	bd80      	pop	{r7, pc}
 800461c:	fffff7ff 	.word	0xfffff7ff

08004620 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08a      	sub	sp, #40	; 0x28
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	1dbb      	adds	r3, r7, #6
 800462e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004634:	2b20      	cmp	r3, #32
 8004636:	d000      	beq.n	800463a <HAL_UART_Transmit+0x1a>
 8004638:	e095      	b.n	8004766 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_UART_Transmit+0x28>
 8004640:	1dbb      	adds	r3, r7, #6
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e08d      	b.n	8004768 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	2380      	movs	r3, #128	; 0x80
 8004652:	015b      	lsls	r3, r3, #5
 8004654:	429a      	cmp	r2, r3
 8004656:	d109      	bne.n	800466c <HAL_UART_Transmit+0x4c>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d105      	bne.n	800466c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2201      	movs	r2, #1
 8004664:	4013      	ands	r3, r2
 8004666:	d001      	beq.n	800466c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e07d      	b.n	8004768 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2270      	movs	r2, #112	; 0x70
 8004670:	5c9b      	ldrb	r3, [r3, r2]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_UART_Transmit+0x5a>
 8004676:	2302      	movs	r3, #2
 8004678:	e076      	b.n	8004768 <HAL_UART_Transmit+0x148>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2270      	movs	r2, #112	; 0x70
 800467e:	2101      	movs	r1, #1
 8004680:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2221      	movs	r2, #33	; 0x21
 800468c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800468e:	f7fe fa37 	bl	8002b00 <HAL_GetTick>
 8004692:	0003      	movs	r3, r0
 8004694:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1dba      	adds	r2, r7, #6
 800469a:	2150      	movs	r1, #80	; 0x50
 800469c:	8812      	ldrh	r2, [r2, #0]
 800469e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1dba      	adds	r2, r7, #6
 80046a4:	2152      	movs	r1, #82	; 0x52
 80046a6:	8812      	ldrh	r2, [r2, #0]
 80046a8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	015b      	lsls	r3, r3, #5
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d108      	bne.n	80046c8 <HAL_UART_Transmit+0xa8>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d104      	bne.n	80046c8 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	e003      	b.n	80046d0 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046d0:	e02d      	b.n	800472e <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	0013      	movs	r3, r2
 80046dc:	2200      	movs	r2, #0
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	f000 faae 	bl	8004c40 <UART_WaitOnFlagUntilTimeout>
 80046e4:	1e03      	subs	r3, r0, #0
 80046e6:	d001      	beq.n	80046ec <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e03d      	b.n	8004768 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10b      	bne.n	800470a <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	881a      	ldrh	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	05d2      	lsls	r2, r2, #23
 80046fc:	0dd2      	lsrs	r2, r2, #23
 80046fe:	b292      	uxth	r2, r2
 8004700:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	3302      	adds	r3, #2
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	e008      	b.n	800471c <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	b292      	uxth	r2, r2
 8004714:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3301      	adds	r3, #1
 800471a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2252      	movs	r2, #82	; 0x52
 8004720:	5a9b      	ldrh	r3, [r3, r2]
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b299      	uxth	r1, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2252      	movs	r2, #82	; 0x52
 800472c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2252      	movs	r2, #82	; 0x52
 8004732:	5a9b      	ldrh	r3, [r3, r2]
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1cb      	bne.n	80046d2 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	0013      	movs	r3, r2
 8004744:	2200      	movs	r2, #0
 8004746:	2140      	movs	r1, #64	; 0x40
 8004748:	f000 fa7a 	bl	8004c40 <UART_WaitOnFlagUntilTimeout>
 800474c:	1e03      	subs	r3, r0, #0
 800474e:	d001      	beq.n	8004754 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e009      	b.n	8004768 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2270      	movs	r2, #112	; 0x70
 800475e:	2100      	movs	r1, #0
 8004760:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	e000      	b.n	8004768 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8004766:	2302      	movs	r3, #2
  }
}
 8004768:	0018      	movs	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	b008      	add	sp, #32
 800476e:	bd80      	pop	{r7, pc}

08004770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004778:	2300      	movs	r3, #0
 800477a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800477c:	2317      	movs	r3, #23
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4aa3      	ldr	r2, [pc, #652]	; (8004a30 <UART_SetConfig+0x2c0>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	0019      	movs	r1, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	4a9e      	ldr	r2, [pc, #632]	; (8004a34 <UART_SetConfig+0x2c4>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	0019      	movs	r1, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4a95      	ldr	r2, [pc, #596]	; (8004a38 <UART_SetConfig+0x2c8>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	0019      	movs	r1, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047f0:	4b92      	ldr	r3, [pc, #584]	; (8004a3c <UART_SetConfig+0x2cc>)
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	2203      	movs	r2, #3
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d00f      	beq.n	800481c <UART_SetConfig+0xac>
 80047fc:	d304      	bcc.n	8004808 <UART_SetConfig+0x98>
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d011      	beq.n	8004826 <UART_SetConfig+0xb6>
 8004802:	2b03      	cmp	r3, #3
 8004804:	d005      	beq.n	8004812 <UART_SetConfig+0xa2>
 8004806:	e013      	b.n	8004830 <UART_SetConfig+0xc0>
 8004808:	231f      	movs	r3, #31
 800480a:	18fb      	adds	r3, r7, r3
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	e012      	b.n	8004838 <UART_SetConfig+0xc8>
 8004812:	231f      	movs	r3, #31
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	2202      	movs	r2, #2
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	e00d      	b.n	8004838 <UART_SetConfig+0xc8>
 800481c:	231f      	movs	r3, #31
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	2204      	movs	r2, #4
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	e008      	b.n	8004838 <UART_SetConfig+0xc8>
 8004826:	231f      	movs	r3, #31
 8004828:	18fb      	adds	r3, r7, r3
 800482a:	2208      	movs	r2, #8
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	e003      	b.n	8004838 <UART_SetConfig+0xc8>
 8004830:	231f      	movs	r3, #31
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	2210      	movs	r2, #16
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	2380      	movs	r3, #128	; 0x80
 8004840:	021b      	lsls	r3, r3, #8
 8004842:	429a      	cmp	r2, r3
 8004844:	d000      	beq.n	8004848 <UART_SetConfig+0xd8>
 8004846:	e07d      	b.n	8004944 <UART_SetConfig+0x1d4>
  {
    switch (clocksource)
 8004848:	231f      	movs	r3, #31
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d01c      	beq.n	800488c <UART_SetConfig+0x11c>
 8004852:	dc02      	bgt.n	800485a <UART_SetConfig+0xea>
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <UART_SetConfig+0xf4>
 8004858:	e04b      	b.n	80048f2 <UART_SetConfig+0x182>
 800485a:	2b04      	cmp	r3, #4
 800485c:	d025      	beq.n	80048aa <UART_SetConfig+0x13a>
 800485e:	2b08      	cmp	r3, #8
 8004860:	d037      	beq.n	80048d2 <UART_SetConfig+0x162>
 8004862:	e046      	b.n	80048f2 <UART_SetConfig+0x182>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004864:	f7ff fda4 	bl	80043b0 <HAL_RCC_GetPCLK1Freq>
 8004868:	0003      	movs	r3, r0
 800486a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	005a      	lsls	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	085b      	lsrs	r3, r3, #1
 8004876:	18d2      	adds	r2, r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	0019      	movs	r1, r3
 800487e:	0010      	movs	r0, r2
 8004880:	f7fb fc42 	bl	8000108 <__udivsi3>
 8004884:	0003      	movs	r3, r0
 8004886:	b29b      	uxth	r3, r3
 8004888:	61bb      	str	r3, [r7, #24]
        break;
 800488a:	e037      	b.n	80048fc <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	085b      	lsrs	r3, r3, #1
 8004892:	4a6b      	ldr	r2, [pc, #428]	; (8004a40 <UART_SetConfig+0x2d0>)
 8004894:	189a      	adds	r2, r3, r2
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	0019      	movs	r1, r3
 800489c:	0010      	movs	r0, r2
 800489e:	f7fb fc33 	bl	8000108 <__udivsi3>
 80048a2:	0003      	movs	r3, r0
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	61bb      	str	r3, [r7, #24]
        break;
 80048a8:	e028      	b.n	80048fc <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048aa:	f7ff fd13 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 80048ae:	0003      	movs	r3, r0
 80048b0:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	005a      	lsls	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	085b      	lsrs	r3, r3, #1
 80048bc:	18d2      	adds	r2, r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	0019      	movs	r1, r3
 80048c4:	0010      	movs	r0, r2
 80048c6:	f7fb fc1f 	bl	8000108 <__udivsi3>
 80048ca:	0003      	movs	r3, r0
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	61bb      	str	r3, [r7, #24]
        break;
 80048d0:	e014      	b.n	80048fc <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	085b      	lsrs	r3, r3, #1
 80048d8:	2280      	movs	r2, #128	; 0x80
 80048da:	0252      	lsls	r2, r2, #9
 80048dc:	189a      	adds	r2, r3, r2
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	0019      	movs	r1, r3
 80048e4:	0010      	movs	r0, r2
 80048e6:	f7fb fc0f 	bl	8000108 <__udivsi3>
 80048ea:	0003      	movs	r3, r0
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	61bb      	str	r3, [r7, #24]
        break;
 80048f0:	e004      	b.n	80048fc <UART_SetConfig+0x18c>
      default:
        ret = HAL_ERROR;
 80048f2:	2317      	movs	r3, #23
 80048f4:	18fb      	adds	r3, r7, r3
 80048f6:	2201      	movs	r2, #1
 80048f8:	701a      	strb	r2, [r3, #0]
        break;
 80048fa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b0f      	cmp	r3, #15
 8004900:	d91b      	bls.n	800493a <UART_SetConfig+0x1ca>
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	4a4f      	ldr	r2, [pc, #316]	; (8004a44 <UART_SetConfig+0x2d4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d817      	bhi.n	800493a <UART_SetConfig+0x1ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	b29a      	uxth	r2, r3
 800490e:	200a      	movs	r0, #10
 8004910:	183b      	adds	r3, r7, r0
 8004912:	210f      	movs	r1, #15
 8004914:	438a      	bics	r2, r1
 8004916:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	085b      	lsrs	r3, r3, #1
 800491c:	b29b      	uxth	r3, r3
 800491e:	2207      	movs	r2, #7
 8004920:	4013      	ands	r3, r2
 8004922:	b299      	uxth	r1, r3
 8004924:	183b      	adds	r3, r7, r0
 8004926:	183a      	adds	r2, r7, r0
 8004928:	8812      	ldrh	r2, [r2, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	183a      	adds	r2, r7, r0
 8004934:	8812      	ldrh	r2, [r2, #0]
 8004936:	60da      	str	r2, [r3, #12]
 8004938:	e06c      	b.n	8004a14 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 800493a:	2317      	movs	r3, #23
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	2201      	movs	r2, #1
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	e067      	b.n	8004a14 <UART_SetConfig+0x2a4>
    }
  }
  else
  {
    switch (clocksource)
 8004944:	231f      	movs	r3, #31
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d01b      	beq.n	8004986 <UART_SetConfig+0x216>
 800494e:	dc02      	bgt.n	8004956 <UART_SetConfig+0x1e6>
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <UART_SetConfig+0x1f0>
 8004954:	e049      	b.n	80049ea <UART_SetConfig+0x27a>
 8004956:	2b04      	cmp	r3, #4
 8004958:	d024      	beq.n	80049a4 <UART_SetConfig+0x234>
 800495a:	2b08      	cmp	r3, #8
 800495c:	d035      	beq.n	80049ca <UART_SetConfig+0x25a>
 800495e:	e044      	b.n	80049ea <UART_SetConfig+0x27a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004960:	f7ff fd26 	bl	80043b0 <HAL_RCC_GetPCLK1Freq>
 8004964:	0003      	movs	r3, r0
 8004966:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	085a      	lsrs	r2, r3, #1
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	18d2      	adds	r2, r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	0019      	movs	r1, r3
 8004978:	0010      	movs	r0, r2
 800497a:	f7fb fbc5 	bl	8000108 <__udivsi3>
 800497e:	0003      	movs	r3, r0
 8004980:	b29b      	uxth	r3, r3
 8004982:	61bb      	str	r3, [r7, #24]
        break;
 8004984:	e036      	b.n	80049f4 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	085b      	lsrs	r3, r3, #1
 800498c:	4a2e      	ldr	r2, [pc, #184]	; (8004a48 <UART_SetConfig+0x2d8>)
 800498e:	189a      	adds	r2, r3, r2
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	0019      	movs	r1, r3
 8004996:	0010      	movs	r0, r2
 8004998:	f7fb fbb6 	bl	8000108 <__udivsi3>
 800499c:	0003      	movs	r3, r0
 800499e:	b29b      	uxth	r3, r3
 80049a0:	61bb      	str	r3, [r7, #24]
        break;
 80049a2:	e027      	b.n	80049f4 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049a4:	f7ff fc96 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 80049a8:	0003      	movs	r3, r0
 80049aa:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	085a      	lsrs	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	18d2      	adds	r2, r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	0019      	movs	r1, r3
 80049bc:	0010      	movs	r0, r2
 80049be:	f7fb fba3 	bl	8000108 <__udivsi3>
 80049c2:	0003      	movs	r3, r0
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	61bb      	str	r3, [r7, #24]
        break;
 80049c8:	e014      	b.n	80049f4 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	085b      	lsrs	r3, r3, #1
 80049d0:	2280      	movs	r2, #128	; 0x80
 80049d2:	0212      	lsls	r2, r2, #8
 80049d4:	189a      	adds	r2, r3, r2
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	0019      	movs	r1, r3
 80049dc:	0010      	movs	r0, r2
 80049de:	f7fb fb93 	bl	8000108 <__udivsi3>
 80049e2:	0003      	movs	r3, r0
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	61bb      	str	r3, [r7, #24]
        break;
 80049e8:	e004      	b.n	80049f4 <UART_SetConfig+0x284>
      default:
        ret = HAL_ERROR;
 80049ea:	2317      	movs	r3, #23
 80049ec:	18fb      	adds	r3, r7, r3
 80049ee:	2201      	movs	r2, #1
 80049f0:	701a      	strb	r2, [r3, #0]
        break;
 80049f2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2b0f      	cmp	r3, #15
 80049f8:	d908      	bls.n	8004a0c <UART_SetConfig+0x29c>
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	4a11      	ldr	r2, [pc, #68]	; (8004a44 <UART_SetConfig+0x2d4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d804      	bhi.n	8004a0c <UART_SetConfig+0x29c>
    {
      huart->Instance->BRR = usartdiv;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	60da      	str	r2, [r3, #12]
 8004a0a:	e003      	b.n	8004a14 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 8004a0c:	2317      	movs	r3, #23
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	2201      	movs	r2, #1
 8004a12:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004a20:	2317      	movs	r3, #23
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	781b      	ldrb	r3, [r3, #0]
}
 8004a26:	0018      	movs	r0, r3
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	b008      	add	sp, #32
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	ffff69f3 	.word	0xffff69f3
 8004a34:	ffffcfff 	.word	0xffffcfff
 8004a38:	fffff4ff 	.word	0xfffff4ff
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	00f42400 	.word	0x00f42400
 8004a44:	0000ffff 	.word	0x0000ffff
 8004a48:	007a1200 	.word	0x007a1200

08004a4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	2201      	movs	r2, #1
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d00b      	beq.n	8004a76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4a4a      	ldr	r2, [pc, #296]	; (8004b90 <UART_AdvFeatureConfig+0x144>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	0019      	movs	r1, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d00b      	beq.n	8004a98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	4a43      	ldr	r2, [pc, #268]	; (8004b94 <UART_AdvFeatureConfig+0x148>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	0019      	movs	r1, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	2204      	movs	r2, #4
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	d00b      	beq.n	8004aba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	4a3b      	ldr	r2, [pc, #236]	; (8004b98 <UART_AdvFeatureConfig+0x14c>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	0019      	movs	r1, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	2208      	movs	r2, #8
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d00b      	beq.n	8004adc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4a34      	ldr	r2, [pc, #208]	; (8004b9c <UART_AdvFeatureConfig+0x150>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	0019      	movs	r1, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	2210      	movs	r2, #16
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d00b      	beq.n	8004afe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	4a2c      	ldr	r2, [pc, #176]	; (8004ba0 <UART_AdvFeatureConfig+0x154>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	0019      	movs	r1, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	2220      	movs	r2, #32
 8004b04:	4013      	ands	r3, r2
 8004b06:	d00b      	beq.n	8004b20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	4a25      	ldr	r2, [pc, #148]	; (8004ba4 <UART_AdvFeatureConfig+0x158>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	0019      	movs	r1, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	2240      	movs	r2, #64	; 0x40
 8004b26:	4013      	ands	r3, r2
 8004b28:	d01d      	beq.n	8004b66 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	4a1d      	ldr	r2, [pc, #116]	; (8004ba8 <UART_AdvFeatureConfig+0x15c>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	0019      	movs	r1, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b46:	2380      	movs	r3, #128	; 0x80
 8004b48:	035b      	lsls	r3, r3, #13
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d10b      	bne.n	8004b66 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	4a15      	ldr	r2, [pc, #84]	; (8004bac <UART_AdvFeatureConfig+0x160>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	0019      	movs	r1, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	2280      	movs	r2, #128	; 0x80
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d00b      	beq.n	8004b88 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	4a0e      	ldr	r2, [pc, #56]	; (8004bb0 <UART_AdvFeatureConfig+0x164>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	0019      	movs	r1, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	605a      	str	r2, [r3, #4]
  }
}
 8004b88:	46c0      	nop			; (mov r8, r8)
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b002      	add	sp, #8
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	fffdffff 	.word	0xfffdffff
 8004b94:	fffeffff 	.word	0xfffeffff
 8004b98:	fffbffff 	.word	0xfffbffff
 8004b9c:	ffff7fff 	.word	0xffff7fff
 8004ba0:	ffffefff 	.word	0xffffefff
 8004ba4:	ffffdfff 	.word	0xffffdfff
 8004ba8:	ffefffff 	.word	0xffefffff
 8004bac:	ff9fffff 	.word	0xff9fffff
 8004bb0:	fff7ffff 	.word	0xfff7ffff

08004bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004bc2:	f7fd ff9d 	bl	8002b00 <HAL_GetTick>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d10d      	bne.n	8004bf4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	2380      	movs	r3, #128	; 0x80
 8004bdc:	0399      	lsls	r1, r3, #14
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <UART_CheckIdleState+0x88>)
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	0013      	movs	r3, r2
 8004be6:	2200      	movs	r2, #0
 8004be8:	f000 f82a 	bl	8004c40 <UART_WaitOnFlagUntilTimeout>
 8004bec:	1e03      	subs	r3, r0, #0
 8004bee:	d001      	beq.n	8004bf4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e01f      	b.n	8004c34 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d10d      	bne.n	8004c1e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	2380      	movs	r3, #128	; 0x80
 8004c06:	03d9      	lsls	r1, r3, #15
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <UART_CheckIdleState+0x88>)
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	0013      	movs	r3, r2
 8004c10:	2200      	movs	r2, #0
 8004c12:	f000 f815 	bl	8004c40 <UART_WaitOnFlagUntilTimeout>
 8004c16:	1e03      	subs	r3, r0, #0
 8004c18:	d001      	beq.n	8004c1e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e00a      	b.n	8004c34 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2270      	movs	r2, #112	; 0x70
 8004c2e:	2100      	movs	r1, #0
 8004c30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	0018      	movs	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b004      	add	sp, #16
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	01ffffff 	.word	0x01ffffff

08004c40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	603b      	str	r3, [r7, #0]
 8004c4c:	1dfb      	adds	r3, r7, #7
 8004c4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c50:	e05d      	b.n	8004d0e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	3301      	adds	r3, #1
 8004c56:	d05a      	beq.n	8004d0e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c58:	f7fd ff52 	bl	8002b00 <HAL_GetTick>
 8004c5c:	0002      	movs	r2, r0
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d302      	bcc.n	8004c6e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d11b      	bne.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	492f      	ldr	r1, [pc, #188]	; (8004d38 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004c7a:	400a      	ands	r2, r1
 8004c7c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2101      	movs	r1, #1
 8004c8a:	438a      	bics	r2, r1
 8004c8c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2220      	movs	r2, #32
 8004c98:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2270      	movs	r2, #112	; 0x70
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e043      	b.n	8004d2e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2204      	movs	r2, #4
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d02d      	beq.n	8004d0e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69da      	ldr	r2, [r3, #28]
 8004cb8:	2380      	movs	r3, #128	; 0x80
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	401a      	ands	r2, r3
 8004cbe:	2380      	movs	r3, #128	; 0x80
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d123      	bne.n	8004d0e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2280      	movs	r2, #128	; 0x80
 8004ccc:	0112      	lsls	r2, r2, #4
 8004cce:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4917      	ldr	r1, [pc, #92]	; (8004d38 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004cdc:	400a      	ands	r2, r1
 8004cde:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2101      	movs	r1, #1
 8004cec:	438a      	bics	r2, r1
 8004cee:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2270      	movs	r2, #112	; 0x70
 8004d06:	2100      	movs	r1, #0
 8004d08:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e00f      	b.n	8004d2e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	4013      	ands	r3, r2
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	425a      	negs	r2, r3
 8004d1e:	4153      	adcs	r3, r2
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	001a      	movs	r2, r3
 8004d24:	1dfb      	adds	r3, r7, #7
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d092      	beq.n	8004c52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	0018      	movs	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	b004      	add	sp, #16
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	fffffe5f 	.word	0xfffffe5f

08004d3c <__libc_init_array>:
 8004d3c:	b570      	push	{r4, r5, r6, lr}
 8004d3e:	2600      	movs	r6, #0
 8004d40:	4d0c      	ldr	r5, [pc, #48]	; (8004d74 <__libc_init_array+0x38>)
 8004d42:	4c0d      	ldr	r4, [pc, #52]	; (8004d78 <__libc_init_array+0x3c>)
 8004d44:	1b64      	subs	r4, r4, r5
 8004d46:	10a4      	asrs	r4, r4, #2
 8004d48:	42a6      	cmp	r6, r4
 8004d4a:	d109      	bne.n	8004d60 <__libc_init_array+0x24>
 8004d4c:	2600      	movs	r6, #0
 8004d4e:	f000 f821 	bl	8004d94 <_init>
 8004d52:	4d0a      	ldr	r5, [pc, #40]	; (8004d7c <__libc_init_array+0x40>)
 8004d54:	4c0a      	ldr	r4, [pc, #40]	; (8004d80 <__libc_init_array+0x44>)
 8004d56:	1b64      	subs	r4, r4, r5
 8004d58:	10a4      	asrs	r4, r4, #2
 8004d5a:	42a6      	cmp	r6, r4
 8004d5c:	d105      	bne.n	8004d6a <__libc_init_array+0x2e>
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
 8004d60:	00b3      	lsls	r3, r6, #2
 8004d62:	58eb      	ldr	r3, [r5, r3]
 8004d64:	4798      	blx	r3
 8004d66:	3601      	adds	r6, #1
 8004d68:	e7ee      	b.n	8004d48 <__libc_init_array+0xc>
 8004d6a:	00b3      	lsls	r3, r6, #2
 8004d6c:	58eb      	ldr	r3, [r5, r3]
 8004d6e:	4798      	blx	r3
 8004d70:	3601      	adds	r6, #1
 8004d72:	e7f2      	b.n	8004d5a <__libc_init_array+0x1e>
 8004d74:	08004ee4 	.word	0x08004ee4
 8004d78:	08004ee4 	.word	0x08004ee4
 8004d7c:	08004ee4 	.word	0x08004ee4
 8004d80:	08004ee8 	.word	0x08004ee8

08004d84 <memset>:
 8004d84:	0003      	movs	r3, r0
 8004d86:	1812      	adds	r2, r2, r0
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d100      	bne.n	8004d8e <memset+0xa>
 8004d8c:	4770      	bx	lr
 8004d8e:	7019      	strb	r1, [r3, #0]
 8004d90:	3301      	adds	r3, #1
 8004d92:	e7f9      	b.n	8004d88 <memset+0x4>

08004d94 <_init>:
 8004d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9a:	bc08      	pop	{r3}
 8004d9c:	469e      	mov	lr, r3
 8004d9e:	4770      	bx	lr

08004da0 <_fini>:
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da6:	bc08      	pop	{r3}
 8004da8:	469e      	mov	lr, r3
 8004daa:	4770      	bx	lr
