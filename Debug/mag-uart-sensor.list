
mag-uart-sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d38  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08003df8  08003df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f34  08003f34  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003f34  08003f34  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f34  08003f34  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f34  08003f34  00013f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f38  08003f38  00013f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000010  08003f4c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003f4c  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4b8  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f54  00000000  00000000  0002a4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b8  00000000  00000000  0002c448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0000c091  00000000  00000000  0002cb00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008a88  00000000  00000000  00038b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00042428  00000000  00000000  00041619  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00083a41  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000fc8  00000000  00000000  00083ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00001510  00000000  00000000  00084a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00004fae  00000000  00000000  00085f98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003de0 	.word	0x08003de0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003de0 	.word	0x08003de0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f9bb 	bl	80005a4 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f93d 	bl	80004b8 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f9ad 	bl	80005a4 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f9a3 	bl	80005a4 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f94b 	bl	8000508 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f941 	bl	8000508 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fdiv>:
 8000294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000296:	4657      	mov	r7, sl
 8000298:	464e      	mov	r6, r9
 800029a:	4645      	mov	r5, r8
 800029c:	46de      	mov	lr, fp
 800029e:	0244      	lsls	r4, r0, #9
 80002a0:	b5e0      	push	{r5, r6, r7, lr}
 80002a2:	0046      	lsls	r6, r0, #1
 80002a4:	4688      	mov	r8, r1
 80002a6:	0a64      	lsrs	r4, r4, #9
 80002a8:	0e36      	lsrs	r6, r6, #24
 80002aa:	0fc7      	lsrs	r7, r0, #31
 80002ac:	2e00      	cmp	r6, #0
 80002ae:	d063      	beq.n	8000378 <__aeabi_fdiv+0xe4>
 80002b0:	2eff      	cmp	r6, #255	; 0xff
 80002b2:	d024      	beq.n	80002fe <__aeabi_fdiv+0x6a>
 80002b4:	2380      	movs	r3, #128	; 0x80
 80002b6:	00e4      	lsls	r4, r4, #3
 80002b8:	04db      	lsls	r3, r3, #19
 80002ba:	431c      	orrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	4699      	mov	r9, r3
 80002c0:	469b      	mov	fp, r3
 80002c2:	3e7f      	subs	r6, #127	; 0x7f
 80002c4:	4643      	mov	r3, r8
 80002c6:	4642      	mov	r2, r8
 80002c8:	025d      	lsls	r5, r3, #9
 80002ca:	0fd2      	lsrs	r2, r2, #31
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	0a6d      	lsrs	r5, r5, #9
 80002d0:	0e1b      	lsrs	r3, r3, #24
 80002d2:	4690      	mov	r8, r2
 80002d4:	4692      	mov	sl, r2
 80002d6:	d065      	beq.n	80003a4 <__aeabi_fdiv+0x110>
 80002d8:	2bff      	cmp	r3, #255	; 0xff
 80002da:	d055      	beq.n	8000388 <__aeabi_fdiv+0xf4>
 80002dc:	2280      	movs	r2, #128	; 0x80
 80002de:	2100      	movs	r1, #0
 80002e0:	00ed      	lsls	r5, r5, #3
 80002e2:	04d2      	lsls	r2, r2, #19
 80002e4:	3b7f      	subs	r3, #127	; 0x7f
 80002e6:	4315      	orrs	r5, r2
 80002e8:	1af6      	subs	r6, r6, r3
 80002ea:	4643      	mov	r3, r8
 80002ec:	464a      	mov	r2, r9
 80002ee:	407b      	eors	r3, r7
 80002f0:	2a0f      	cmp	r2, #15
 80002f2:	d900      	bls.n	80002f6 <__aeabi_fdiv+0x62>
 80002f4:	e08d      	b.n	8000412 <__aeabi_fdiv+0x17e>
 80002f6:	486d      	ldr	r0, [pc, #436]	; (80004ac <__aeabi_fdiv+0x218>)
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	5882      	ldr	r2, [r0, r2]
 80002fc:	4697      	mov	pc, r2
 80002fe:	2c00      	cmp	r4, #0
 8000300:	d154      	bne.n	80003ac <__aeabi_fdiv+0x118>
 8000302:	2308      	movs	r3, #8
 8000304:	4699      	mov	r9, r3
 8000306:	3b06      	subs	r3, #6
 8000308:	26ff      	movs	r6, #255	; 0xff
 800030a:	469b      	mov	fp, r3
 800030c:	e7da      	b.n	80002c4 <__aeabi_fdiv+0x30>
 800030e:	2500      	movs	r5, #0
 8000310:	4653      	mov	r3, sl
 8000312:	2902      	cmp	r1, #2
 8000314:	d01b      	beq.n	800034e <__aeabi_fdiv+0xba>
 8000316:	2903      	cmp	r1, #3
 8000318:	d100      	bne.n	800031c <__aeabi_fdiv+0x88>
 800031a:	e0bf      	b.n	800049c <__aeabi_fdiv+0x208>
 800031c:	2901      	cmp	r1, #1
 800031e:	d028      	beq.n	8000372 <__aeabi_fdiv+0xde>
 8000320:	0030      	movs	r0, r6
 8000322:	307f      	adds	r0, #127	; 0x7f
 8000324:	2800      	cmp	r0, #0
 8000326:	dd20      	ble.n	800036a <__aeabi_fdiv+0xd6>
 8000328:	076a      	lsls	r2, r5, #29
 800032a:	d004      	beq.n	8000336 <__aeabi_fdiv+0xa2>
 800032c:	220f      	movs	r2, #15
 800032e:	402a      	ands	r2, r5
 8000330:	2a04      	cmp	r2, #4
 8000332:	d000      	beq.n	8000336 <__aeabi_fdiv+0xa2>
 8000334:	3504      	adds	r5, #4
 8000336:	012a      	lsls	r2, r5, #4
 8000338:	d503      	bpl.n	8000342 <__aeabi_fdiv+0xae>
 800033a:	0030      	movs	r0, r6
 800033c:	4a5c      	ldr	r2, [pc, #368]	; (80004b0 <__aeabi_fdiv+0x21c>)
 800033e:	3080      	adds	r0, #128	; 0x80
 8000340:	4015      	ands	r5, r2
 8000342:	28fe      	cmp	r0, #254	; 0xfe
 8000344:	dc03      	bgt.n	800034e <__aeabi_fdiv+0xba>
 8000346:	01ac      	lsls	r4, r5, #6
 8000348:	0a64      	lsrs	r4, r4, #9
 800034a:	b2c2      	uxtb	r2, r0
 800034c:	e001      	b.n	8000352 <__aeabi_fdiv+0xbe>
 800034e:	22ff      	movs	r2, #255	; 0xff
 8000350:	2400      	movs	r4, #0
 8000352:	0264      	lsls	r4, r4, #9
 8000354:	05d2      	lsls	r2, r2, #23
 8000356:	0a60      	lsrs	r0, r4, #9
 8000358:	07db      	lsls	r3, r3, #31
 800035a:	4310      	orrs	r0, r2
 800035c:	4318      	orrs	r0, r3
 800035e:	bc3c      	pop	{r2, r3, r4, r5}
 8000360:	4690      	mov	r8, r2
 8000362:	4699      	mov	r9, r3
 8000364:	46a2      	mov	sl, r4
 8000366:	46ab      	mov	fp, r5
 8000368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800036a:	2201      	movs	r2, #1
 800036c:	1a10      	subs	r0, r2, r0
 800036e:	281b      	cmp	r0, #27
 8000370:	dd7c      	ble.n	800046c <__aeabi_fdiv+0x1d8>
 8000372:	2200      	movs	r2, #0
 8000374:	2400      	movs	r4, #0
 8000376:	e7ec      	b.n	8000352 <__aeabi_fdiv+0xbe>
 8000378:	2c00      	cmp	r4, #0
 800037a:	d11d      	bne.n	80003b8 <__aeabi_fdiv+0x124>
 800037c:	2304      	movs	r3, #4
 800037e:	4699      	mov	r9, r3
 8000380:	3b03      	subs	r3, #3
 8000382:	2600      	movs	r6, #0
 8000384:	469b      	mov	fp, r3
 8000386:	e79d      	b.n	80002c4 <__aeabi_fdiv+0x30>
 8000388:	3eff      	subs	r6, #255	; 0xff
 800038a:	2d00      	cmp	r5, #0
 800038c:	d120      	bne.n	80003d0 <__aeabi_fdiv+0x13c>
 800038e:	2102      	movs	r1, #2
 8000390:	4643      	mov	r3, r8
 8000392:	464a      	mov	r2, r9
 8000394:	407b      	eors	r3, r7
 8000396:	430a      	orrs	r2, r1
 8000398:	2a0f      	cmp	r2, #15
 800039a:	d8d8      	bhi.n	800034e <__aeabi_fdiv+0xba>
 800039c:	4845      	ldr	r0, [pc, #276]	; (80004b4 <__aeabi_fdiv+0x220>)
 800039e:	0092      	lsls	r2, r2, #2
 80003a0:	5882      	ldr	r2, [r0, r2]
 80003a2:	4697      	mov	pc, r2
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d119      	bne.n	80003dc <__aeabi_fdiv+0x148>
 80003a8:	2101      	movs	r1, #1
 80003aa:	e7f1      	b.n	8000390 <__aeabi_fdiv+0xfc>
 80003ac:	230c      	movs	r3, #12
 80003ae:	4699      	mov	r9, r3
 80003b0:	3b09      	subs	r3, #9
 80003b2:	26ff      	movs	r6, #255	; 0xff
 80003b4:	469b      	mov	fp, r3
 80003b6:	e785      	b.n	80002c4 <__aeabi_fdiv+0x30>
 80003b8:	0020      	movs	r0, r4
 80003ba:	f001 fe65 	bl	8002088 <__clzsi2>
 80003be:	2676      	movs	r6, #118	; 0x76
 80003c0:	1f43      	subs	r3, r0, #5
 80003c2:	409c      	lsls	r4, r3
 80003c4:	2300      	movs	r3, #0
 80003c6:	4276      	negs	r6, r6
 80003c8:	1a36      	subs	r6, r6, r0
 80003ca:	4699      	mov	r9, r3
 80003cc:	469b      	mov	fp, r3
 80003ce:	e779      	b.n	80002c4 <__aeabi_fdiv+0x30>
 80003d0:	464a      	mov	r2, r9
 80003d2:	2303      	movs	r3, #3
 80003d4:	431a      	orrs	r2, r3
 80003d6:	4691      	mov	r9, r2
 80003d8:	2103      	movs	r1, #3
 80003da:	e786      	b.n	80002ea <__aeabi_fdiv+0x56>
 80003dc:	0028      	movs	r0, r5
 80003de:	f001 fe53 	bl	8002088 <__clzsi2>
 80003e2:	1f43      	subs	r3, r0, #5
 80003e4:	1836      	adds	r6, r6, r0
 80003e6:	409d      	lsls	r5, r3
 80003e8:	3676      	adds	r6, #118	; 0x76
 80003ea:	2100      	movs	r1, #0
 80003ec:	e77d      	b.n	80002ea <__aeabi_fdiv+0x56>
 80003ee:	2480      	movs	r4, #128	; 0x80
 80003f0:	2300      	movs	r3, #0
 80003f2:	03e4      	lsls	r4, r4, #15
 80003f4:	22ff      	movs	r2, #255	; 0xff
 80003f6:	e7ac      	b.n	8000352 <__aeabi_fdiv+0xbe>
 80003f8:	2500      	movs	r5, #0
 80003fa:	2380      	movs	r3, #128	; 0x80
 80003fc:	03db      	lsls	r3, r3, #15
 80003fe:	421c      	tst	r4, r3
 8000400:	d028      	beq.n	8000454 <__aeabi_fdiv+0x1c0>
 8000402:	421d      	tst	r5, r3
 8000404:	d126      	bne.n	8000454 <__aeabi_fdiv+0x1c0>
 8000406:	432b      	orrs	r3, r5
 8000408:	025c      	lsls	r4, r3, #9
 800040a:	0a64      	lsrs	r4, r4, #9
 800040c:	4643      	mov	r3, r8
 800040e:	22ff      	movs	r2, #255	; 0xff
 8000410:	e79f      	b.n	8000352 <__aeabi_fdiv+0xbe>
 8000412:	0162      	lsls	r2, r4, #5
 8000414:	016c      	lsls	r4, r5, #5
 8000416:	42a2      	cmp	r2, r4
 8000418:	d224      	bcs.n	8000464 <__aeabi_fdiv+0x1d0>
 800041a:	211b      	movs	r1, #27
 800041c:	2500      	movs	r5, #0
 800041e:	3e01      	subs	r6, #1
 8000420:	2701      	movs	r7, #1
 8000422:	0010      	movs	r0, r2
 8000424:	006d      	lsls	r5, r5, #1
 8000426:	0052      	lsls	r2, r2, #1
 8000428:	2800      	cmp	r0, #0
 800042a:	db01      	blt.n	8000430 <__aeabi_fdiv+0x19c>
 800042c:	4294      	cmp	r4, r2
 800042e:	d801      	bhi.n	8000434 <__aeabi_fdiv+0x1a0>
 8000430:	1b12      	subs	r2, r2, r4
 8000432:	433d      	orrs	r5, r7
 8000434:	3901      	subs	r1, #1
 8000436:	2900      	cmp	r1, #0
 8000438:	d1f3      	bne.n	8000422 <__aeabi_fdiv+0x18e>
 800043a:	0014      	movs	r4, r2
 800043c:	1e62      	subs	r2, r4, #1
 800043e:	4194      	sbcs	r4, r2
 8000440:	4325      	orrs	r5, r4
 8000442:	e76d      	b.n	8000320 <__aeabi_fdiv+0x8c>
 8000444:	46ba      	mov	sl, r7
 8000446:	4659      	mov	r1, fp
 8000448:	0025      	movs	r5, r4
 800044a:	4653      	mov	r3, sl
 800044c:	2902      	cmp	r1, #2
 800044e:	d000      	beq.n	8000452 <__aeabi_fdiv+0x1be>
 8000450:	e761      	b.n	8000316 <__aeabi_fdiv+0x82>
 8000452:	e77c      	b.n	800034e <__aeabi_fdiv+0xba>
 8000454:	2380      	movs	r3, #128	; 0x80
 8000456:	03db      	lsls	r3, r3, #15
 8000458:	431c      	orrs	r4, r3
 800045a:	0264      	lsls	r4, r4, #9
 800045c:	0a64      	lsrs	r4, r4, #9
 800045e:	003b      	movs	r3, r7
 8000460:	22ff      	movs	r2, #255	; 0xff
 8000462:	e776      	b.n	8000352 <__aeabi_fdiv+0xbe>
 8000464:	1b12      	subs	r2, r2, r4
 8000466:	211a      	movs	r1, #26
 8000468:	2501      	movs	r5, #1
 800046a:	e7d9      	b.n	8000420 <__aeabi_fdiv+0x18c>
 800046c:	369e      	adds	r6, #158	; 0x9e
 800046e:	002a      	movs	r2, r5
 8000470:	40b5      	lsls	r5, r6
 8000472:	002c      	movs	r4, r5
 8000474:	40c2      	lsrs	r2, r0
 8000476:	1e65      	subs	r5, r4, #1
 8000478:	41ac      	sbcs	r4, r5
 800047a:	4314      	orrs	r4, r2
 800047c:	0762      	lsls	r2, r4, #29
 800047e:	d004      	beq.n	800048a <__aeabi_fdiv+0x1f6>
 8000480:	220f      	movs	r2, #15
 8000482:	4022      	ands	r2, r4
 8000484:	2a04      	cmp	r2, #4
 8000486:	d000      	beq.n	800048a <__aeabi_fdiv+0x1f6>
 8000488:	3404      	adds	r4, #4
 800048a:	0162      	lsls	r2, r4, #5
 800048c:	d403      	bmi.n	8000496 <__aeabi_fdiv+0x202>
 800048e:	01a4      	lsls	r4, r4, #6
 8000490:	0a64      	lsrs	r4, r4, #9
 8000492:	2200      	movs	r2, #0
 8000494:	e75d      	b.n	8000352 <__aeabi_fdiv+0xbe>
 8000496:	2201      	movs	r2, #1
 8000498:	2400      	movs	r4, #0
 800049a:	e75a      	b.n	8000352 <__aeabi_fdiv+0xbe>
 800049c:	2480      	movs	r4, #128	; 0x80
 800049e:	03e4      	lsls	r4, r4, #15
 80004a0:	432c      	orrs	r4, r5
 80004a2:	0264      	lsls	r4, r4, #9
 80004a4:	0a64      	lsrs	r4, r4, #9
 80004a6:	22ff      	movs	r2, #255	; 0xff
 80004a8:	e753      	b.n	8000352 <__aeabi_fdiv+0xbe>
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	08003e18 	.word	0x08003e18
 80004b0:	f7ffffff 	.word	0xf7ffffff
 80004b4:	08003e58 	.word	0x08003e58

080004b8 <__eqsf2>:
 80004b8:	b570      	push	{r4, r5, r6, lr}
 80004ba:	0042      	lsls	r2, r0, #1
 80004bc:	024e      	lsls	r6, r1, #9
 80004be:	004c      	lsls	r4, r1, #1
 80004c0:	0245      	lsls	r5, r0, #9
 80004c2:	0a6d      	lsrs	r5, r5, #9
 80004c4:	0e12      	lsrs	r2, r2, #24
 80004c6:	0fc3      	lsrs	r3, r0, #31
 80004c8:	0a76      	lsrs	r6, r6, #9
 80004ca:	0e24      	lsrs	r4, r4, #24
 80004cc:	0fc9      	lsrs	r1, r1, #31
 80004ce:	2aff      	cmp	r2, #255	; 0xff
 80004d0:	d00f      	beq.n	80004f2 <__eqsf2+0x3a>
 80004d2:	2cff      	cmp	r4, #255	; 0xff
 80004d4:	d011      	beq.n	80004fa <__eqsf2+0x42>
 80004d6:	2001      	movs	r0, #1
 80004d8:	42a2      	cmp	r2, r4
 80004da:	d000      	beq.n	80004de <__eqsf2+0x26>
 80004dc:	bd70      	pop	{r4, r5, r6, pc}
 80004de:	42b5      	cmp	r5, r6
 80004e0:	d1fc      	bne.n	80004dc <__eqsf2+0x24>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d00d      	beq.n	8000502 <__eqsf2+0x4a>
 80004e6:	2a00      	cmp	r2, #0
 80004e8:	d1f8      	bne.n	80004dc <__eqsf2+0x24>
 80004ea:	0028      	movs	r0, r5
 80004ec:	1e45      	subs	r5, r0, #1
 80004ee:	41a8      	sbcs	r0, r5
 80004f0:	e7f4      	b.n	80004dc <__eqsf2+0x24>
 80004f2:	2001      	movs	r0, #1
 80004f4:	2d00      	cmp	r5, #0
 80004f6:	d1f1      	bne.n	80004dc <__eqsf2+0x24>
 80004f8:	e7eb      	b.n	80004d2 <__eqsf2+0x1a>
 80004fa:	2001      	movs	r0, #1
 80004fc:	2e00      	cmp	r6, #0
 80004fe:	d1ed      	bne.n	80004dc <__eqsf2+0x24>
 8000500:	e7e9      	b.n	80004d6 <__eqsf2+0x1e>
 8000502:	2000      	movs	r0, #0
 8000504:	e7ea      	b.n	80004dc <__eqsf2+0x24>
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__gesf2>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	004a      	lsls	r2, r1, #1
 800050c:	024e      	lsls	r6, r1, #9
 800050e:	0245      	lsls	r5, r0, #9
 8000510:	0044      	lsls	r4, r0, #1
 8000512:	0a6d      	lsrs	r5, r5, #9
 8000514:	0e24      	lsrs	r4, r4, #24
 8000516:	0fc3      	lsrs	r3, r0, #31
 8000518:	0a76      	lsrs	r6, r6, #9
 800051a:	0e12      	lsrs	r2, r2, #24
 800051c:	0fc9      	lsrs	r1, r1, #31
 800051e:	2cff      	cmp	r4, #255	; 0xff
 8000520:	d015      	beq.n	800054e <__gesf2+0x46>
 8000522:	2aff      	cmp	r2, #255	; 0xff
 8000524:	d00e      	beq.n	8000544 <__gesf2+0x3c>
 8000526:	2c00      	cmp	r4, #0
 8000528:	d115      	bne.n	8000556 <__gesf2+0x4e>
 800052a:	2a00      	cmp	r2, #0
 800052c:	d101      	bne.n	8000532 <__gesf2+0x2a>
 800052e:	2e00      	cmp	r6, #0
 8000530:	d01c      	beq.n	800056c <__gesf2+0x64>
 8000532:	2d00      	cmp	r5, #0
 8000534:	d014      	beq.n	8000560 <__gesf2+0x58>
 8000536:	428b      	cmp	r3, r1
 8000538:	d027      	beq.n	800058a <__gesf2+0x82>
 800053a:	2002      	movs	r0, #2
 800053c:	3b01      	subs	r3, #1
 800053e:	4018      	ands	r0, r3
 8000540:	3801      	subs	r0, #1
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	2e00      	cmp	r6, #0
 8000546:	d0ee      	beq.n	8000526 <__gesf2+0x1e>
 8000548:	2002      	movs	r0, #2
 800054a:	4240      	negs	r0, r0
 800054c:	e7f9      	b.n	8000542 <__gesf2+0x3a>
 800054e:	2d00      	cmp	r5, #0
 8000550:	d1fa      	bne.n	8000548 <__gesf2+0x40>
 8000552:	2aff      	cmp	r2, #255	; 0xff
 8000554:	d00e      	beq.n	8000574 <__gesf2+0x6c>
 8000556:	2a00      	cmp	r2, #0
 8000558:	d10e      	bne.n	8000578 <__gesf2+0x70>
 800055a:	2e00      	cmp	r6, #0
 800055c:	d0ed      	beq.n	800053a <__gesf2+0x32>
 800055e:	e00b      	b.n	8000578 <__gesf2+0x70>
 8000560:	2301      	movs	r3, #1
 8000562:	3901      	subs	r1, #1
 8000564:	4399      	bics	r1, r3
 8000566:	0008      	movs	r0, r1
 8000568:	3001      	adds	r0, #1
 800056a:	e7ea      	b.n	8000542 <__gesf2+0x3a>
 800056c:	2000      	movs	r0, #0
 800056e:	2d00      	cmp	r5, #0
 8000570:	d0e7      	beq.n	8000542 <__gesf2+0x3a>
 8000572:	e7e2      	b.n	800053a <__gesf2+0x32>
 8000574:	2e00      	cmp	r6, #0
 8000576:	d1e7      	bne.n	8000548 <__gesf2+0x40>
 8000578:	428b      	cmp	r3, r1
 800057a:	d1de      	bne.n	800053a <__gesf2+0x32>
 800057c:	4294      	cmp	r4, r2
 800057e:	dd05      	ble.n	800058c <__gesf2+0x84>
 8000580:	2102      	movs	r1, #2
 8000582:	1e58      	subs	r0, r3, #1
 8000584:	4008      	ands	r0, r1
 8000586:	3801      	subs	r0, #1
 8000588:	e7db      	b.n	8000542 <__gesf2+0x3a>
 800058a:	2400      	movs	r4, #0
 800058c:	42a2      	cmp	r2, r4
 800058e:	dc04      	bgt.n	800059a <__gesf2+0x92>
 8000590:	42b5      	cmp	r5, r6
 8000592:	d8d2      	bhi.n	800053a <__gesf2+0x32>
 8000594:	2000      	movs	r0, #0
 8000596:	42b5      	cmp	r5, r6
 8000598:	d2d3      	bcs.n	8000542 <__gesf2+0x3a>
 800059a:	1e58      	subs	r0, r3, #1
 800059c:	2301      	movs	r3, #1
 800059e:	4398      	bics	r0, r3
 80005a0:	3001      	adds	r0, #1
 80005a2:	e7ce      	b.n	8000542 <__gesf2+0x3a>

080005a4 <__lesf2>:
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	0042      	lsls	r2, r0, #1
 80005a8:	0244      	lsls	r4, r0, #9
 80005aa:	024d      	lsls	r5, r1, #9
 80005ac:	0fc3      	lsrs	r3, r0, #31
 80005ae:	0048      	lsls	r0, r1, #1
 80005b0:	0a64      	lsrs	r4, r4, #9
 80005b2:	0e12      	lsrs	r2, r2, #24
 80005b4:	0a6d      	lsrs	r5, r5, #9
 80005b6:	0e00      	lsrs	r0, r0, #24
 80005b8:	0fc9      	lsrs	r1, r1, #31
 80005ba:	2aff      	cmp	r2, #255	; 0xff
 80005bc:	d012      	beq.n	80005e4 <__lesf2+0x40>
 80005be:	28ff      	cmp	r0, #255	; 0xff
 80005c0:	d00c      	beq.n	80005dc <__lesf2+0x38>
 80005c2:	2a00      	cmp	r2, #0
 80005c4:	d112      	bne.n	80005ec <__lesf2+0x48>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d119      	bne.n	80005fe <__lesf2+0x5a>
 80005ca:	2d00      	cmp	r5, #0
 80005cc:	d117      	bne.n	80005fe <__lesf2+0x5a>
 80005ce:	2c00      	cmp	r4, #0
 80005d0:	d02b      	beq.n	800062a <__lesf2+0x86>
 80005d2:	2002      	movs	r0, #2
 80005d4:	3b01      	subs	r3, #1
 80005d6:	4018      	ands	r0, r3
 80005d8:	3801      	subs	r0, #1
 80005da:	e026      	b.n	800062a <__lesf2+0x86>
 80005dc:	2d00      	cmp	r5, #0
 80005de:	d0f0      	beq.n	80005c2 <__lesf2+0x1e>
 80005e0:	2002      	movs	r0, #2
 80005e2:	e022      	b.n	800062a <__lesf2+0x86>
 80005e4:	2c00      	cmp	r4, #0
 80005e6:	d1fb      	bne.n	80005e0 <__lesf2+0x3c>
 80005e8:	28ff      	cmp	r0, #255	; 0xff
 80005ea:	d01f      	beq.n	800062c <__lesf2+0x88>
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d11f      	bne.n	8000630 <__lesf2+0x8c>
 80005f0:	2d00      	cmp	r5, #0
 80005f2:	d11d      	bne.n	8000630 <__lesf2+0x8c>
 80005f4:	2002      	movs	r0, #2
 80005f6:	3b01      	subs	r3, #1
 80005f8:	4018      	ands	r0, r3
 80005fa:	3801      	subs	r0, #1
 80005fc:	e015      	b.n	800062a <__lesf2+0x86>
 80005fe:	2c00      	cmp	r4, #0
 8000600:	d00e      	beq.n	8000620 <__lesf2+0x7c>
 8000602:	428b      	cmp	r3, r1
 8000604:	d1e5      	bne.n	80005d2 <__lesf2+0x2e>
 8000606:	2200      	movs	r2, #0
 8000608:	4290      	cmp	r0, r2
 800060a:	dc04      	bgt.n	8000616 <__lesf2+0x72>
 800060c:	42ac      	cmp	r4, r5
 800060e:	d8e0      	bhi.n	80005d2 <__lesf2+0x2e>
 8000610:	2000      	movs	r0, #0
 8000612:	42ac      	cmp	r4, r5
 8000614:	d209      	bcs.n	800062a <__lesf2+0x86>
 8000616:	1e58      	subs	r0, r3, #1
 8000618:	2301      	movs	r3, #1
 800061a:	4398      	bics	r0, r3
 800061c:	3001      	adds	r0, #1
 800061e:	e004      	b.n	800062a <__lesf2+0x86>
 8000620:	2301      	movs	r3, #1
 8000622:	3901      	subs	r1, #1
 8000624:	4399      	bics	r1, r3
 8000626:	0008      	movs	r0, r1
 8000628:	3001      	adds	r0, #1
 800062a:	bd30      	pop	{r4, r5, pc}
 800062c:	2d00      	cmp	r5, #0
 800062e:	d1d7      	bne.n	80005e0 <__lesf2+0x3c>
 8000630:	428b      	cmp	r3, r1
 8000632:	d1ce      	bne.n	80005d2 <__lesf2+0x2e>
 8000634:	4282      	cmp	r2, r0
 8000636:	dde7      	ble.n	8000608 <__lesf2+0x64>
 8000638:	2102      	movs	r1, #2
 800063a:	1e58      	subs	r0, r3, #1
 800063c:	4008      	ands	r0, r1
 800063e:	3801      	subs	r0, #1
 8000640:	e7f3      	b.n	800062a <__lesf2+0x86>
 8000642:	46c0      	nop			; (mov r8, r8)

08000644 <__aeabi_fmul>:
 8000644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000646:	464e      	mov	r6, r9
 8000648:	4657      	mov	r7, sl
 800064a:	4645      	mov	r5, r8
 800064c:	46de      	mov	lr, fp
 800064e:	b5e0      	push	{r5, r6, r7, lr}
 8000650:	0243      	lsls	r3, r0, #9
 8000652:	0a5b      	lsrs	r3, r3, #9
 8000654:	0045      	lsls	r5, r0, #1
 8000656:	b083      	sub	sp, #12
 8000658:	1c0f      	adds	r7, r1, #0
 800065a:	4699      	mov	r9, r3
 800065c:	0e2d      	lsrs	r5, r5, #24
 800065e:	0fc6      	lsrs	r6, r0, #31
 8000660:	2d00      	cmp	r5, #0
 8000662:	d057      	beq.n	8000714 <__aeabi_fmul+0xd0>
 8000664:	2dff      	cmp	r5, #255	; 0xff
 8000666:	d024      	beq.n	80006b2 <__aeabi_fmul+0x6e>
 8000668:	2080      	movs	r0, #128	; 0x80
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	04c0      	lsls	r0, r0, #19
 800066e:	4318      	orrs	r0, r3
 8000670:	2300      	movs	r3, #0
 8000672:	4681      	mov	r9, r0
 8000674:	469a      	mov	sl, r3
 8000676:	469b      	mov	fp, r3
 8000678:	3d7f      	subs	r5, #127	; 0x7f
 800067a:	027c      	lsls	r4, r7, #9
 800067c:	007a      	lsls	r2, r7, #1
 800067e:	0ffb      	lsrs	r3, r7, #31
 8000680:	0a64      	lsrs	r4, r4, #9
 8000682:	0e12      	lsrs	r2, r2, #24
 8000684:	4698      	mov	r8, r3
 8000686:	d023      	beq.n	80006d0 <__aeabi_fmul+0x8c>
 8000688:	2aff      	cmp	r2, #255	; 0xff
 800068a:	d04b      	beq.n	8000724 <__aeabi_fmul+0xe0>
 800068c:	00e3      	lsls	r3, r4, #3
 800068e:	2480      	movs	r4, #128	; 0x80
 8000690:	2000      	movs	r0, #0
 8000692:	04e4      	lsls	r4, r4, #19
 8000694:	3a7f      	subs	r2, #127	; 0x7f
 8000696:	431c      	orrs	r4, r3
 8000698:	18ad      	adds	r5, r5, r2
 800069a:	1c6b      	adds	r3, r5, #1
 800069c:	4647      	mov	r7, r8
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	4653      	mov	r3, sl
 80006a2:	4077      	eors	r7, r6
 80006a4:	003a      	movs	r2, r7
 80006a6:	2b0f      	cmp	r3, #15
 80006a8:	d848      	bhi.n	800073c <__aeabi_fmul+0xf8>
 80006aa:	497d      	ldr	r1, [pc, #500]	; (80008a0 <__aeabi_fmul+0x25c>)
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	58cb      	ldr	r3, [r1, r3]
 80006b0:	469f      	mov	pc, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d000      	beq.n	80006b8 <__aeabi_fmul+0x74>
 80006b6:	e085      	b.n	80007c4 <__aeabi_fmul+0x180>
 80006b8:	3308      	adds	r3, #8
 80006ba:	469a      	mov	sl, r3
 80006bc:	3b06      	subs	r3, #6
 80006be:	469b      	mov	fp, r3
 80006c0:	027c      	lsls	r4, r7, #9
 80006c2:	007a      	lsls	r2, r7, #1
 80006c4:	0ffb      	lsrs	r3, r7, #31
 80006c6:	25ff      	movs	r5, #255	; 0xff
 80006c8:	0a64      	lsrs	r4, r4, #9
 80006ca:	0e12      	lsrs	r2, r2, #24
 80006cc:	4698      	mov	r8, r3
 80006ce:	d1db      	bne.n	8000688 <__aeabi_fmul+0x44>
 80006d0:	2c00      	cmp	r4, #0
 80006d2:	d000      	beq.n	80006d6 <__aeabi_fmul+0x92>
 80006d4:	e090      	b.n	80007f8 <__aeabi_fmul+0x1b4>
 80006d6:	4652      	mov	r2, sl
 80006d8:	2301      	movs	r3, #1
 80006da:	431a      	orrs	r2, r3
 80006dc:	4692      	mov	sl, r2
 80006de:	2001      	movs	r0, #1
 80006e0:	e7db      	b.n	800069a <__aeabi_fmul+0x56>
 80006e2:	464c      	mov	r4, r9
 80006e4:	4658      	mov	r0, fp
 80006e6:	0017      	movs	r7, r2
 80006e8:	2802      	cmp	r0, #2
 80006ea:	d024      	beq.n	8000736 <__aeabi_fmul+0xf2>
 80006ec:	2803      	cmp	r0, #3
 80006ee:	d100      	bne.n	80006f2 <__aeabi_fmul+0xae>
 80006f0:	e0cf      	b.n	8000892 <__aeabi_fmul+0x24e>
 80006f2:	2200      	movs	r2, #0
 80006f4:	2300      	movs	r3, #0
 80006f6:	2801      	cmp	r0, #1
 80006f8:	d14d      	bne.n	8000796 <__aeabi_fmul+0x152>
 80006fa:	0258      	lsls	r0, r3, #9
 80006fc:	05d2      	lsls	r2, r2, #23
 80006fe:	0a40      	lsrs	r0, r0, #9
 8000700:	07ff      	lsls	r7, r7, #31
 8000702:	4310      	orrs	r0, r2
 8000704:	4338      	orrs	r0, r7
 8000706:	b003      	add	sp, #12
 8000708:	bc3c      	pop	{r2, r3, r4, r5}
 800070a:	4690      	mov	r8, r2
 800070c:	4699      	mov	r9, r3
 800070e:	46a2      	mov	sl, r4
 8000710:	46ab      	mov	fp, r5
 8000712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000714:	2b00      	cmp	r3, #0
 8000716:	d15b      	bne.n	80007d0 <__aeabi_fmul+0x18c>
 8000718:	2304      	movs	r3, #4
 800071a:	469a      	mov	sl, r3
 800071c:	3b03      	subs	r3, #3
 800071e:	2500      	movs	r5, #0
 8000720:	469b      	mov	fp, r3
 8000722:	e7aa      	b.n	800067a <__aeabi_fmul+0x36>
 8000724:	35ff      	adds	r5, #255	; 0xff
 8000726:	2c00      	cmp	r4, #0
 8000728:	d160      	bne.n	80007ec <__aeabi_fmul+0x1a8>
 800072a:	4652      	mov	r2, sl
 800072c:	2302      	movs	r3, #2
 800072e:	431a      	orrs	r2, r3
 8000730:	4692      	mov	sl, r2
 8000732:	2002      	movs	r0, #2
 8000734:	e7b1      	b.n	800069a <__aeabi_fmul+0x56>
 8000736:	22ff      	movs	r2, #255	; 0xff
 8000738:	2300      	movs	r3, #0
 800073a:	e7de      	b.n	80006fa <__aeabi_fmul+0xb6>
 800073c:	464b      	mov	r3, r9
 800073e:	0c1b      	lsrs	r3, r3, #16
 8000740:	469c      	mov	ip, r3
 8000742:	464b      	mov	r3, r9
 8000744:	0426      	lsls	r6, r4, #16
 8000746:	0c36      	lsrs	r6, r6, #16
 8000748:	0418      	lsls	r0, r3, #16
 800074a:	4661      	mov	r1, ip
 800074c:	0033      	movs	r3, r6
 800074e:	0c22      	lsrs	r2, r4, #16
 8000750:	4664      	mov	r4, ip
 8000752:	0c00      	lsrs	r0, r0, #16
 8000754:	4343      	muls	r3, r0
 8000756:	434e      	muls	r6, r1
 8000758:	4350      	muls	r0, r2
 800075a:	4354      	muls	r4, r2
 800075c:	1980      	adds	r0, r0, r6
 800075e:	0c1a      	lsrs	r2, r3, #16
 8000760:	1812      	adds	r2, r2, r0
 8000762:	4296      	cmp	r6, r2
 8000764:	d903      	bls.n	800076e <__aeabi_fmul+0x12a>
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	0249      	lsls	r1, r1, #9
 800076a:	468c      	mov	ip, r1
 800076c:	4464      	add	r4, ip
 800076e:	041b      	lsls	r3, r3, #16
 8000770:	0c1b      	lsrs	r3, r3, #16
 8000772:	0410      	lsls	r0, r2, #16
 8000774:	18c0      	adds	r0, r0, r3
 8000776:	0183      	lsls	r3, r0, #6
 8000778:	1e5e      	subs	r6, r3, #1
 800077a:	41b3      	sbcs	r3, r6
 800077c:	0e80      	lsrs	r0, r0, #26
 800077e:	4318      	orrs	r0, r3
 8000780:	0c13      	lsrs	r3, r2, #16
 8000782:	191b      	adds	r3, r3, r4
 8000784:	019b      	lsls	r3, r3, #6
 8000786:	4303      	orrs	r3, r0
 8000788:	001c      	movs	r4, r3
 800078a:	0123      	lsls	r3, r4, #4
 800078c:	d579      	bpl.n	8000882 <__aeabi_fmul+0x23e>
 800078e:	2301      	movs	r3, #1
 8000790:	0862      	lsrs	r2, r4, #1
 8000792:	401c      	ands	r4, r3
 8000794:	4314      	orrs	r4, r2
 8000796:	9a01      	ldr	r2, [sp, #4]
 8000798:	327f      	adds	r2, #127	; 0x7f
 800079a:	2a00      	cmp	r2, #0
 800079c:	dd4d      	ble.n	800083a <__aeabi_fmul+0x1f6>
 800079e:	0763      	lsls	r3, r4, #29
 80007a0:	d004      	beq.n	80007ac <__aeabi_fmul+0x168>
 80007a2:	230f      	movs	r3, #15
 80007a4:	4023      	ands	r3, r4
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	d000      	beq.n	80007ac <__aeabi_fmul+0x168>
 80007aa:	3404      	adds	r4, #4
 80007ac:	0123      	lsls	r3, r4, #4
 80007ae:	d503      	bpl.n	80007b8 <__aeabi_fmul+0x174>
 80007b0:	4b3c      	ldr	r3, [pc, #240]	; (80008a4 <__aeabi_fmul+0x260>)
 80007b2:	9a01      	ldr	r2, [sp, #4]
 80007b4:	401c      	ands	r4, r3
 80007b6:	3280      	adds	r2, #128	; 0x80
 80007b8:	2afe      	cmp	r2, #254	; 0xfe
 80007ba:	dcbc      	bgt.n	8000736 <__aeabi_fmul+0xf2>
 80007bc:	01a3      	lsls	r3, r4, #6
 80007be:	0a5b      	lsrs	r3, r3, #9
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	e79a      	b.n	80006fa <__aeabi_fmul+0xb6>
 80007c4:	230c      	movs	r3, #12
 80007c6:	469a      	mov	sl, r3
 80007c8:	3b09      	subs	r3, #9
 80007ca:	25ff      	movs	r5, #255	; 0xff
 80007cc:	469b      	mov	fp, r3
 80007ce:	e754      	b.n	800067a <__aeabi_fmul+0x36>
 80007d0:	0018      	movs	r0, r3
 80007d2:	f001 fc59 	bl	8002088 <__clzsi2>
 80007d6:	464a      	mov	r2, r9
 80007d8:	1f43      	subs	r3, r0, #5
 80007da:	2576      	movs	r5, #118	; 0x76
 80007dc:	409a      	lsls	r2, r3
 80007de:	2300      	movs	r3, #0
 80007e0:	426d      	negs	r5, r5
 80007e2:	4691      	mov	r9, r2
 80007e4:	1a2d      	subs	r5, r5, r0
 80007e6:	469a      	mov	sl, r3
 80007e8:	469b      	mov	fp, r3
 80007ea:	e746      	b.n	800067a <__aeabi_fmul+0x36>
 80007ec:	4652      	mov	r2, sl
 80007ee:	2303      	movs	r3, #3
 80007f0:	431a      	orrs	r2, r3
 80007f2:	4692      	mov	sl, r2
 80007f4:	2003      	movs	r0, #3
 80007f6:	e750      	b.n	800069a <__aeabi_fmul+0x56>
 80007f8:	0020      	movs	r0, r4
 80007fa:	f001 fc45 	bl	8002088 <__clzsi2>
 80007fe:	1f43      	subs	r3, r0, #5
 8000800:	1a2d      	subs	r5, r5, r0
 8000802:	409c      	lsls	r4, r3
 8000804:	3d76      	subs	r5, #118	; 0x76
 8000806:	2000      	movs	r0, #0
 8000808:	e747      	b.n	800069a <__aeabi_fmul+0x56>
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	2700      	movs	r7, #0
 800080e:	03db      	lsls	r3, r3, #15
 8000810:	22ff      	movs	r2, #255	; 0xff
 8000812:	e772      	b.n	80006fa <__aeabi_fmul+0xb6>
 8000814:	4642      	mov	r2, r8
 8000816:	e766      	b.n	80006e6 <__aeabi_fmul+0xa2>
 8000818:	464c      	mov	r4, r9
 800081a:	0032      	movs	r2, r6
 800081c:	4658      	mov	r0, fp
 800081e:	e762      	b.n	80006e6 <__aeabi_fmul+0xa2>
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	464a      	mov	r2, r9
 8000824:	03db      	lsls	r3, r3, #15
 8000826:	421a      	tst	r2, r3
 8000828:	d022      	beq.n	8000870 <__aeabi_fmul+0x22c>
 800082a:	421c      	tst	r4, r3
 800082c:	d120      	bne.n	8000870 <__aeabi_fmul+0x22c>
 800082e:	4323      	orrs	r3, r4
 8000830:	025b      	lsls	r3, r3, #9
 8000832:	0a5b      	lsrs	r3, r3, #9
 8000834:	4647      	mov	r7, r8
 8000836:	22ff      	movs	r2, #255	; 0xff
 8000838:	e75f      	b.n	80006fa <__aeabi_fmul+0xb6>
 800083a:	2301      	movs	r3, #1
 800083c:	1a9a      	subs	r2, r3, r2
 800083e:	2a1b      	cmp	r2, #27
 8000840:	dc21      	bgt.n	8000886 <__aeabi_fmul+0x242>
 8000842:	0023      	movs	r3, r4
 8000844:	9901      	ldr	r1, [sp, #4]
 8000846:	40d3      	lsrs	r3, r2
 8000848:	319e      	adds	r1, #158	; 0x9e
 800084a:	408c      	lsls	r4, r1
 800084c:	001a      	movs	r2, r3
 800084e:	0023      	movs	r3, r4
 8000850:	1e5c      	subs	r4, r3, #1
 8000852:	41a3      	sbcs	r3, r4
 8000854:	4313      	orrs	r3, r2
 8000856:	075a      	lsls	r2, r3, #29
 8000858:	d004      	beq.n	8000864 <__aeabi_fmul+0x220>
 800085a:	220f      	movs	r2, #15
 800085c:	401a      	ands	r2, r3
 800085e:	2a04      	cmp	r2, #4
 8000860:	d000      	beq.n	8000864 <__aeabi_fmul+0x220>
 8000862:	3304      	adds	r3, #4
 8000864:	015a      	lsls	r2, r3, #5
 8000866:	d411      	bmi.n	800088c <__aeabi_fmul+0x248>
 8000868:	019b      	lsls	r3, r3, #6
 800086a:	0a5b      	lsrs	r3, r3, #9
 800086c:	2200      	movs	r2, #0
 800086e:	e744      	b.n	80006fa <__aeabi_fmul+0xb6>
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	464a      	mov	r2, r9
 8000874:	03db      	lsls	r3, r3, #15
 8000876:	4313      	orrs	r3, r2
 8000878:	025b      	lsls	r3, r3, #9
 800087a:	0a5b      	lsrs	r3, r3, #9
 800087c:	0037      	movs	r7, r6
 800087e:	22ff      	movs	r2, #255	; 0xff
 8000880:	e73b      	b.n	80006fa <__aeabi_fmul+0xb6>
 8000882:	9501      	str	r5, [sp, #4]
 8000884:	e787      	b.n	8000796 <__aeabi_fmul+0x152>
 8000886:	2200      	movs	r2, #0
 8000888:	2300      	movs	r3, #0
 800088a:	e736      	b.n	80006fa <__aeabi_fmul+0xb6>
 800088c:	2201      	movs	r2, #1
 800088e:	2300      	movs	r3, #0
 8000890:	e733      	b.n	80006fa <__aeabi_fmul+0xb6>
 8000892:	2380      	movs	r3, #128	; 0x80
 8000894:	03db      	lsls	r3, r3, #15
 8000896:	4323      	orrs	r3, r4
 8000898:	025b      	lsls	r3, r3, #9
 800089a:	0a5b      	lsrs	r3, r3, #9
 800089c:	22ff      	movs	r2, #255	; 0xff
 800089e:	e72c      	b.n	80006fa <__aeabi_fmul+0xb6>
 80008a0:	08003e98 	.word	0x08003e98
 80008a4:	f7ffffff 	.word	0xf7ffffff

080008a8 <__aeabi_fsub>:
 80008a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008aa:	4647      	mov	r7, r8
 80008ac:	46ce      	mov	lr, r9
 80008ae:	0044      	lsls	r4, r0, #1
 80008b0:	0fc2      	lsrs	r2, r0, #31
 80008b2:	b580      	push	{r7, lr}
 80008b4:	0247      	lsls	r7, r0, #9
 80008b6:	0248      	lsls	r0, r1, #9
 80008b8:	0a40      	lsrs	r0, r0, #9
 80008ba:	4684      	mov	ip, r0
 80008bc:	4666      	mov	r6, ip
 80008be:	0048      	lsls	r0, r1, #1
 80008c0:	0a7f      	lsrs	r7, r7, #9
 80008c2:	0e24      	lsrs	r4, r4, #24
 80008c4:	00f6      	lsls	r6, r6, #3
 80008c6:	0025      	movs	r5, r4
 80008c8:	4690      	mov	r8, r2
 80008ca:	00fb      	lsls	r3, r7, #3
 80008cc:	0e00      	lsrs	r0, r0, #24
 80008ce:	0fc9      	lsrs	r1, r1, #31
 80008d0:	46b1      	mov	r9, r6
 80008d2:	28ff      	cmp	r0, #255	; 0xff
 80008d4:	d100      	bne.n	80008d8 <__aeabi_fsub+0x30>
 80008d6:	e085      	b.n	80009e4 <__aeabi_fsub+0x13c>
 80008d8:	2601      	movs	r6, #1
 80008da:	4071      	eors	r1, r6
 80008dc:	1a26      	subs	r6, r4, r0
 80008de:	4291      	cmp	r1, r2
 80008e0:	d057      	beq.n	8000992 <__aeabi_fsub+0xea>
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	dd43      	ble.n	800096e <__aeabi_fsub+0xc6>
 80008e6:	2800      	cmp	r0, #0
 80008e8:	d000      	beq.n	80008ec <__aeabi_fsub+0x44>
 80008ea:	e07f      	b.n	80009ec <__aeabi_fsub+0x144>
 80008ec:	4649      	mov	r1, r9
 80008ee:	2900      	cmp	r1, #0
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fsub+0x4c>
 80008f2:	e0aa      	b.n	8000a4a <__aeabi_fsub+0x1a2>
 80008f4:	3e01      	subs	r6, #1
 80008f6:	2e00      	cmp	r6, #0
 80008f8:	d000      	beq.n	80008fc <__aeabi_fsub+0x54>
 80008fa:	e0f7      	b.n	8000aec <__aeabi_fsub+0x244>
 80008fc:	1a5b      	subs	r3, r3, r1
 80008fe:	015a      	lsls	r2, r3, #5
 8000900:	d400      	bmi.n	8000904 <__aeabi_fsub+0x5c>
 8000902:	e08b      	b.n	8000a1c <__aeabi_fsub+0x174>
 8000904:	019b      	lsls	r3, r3, #6
 8000906:	099c      	lsrs	r4, r3, #6
 8000908:	0020      	movs	r0, r4
 800090a:	f001 fbbd 	bl	8002088 <__clzsi2>
 800090e:	3805      	subs	r0, #5
 8000910:	4084      	lsls	r4, r0
 8000912:	4285      	cmp	r5, r0
 8000914:	dd00      	ble.n	8000918 <__aeabi_fsub+0x70>
 8000916:	e0d3      	b.n	8000ac0 <__aeabi_fsub+0x218>
 8000918:	1b45      	subs	r5, r0, r5
 800091a:	0023      	movs	r3, r4
 800091c:	2020      	movs	r0, #32
 800091e:	3501      	adds	r5, #1
 8000920:	40eb      	lsrs	r3, r5
 8000922:	1b45      	subs	r5, r0, r5
 8000924:	40ac      	lsls	r4, r5
 8000926:	1e62      	subs	r2, r4, #1
 8000928:	4194      	sbcs	r4, r2
 800092a:	4323      	orrs	r3, r4
 800092c:	2407      	movs	r4, #7
 800092e:	2500      	movs	r5, #0
 8000930:	401c      	ands	r4, r3
 8000932:	2201      	movs	r2, #1
 8000934:	4641      	mov	r1, r8
 8000936:	400a      	ands	r2, r1
 8000938:	2c00      	cmp	r4, #0
 800093a:	d004      	beq.n	8000946 <__aeabi_fsub+0x9e>
 800093c:	210f      	movs	r1, #15
 800093e:	4019      	ands	r1, r3
 8000940:	2904      	cmp	r1, #4
 8000942:	d000      	beq.n	8000946 <__aeabi_fsub+0x9e>
 8000944:	3304      	adds	r3, #4
 8000946:	0159      	lsls	r1, r3, #5
 8000948:	d400      	bmi.n	800094c <__aeabi_fsub+0xa4>
 800094a:	e080      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 800094c:	3501      	adds	r5, #1
 800094e:	b2ec      	uxtb	r4, r5
 8000950:	2dff      	cmp	r5, #255	; 0xff
 8000952:	d000      	beq.n	8000956 <__aeabi_fsub+0xae>
 8000954:	e0a3      	b.n	8000a9e <__aeabi_fsub+0x1f6>
 8000956:	24ff      	movs	r4, #255	; 0xff
 8000958:	2300      	movs	r3, #0
 800095a:	025b      	lsls	r3, r3, #9
 800095c:	05e4      	lsls	r4, r4, #23
 800095e:	0a58      	lsrs	r0, r3, #9
 8000960:	07d2      	lsls	r2, r2, #31
 8000962:	4320      	orrs	r0, r4
 8000964:	4310      	orrs	r0, r2
 8000966:	bc0c      	pop	{r2, r3}
 8000968:	4690      	mov	r8, r2
 800096a:	4699      	mov	r9, r3
 800096c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800096e:	2e00      	cmp	r6, #0
 8000970:	d174      	bne.n	8000a5c <__aeabi_fsub+0x1b4>
 8000972:	1c60      	adds	r0, r4, #1
 8000974:	b2c0      	uxtb	r0, r0
 8000976:	2801      	cmp	r0, #1
 8000978:	dc00      	bgt.n	800097c <__aeabi_fsub+0xd4>
 800097a:	e0a7      	b.n	8000acc <__aeabi_fsub+0x224>
 800097c:	464a      	mov	r2, r9
 800097e:	1a9c      	subs	r4, r3, r2
 8000980:	0162      	lsls	r2, r4, #5
 8000982:	d500      	bpl.n	8000986 <__aeabi_fsub+0xde>
 8000984:	e0b6      	b.n	8000af4 <__aeabi_fsub+0x24c>
 8000986:	2c00      	cmp	r4, #0
 8000988:	d1be      	bne.n	8000908 <__aeabi_fsub+0x60>
 800098a:	2200      	movs	r2, #0
 800098c:	2400      	movs	r4, #0
 800098e:	2300      	movs	r3, #0
 8000990:	e7e3      	b.n	800095a <__aeabi_fsub+0xb2>
 8000992:	2e00      	cmp	r6, #0
 8000994:	dc00      	bgt.n	8000998 <__aeabi_fsub+0xf0>
 8000996:	e085      	b.n	8000aa4 <__aeabi_fsub+0x1fc>
 8000998:	2800      	cmp	r0, #0
 800099a:	d046      	beq.n	8000a2a <__aeabi_fsub+0x182>
 800099c:	2cff      	cmp	r4, #255	; 0xff
 800099e:	d049      	beq.n	8000a34 <__aeabi_fsub+0x18c>
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	4648      	mov	r0, r9
 80009a4:	04d2      	lsls	r2, r2, #19
 80009a6:	4310      	orrs	r0, r2
 80009a8:	4681      	mov	r9, r0
 80009aa:	2201      	movs	r2, #1
 80009ac:	2e1b      	cmp	r6, #27
 80009ae:	dc09      	bgt.n	80009c4 <__aeabi_fsub+0x11c>
 80009b0:	2020      	movs	r0, #32
 80009b2:	464c      	mov	r4, r9
 80009b4:	1b80      	subs	r0, r0, r6
 80009b6:	4084      	lsls	r4, r0
 80009b8:	464a      	mov	r2, r9
 80009ba:	0020      	movs	r0, r4
 80009bc:	40f2      	lsrs	r2, r6
 80009be:	1e44      	subs	r4, r0, #1
 80009c0:	41a0      	sbcs	r0, r4
 80009c2:	4302      	orrs	r2, r0
 80009c4:	189b      	adds	r3, r3, r2
 80009c6:	015a      	lsls	r2, r3, #5
 80009c8:	d528      	bpl.n	8000a1c <__aeabi_fsub+0x174>
 80009ca:	3501      	adds	r5, #1
 80009cc:	2dff      	cmp	r5, #255	; 0xff
 80009ce:	d100      	bne.n	80009d2 <__aeabi_fsub+0x12a>
 80009d0:	e0a8      	b.n	8000b24 <__aeabi_fsub+0x27c>
 80009d2:	2201      	movs	r2, #1
 80009d4:	2407      	movs	r4, #7
 80009d6:	4994      	ldr	r1, [pc, #592]	; (8000c28 <__aeabi_fsub+0x380>)
 80009d8:	401a      	ands	r2, r3
 80009da:	085b      	lsrs	r3, r3, #1
 80009dc:	400b      	ands	r3, r1
 80009de:	4313      	orrs	r3, r2
 80009e0:	401c      	ands	r4, r3
 80009e2:	e7a6      	b.n	8000932 <__aeabi_fsub+0x8a>
 80009e4:	2e00      	cmp	r6, #0
 80009e6:	d000      	beq.n	80009ea <__aeabi_fsub+0x142>
 80009e8:	e778      	b.n	80008dc <__aeabi_fsub+0x34>
 80009ea:	e775      	b.n	80008d8 <__aeabi_fsub+0x30>
 80009ec:	2cff      	cmp	r4, #255	; 0xff
 80009ee:	d054      	beq.n	8000a9a <__aeabi_fsub+0x1f2>
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	4649      	mov	r1, r9
 80009f4:	04d2      	lsls	r2, r2, #19
 80009f6:	4311      	orrs	r1, r2
 80009f8:	4689      	mov	r9, r1
 80009fa:	2201      	movs	r2, #1
 80009fc:	2e1b      	cmp	r6, #27
 80009fe:	dc09      	bgt.n	8000a14 <__aeabi_fsub+0x16c>
 8000a00:	2120      	movs	r1, #32
 8000a02:	4648      	mov	r0, r9
 8000a04:	1b89      	subs	r1, r1, r6
 8000a06:	4088      	lsls	r0, r1
 8000a08:	464a      	mov	r2, r9
 8000a0a:	0001      	movs	r1, r0
 8000a0c:	40f2      	lsrs	r2, r6
 8000a0e:	1e48      	subs	r0, r1, #1
 8000a10:	4181      	sbcs	r1, r0
 8000a12:	430a      	orrs	r2, r1
 8000a14:	1a9b      	subs	r3, r3, r2
 8000a16:	015a      	lsls	r2, r3, #5
 8000a18:	d500      	bpl.n	8000a1c <__aeabi_fsub+0x174>
 8000a1a:	e773      	b.n	8000904 <__aeabi_fsub+0x5c>
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4641      	mov	r1, r8
 8000a20:	400a      	ands	r2, r1
 8000a22:	0759      	lsls	r1, r3, #29
 8000a24:	d000      	beq.n	8000a28 <__aeabi_fsub+0x180>
 8000a26:	e789      	b.n	800093c <__aeabi_fsub+0x94>
 8000a28:	e011      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000a2a:	4648      	mov	r0, r9
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	d158      	bne.n	8000ae2 <__aeabi_fsub+0x23a>
 8000a30:	2cff      	cmp	r4, #255	; 0xff
 8000a32:	d10c      	bne.n	8000a4e <__aeabi_fsub+0x1a6>
 8000a34:	08db      	lsrs	r3, r3, #3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fsub+0x194>
 8000a3a:	e78c      	b.n	8000956 <__aeabi_fsub+0xae>
 8000a3c:	2080      	movs	r0, #128	; 0x80
 8000a3e:	03c0      	lsls	r0, r0, #15
 8000a40:	4303      	orrs	r3, r0
 8000a42:	025b      	lsls	r3, r3, #9
 8000a44:	0a5b      	lsrs	r3, r3, #9
 8000a46:	24ff      	movs	r4, #255	; 0xff
 8000a48:	e787      	b.n	800095a <__aeabi_fsub+0xb2>
 8000a4a:	2cff      	cmp	r4, #255	; 0xff
 8000a4c:	d025      	beq.n	8000a9a <__aeabi_fsub+0x1f2>
 8000a4e:	08db      	lsrs	r3, r3, #3
 8000a50:	2dff      	cmp	r5, #255	; 0xff
 8000a52:	d0f0      	beq.n	8000a36 <__aeabi_fsub+0x18e>
 8000a54:	025b      	lsls	r3, r3, #9
 8000a56:	0a5b      	lsrs	r3, r3, #9
 8000a58:	b2ec      	uxtb	r4, r5
 8000a5a:	e77e      	b.n	800095a <__aeabi_fsub+0xb2>
 8000a5c:	2c00      	cmp	r4, #0
 8000a5e:	d04d      	beq.n	8000afc <__aeabi_fsub+0x254>
 8000a60:	28ff      	cmp	r0, #255	; 0xff
 8000a62:	d018      	beq.n	8000a96 <__aeabi_fsub+0x1ee>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	04e4      	lsls	r4, r4, #19
 8000a68:	4272      	negs	r2, r6
 8000a6a:	4323      	orrs	r3, r4
 8000a6c:	2a1b      	cmp	r2, #27
 8000a6e:	dd00      	ble.n	8000a72 <__aeabi_fsub+0x1ca>
 8000a70:	e0c4      	b.n	8000bfc <__aeabi_fsub+0x354>
 8000a72:	001c      	movs	r4, r3
 8000a74:	2520      	movs	r5, #32
 8000a76:	40d4      	lsrs	r4, r2
 8000a78:	1aaa      	subs	r2, r5, r2
 8000a7a:	4093      	lsls	r3, r2
 8000a7c:	1e5a      	subs	r2, r3, #1
 8000a7e:	4193      	sbcs	r3, r2
 8000a80:	4323      	orrs	r3, r4
 8000a82:	464a      	mov	r2, r9
 8000a84:	0005      	movs	r5, r0
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	4688      	mov	r8, r1
 8000a8a:	e738      	b.n	80008fe <__aeabi_fsub+0x56>
 8000a8c:	1c72      	adds	r2, r6, #1
 8000a8e:	d0f8      	beq.n	8000a82 <__aeabi_fsub+0x1da>
 8000a90:	43f2      	mvns	r2, r6
 8000a92:	28ff      	cmp	r0, #255	; 0xff
 8000a94:	d1ea      	bne.n	8000a6c <__aeabi_fsub+0x1c4>
 8000a96:	000a      	movs	r2, r1
 8000a98:	464b      	mov	r3, r9
 8000a9a:	25ff      	movs	r5, #255	; 0xff
 8000a9c:	e7d7      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000a9e:	019b      	lsls	r3, r3, #6
 8000aa0:	0a5b      	lsrs	r3, r3, #9
 8000aa2:	e75a      	b.n	800095a <__aeabi_fsub+0xb2>
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d141      	bne.n	8000b2c <__aeabi_fsub+0x284>
 8000aa8:	1c65      	adds	r5, r4, #1
 8000aaa:	b2e9      	uxtb	r1, r5
 8000aac:	2901      	cmp	r1, #1
 8000aae:	dd45      	ble.n	8000b3c <__aeabi_fsub+0x294>
 8000ab0:	2dff      	cmp	r5, #255	; 0xff
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_fsub+0x20e>
 8000ab4:	e74f      	b.n	8000956 <__aeabi_fsub+0xae>
 8000ab6:	2407      	movs	r4, #7
 8000ab8:	444b      	add	r3, r9
 8000aba:	085b      	lsrs	r3, r3, #1
 8000abc:	401c      	ands	r4, r3
 8000abe:	e738      	b.n	8000932 <__aeabi_fsub+0x8a>
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	4b5a      	ldr	r3, [pc, #360]	; (8000c2c <__aeabi_fsub+0x384>)
 8000ac4:	1a2d      	subs	r5, r5, r0
 8000ac6:	4023      	ands	r3, r4
 8000ac8:	4014      	ands	r4, r2
 8000aca:	e732      	b.n	8000932 <__aeabi_fsub+0x8a>
 8000acc:	2c00      	cmp	r4, #0
 8000ace:	d11d      	bne.n	8000b0c <__aeabi_fsub+0x264>
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d17a      	bne.n	8000bca <__aeabi_fsub+0x322>
 8000ad4:	464b      	mov	r3, r9
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fsub+0x234>
 8000ada:	e091      	b.n	8000c00 <__aeabi_fsub+0x358>
 8000adc:	000a      	movs	r2, r1
 8000ade:	2500      	movs	r5, #0
 8000ae0:	e7b5      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000ae2:	3e01      	subs	r6, #1
 8000ae4:	2e00      	cmp	r6, #0
 8000ae6:	d119      	bne.n	8000b1c <__aeabi_fsub+0x274>
 8000ae8:	444b      	add	r3, r9
 8000aea:	e76c      	b.n	80009c6 <__aeabi_fsub+0x11e>
 8000aec:	2cff      	cmp	r4, #255	; 0xff
 8000aee:	d184      	bne.n	80009fa <__aeabi_fsub+0x152>
 8000af0:	25ff      	movs	r5, #255	; 0xff
 8000af2:	e7ac      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000af4:	464a      	mov	r2, r9
 8000af6:	4688      	mov	r8, r1
 8000af8:	1ad4      	subs	r4, r2, r3
 8000afa:	e705      	b.n	8000908 <__aeabi_fsub+0x60>
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1c5      	bne.n	8000a8c <__aeabi_fsub+0x1e4>
 8000b00:	000a      	movs	r2, r1
 8000b02:	28ff      	cmp	r0, #255	; 0xff
 8000b04:	d0c8      	beq.n	8000a98 <__aeabi_fsub+0x1f0>
 8000b06:	0005      	movs	r5, r0
 8000b08:	464b      	mov	r3, r9
 8000b0a:	e7a0      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d149      	bne.n	8000ba4 <__aeabi_fsub+0x2fc>
 8000b10:	464b      	mov	r3, r9
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d077      	beq.n	8000c06 <__aeabi_fsub+0x35e>
 8000b16:	000a      	movs	r2, r1
 8000b18:	25ff      	movs	r5, #255	; 0xff
 8000b1a:	e798      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000b1c:	2cff      	cmp	r4, #255	; 0xff
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_fsub+0x27a>
 8000b20:	e743      	b.n	80009aa <__aeabi_fsub+0x102>
 8000b22:	e787      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000b24:	000a      	movs	r2, r1
 8000b26:	24ff      	movs	r4, #255	; 0xff
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e716      	b.n	800095a <__aeabi_fsub+0xb2>
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	d115      	bne.n	8000b5c <__aeabi_fsub+0x2b4>
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d157      	bne.n	8000be4 <__aeabi_fsub+0x33c>
 8000b34:	28ff      	cmp	r0, #255	; 0xff
 8000b36:	d1e6      	bne.n	8000b06 <__aeabi_fsub+0x25e>
 8000b38:	464b      	mov	r3, r9
 8000b3a:	e77b      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000b3c:	2c00      	cmp	r4, #0
 8000b3e:	d120      	bne.n	8000b82 <__aeabi_fsub+0x2da>
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d057      	beq.n	8000bf4 <__aeabi_fsub+0x34c>
 8000b44:	4649      	mov	r1, r9
 8000b46:	2900      	cmp	r1, #0
 8000b48:	d053      	beq.n	8000bf2 <__aeabi_fsub+0x34a>
 8000b4a:	444b      	add	r3, r9
 8000b4c:	015a      	lsls	r2, r3, #5
 8000b4e:	d568      	bpl.n	8000c22 <__aeabi_fsub+0x37a>
 8000b50:	2407      	movs	r4, #7
 8000b52:	4a36      	ldr	r2, [pc, #216]	; (8000c2c <__aeabi_fsub+0x384>)
 8000b54:	401c      	ands	r4, r3
 8000b56:	2501      	movs	r5, #1
 8000b58:	4013      	ands	r3, r2
 8000b5a:	e6ea      	b.n	8000932 <__aeabi_fsub+0x8a>
 8000b5c:	28ff      	cmp	r0, #255	; 0xff
 8000b5e:	d0eb      	beq.n	8000b38 <__aeabi_fsub+0x290>
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	04d2      	lsls	r2, r2, #19
 8000b64:	4276      	negs	r6, r6
 8000b66:	4313      	orrs	r3, r2
 8000b68:	2e1b      	cmp	r6, #27
 8000b6a:	dc53      	bgt.n	8000c14 <__aeabi_fsub+0x36c>
 8000b6c:	2520      	movs	r5, #32
 8000b6e:	1bad      	subs	r5, r5, r6
 8000b70:	001a      	movs	r2, r3
 8000b72:	40ab      	lsls	r3, r5
 8000b74:	40f2      	lsrs	r2, r6
 8000b76:	1e5c      	subs	r4, r3, #1
 8000b78:	41a3      	sbcs	r3, r4
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	444b      	add	r3, r9
 8000b7e:	0005      	movs	r5, r0
 8000b80:	e721      	b.n	80009c6 <__aeabi_fsub+0x11e>
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0d8      	beq.n	8000b38 <__aeabi_fsub+0x290>
 8000b86:	4649      	mov	r1, r9
 8000b88:	2900      	cmp	r1, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fsub+0x2e6>
 8000b8c:	e752      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	03c9      	lsls	r1, r1, #15
 8000b92:	420f      	tst	r7, r1
 8000b94:	d100      	bne.n	8000b98 <__aeabi_fsub+0x2f0>
 8000b96:	e74d      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000b98:	4660      	mov	r0, ip
 8000b9a:	4208      	tst	r0, r1
 8000b9c:	d000      	beq.n	8000ba0 <__aeabi_fsub+0x2f8>
 8000b9e:	e749      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000ba0:	464b      	mov	r3, r9
 8000ba2:	e747      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000ba4:	4648      	mov	r0, r9
 8000ba6:	25ff      	movs	r5, #255	; 0xff
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d100      	bne.n	8000bae <__aeabi_fsub+0x306>
 8000bac:	e74f      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000bae:	2280      	movs	r2, #128	; 0x80
 8000bb0:	03d2      	lsls	r2, r2, #15
 8000bb2:	4217      	tst	r7, r2
 8000bb4:	d004      	beq.n	8000bc0 <__aeabi_fsub+0x318>
 8000bb6:	4660      	mov	r0, ip
 8000bb8:	4210      	tst	r0, r2
 8000bba:	d101      	bne.n	8000bc0 <__aeabi_fsub+0x318>
 8000bbc:	464b      	mov	r3, r9
 8000bbe:	4688      	mov	r8, r1
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	4641      	mov	r1, r8
 8000bc4:	25ff      	movs	r5, #255	; 0xff
 8000bc6:	400a      	ands	r2, r1
 8000bc8:	e741      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000bca:	4648      	mov	r0, r9
 8000bcc:	2800      	cmp	r0, #0
 8000bce:	d01f      	beq.n	8000c10 <__aeabi_fsub+0x368>
 8000bd0:	1a1a      	subs	r2, r3, r0
 8000bd2:	0150      	lsls	r0, r2, #5
 8000bd4:	d520      	bpl.n	8000c18 <__aeabi_fsub+0x370>
 8000bd6:	464a      	mov	r2, r9
 8000bd8:	2407      	movs	r4, #7
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	401c      	ands	r4, r3
 8000bde:	4688      	mov	r8, r1
 8000be0:	2500      	movs	r5, #0
 8000be2:	e6a6      	b.n	8000932 <__aeabi_fsub+0x8a>
 8000be4:	1c74      	adds	r4, r6, #1
 8000be6:	d0c9      	beq.n	8000b7c <__aeabi_fsub+0x2d4>
 8000be8:	43f6      	mvns	r6, r6
 8000bea:	28ff      	cmp	r0, #255	; 0xff
 8000bec:	d1bc      	bne.n	8000b68 <__aeabi_fsub+0x2c0>
 8000bee:	464b      	mov	r3, r9
 8000bf0:	e720      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000bf2:	4699      	mov	r9, r3
 8000bf4:	464b      	mov	r3, r9
 8000bf6:	2500      	movs	r5, #0
 8000bf8:	08db      	lsrs	r3, r3, #3
 8000bfa:	e72b      	b.n	8000a54 <__aeabi_fsub+0x1ac>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e740      	b.n	8000a82 <__aeabi_fsub+0x1da>
 8000c00:	2200      	movs	r2, #0
 8000c02:	2300      	movs	r3, #0
 8000c04:	e6a9      	b.n	800095a <__aeabi_fsub+0xb2>
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	2200      	movs	r2, #0
 8000c0a:	03db      	lsls	r3, r3, #15
 8000c0c:	24ff      	movs	r4, #255	; 0xff
 8000c0e:	e6a4      	b.n	800095a <__aeabi_fsub+0xb2>
 8000c10:	2500      	movs	r5, #0
 8000c12:	e71c      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000c14:	2301      	movs	r3, #1
 8000c16:	e7b1      	b.n	8000b7c <__aeabi_fsub+0x2d4>
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	d0f1      	beq.n	8000c00 <__aeabi_fsub+0x358>
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	2500      	movs	r5, #0
 8000c20:	e6fc      	b.n	8000a1c <__aeabi_fsub+0x174>
 8000c22:	2500      	movs	r5, #0
 8000c24:	e6fa      	b.n	8000a1c <__aeabi_fsub+0x174>
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	7dffffff 	.word	0x7dffffff
 8000c2c:	fbffffff 	.word	0xfbffffff

08000c30 <__aeabi_i2f>:
 8000c30:	b570      	push	{r4, r5, r6, lr}
 8000c32:	2800      	cmp	r0, #0
 8000c34:	d03d      	beq.n	8000cb2 <__aeabi_i2f+0x82>
 8000c36:	17c3      	asrs	r3, r0, #31
 8000c38:	18c5      	adds	r5, r0, r3
 8000c3a:	405d      	eors	r5, r3
 8000c3c:	0fc4      	lsrs	r4, r0, #31
 8000c3e:	0028      	movs	r0, r5
 8000c40:	f001 fa22 	bl	8002088 <__clzsi2>
 8000c44:	229e      	movs	r2, #158	; 0x9e
 8000c46:	1a12      	subs	r2, r2, r0
 8000c48:	2a96      	cmp	r2, #150	; 0x96
 8000c4a:	dc07      	bgt.n	8000c5c <__aeabi_i2f+0x2c>
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	2808      	cmp	r0, #8
 8000c50:	dd33      	ble.n	8000cba <__aeabi_i2f+0x8a>
 8000c52:	3808      	subs	r0, #8
 8000c54:	4085      	lsls	r5, r0
 8000c56:	0268      	lsls	r0, r5, #9
 8000c58:	0a40      	lsrs	r0, r0, #9
 8000c5a:	e023      	b.n	8000ca4 <__aeabi_i2f+0x74>
 8000c5c:	2a99      	cmp	r2, #153	; 0x99
 8000c5e:	dd0b      	ble.n	8000c78 <__aeabi_i2f+0x48>
 8000c60:	2305      	movs	r3, #5
 8000c62:	0029      	movs	r1, r5
 8000c64:	1a1b      	subs	r3, r3, r0
 8000c66:	40d9      	lsrs	r1, r3
 8000c68:	0003      	movs	r3, r0
 8000c6a:	331b      	adds	r3, #27
 8000c6c:	409d      	lsls	r5, r3
 8000c6e:	002b      	movs	r3, r5
 8000c70:	1e5d      	subs	r5, r3, #1
 8000c72:	41ab      	sbcs	r3, r5
 8000c74:	4319      	orrs	r1, r3
 8000c76:	000d      	movs	r5, r1
 8000c78:	2805      	cmp	r0, #5
 8000c7a:	dd01      	ble.n	8000c80 <__aeabi_i2f+0x50>
 8000c7c:	1f43      	subs	r3, r0, #5
 8000c7e:	409d      	lsls	r5, r3
 8000c80:	002b      	movs	r3, r5
 8000c82:	490f      	ldr	r1, [pc, #60]	; (8000cc0 <__aeabi_i2f+0x90>)
 8000c84:	400b      	ands	r3, r1
 8000c86:	076e      	lsls	r6, r5, #29
 8000c88:	d009      	beq.n	8000c9e <__aeabi_i2f+0x6e>
 8000c8a:	260f      	movs	r6, #15
 8000c8c:	4035      	ands	r5, r6
 8000c8e:	2d04      	cmp	r5, #4
 8000c90:	d005      	beq.n	8000c9e <__aeabi_i2f+0x6e>
 8000c92:	3304      	adds	r3, #4
 8000c94:	015d      	lsls	r5, r3, #5
 8000c96:	d502      	bpl.n	8000c9e <__aeabi_i2f+0x6e>
 8000c98:	229f      	movs	r2, #159	; 0x9f
 8000c9a:	400b      	ands	r3, r1
 8000c9c:	1a12      	subs	r2, r2, r0
 8000c9e:	019b      	lsls	r3, r3, #6
 8000ca0:	0a58      	lsrs	r0, r3, #9
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	0240      	lsls	r0, r0, #9
 8000ca6:	05d2      	lsls	r2, r2, #23
 8000ca8:	0a40      	lsrs	r0, r0, #9
 8000caa:	07e4      	lsls	r4, r4, #31
 8000cac:	4310      	orrs	r0, r2
 8000cae:	4320      	orrs	r0, r4
 8000cb0:	bd70      	pop	{r4, r5, r6, pc}
 8000cb2:	2400      	movs	r4, #0
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	e7f4      	b.n	8000ca4 <__aeabi_i2f+0x74>
 8000cba:	0268      	lsls	r0, r5, #9
 8000cbc:	0a40      	lsrs	r0, r0, #9
 8000cbe:	e7f1      	b.n	8000ca4 <__aeabi_i2f+0x74>
 8000cc0:	fbffffff 	.word	0xfbffffff

08000cc4 <__aeabi_dadd>:
 8000cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc6:	464f      	mov	r7, r9
 8000cc8:	4646      	mov	r6, r8
 8000cca:	46d6      	mov	lr, sl
 8000ccc:	000c      	movs	r4, r1
 8000cce:	0309      	lsls	r1, r1, #12
 8000cd0:	b5c0      	push	{r6, r7, lr}
 8000cd2:	0a49      	lsrs	r1, r1, #9
 8000cd4:	0f47      	lsrs	r7, r0, #29
 8000cd6:	005e      	lsls	r6, r3, #1
 8000cd8:	4339      	orrs	r1, r7
 8000cda:	031f      	lsls	r7, r3, #12
 8000cdc:	0fdb      	lsrs	r3, r3, #31
 8000cde:	469c      	mov	ip, r3
 8000ce0:	0065      	lsls	r5, r4, #1
 8000ce2:	0a7b      	lsrs	r3, r7, #9
 8000ce4:	0f57      	lsrs	r7, r2, #29
 8000ce6:	431f      	orrs	r7, r3
 8000ce8:	0d6d      	lsrs	r5, r5, #21
 8000cea:	0fe4      	lsrs	r4, r4, #31
 8000cec:	0d76      	lsrs	r6, r6, #21
 8000cee:	46a1      	mov	r9, r4
 8000cf0:	00c0      	lsls	r0, r0, #3
 8000cf2:	46b8      	mov	r8, r7
 8000cf4:	00d2      	lsls	r2, r2, #3
 8000cf6:	1bab      	subs	r3, r5, r6
 8000cf8:	4564      	cmp	r4, ip
 8000cfa:	d07b      	beq.n	8000df4 <__aeabi_dadd+0x130>
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	dd5f      	ble.n	8000dc0 <__aeabi_dadd+0xfc>
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d000      	beq.n	8000d06 <__aeabi_dadd+0x42>
 8000d04:	e0a4      	b.n	8000e50 <__aeabi_dadd+0x18c>
 8000d06:	003e      	movs	r6, r7
 8000d08:	4316      	orrs	r6, r2
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_dadd+0x4a>
 8000d0c:	e112      	b.n	8000f34 <__aeabi_dadd+0x270>
 8000d0e:	1e5e      	subs	r6, r3, #1
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d000      	beq.n	8000d16 <__aeabi_dadd+0x52>
 8000d14:	e19e      	b.n	8001054 <__aeabi_dadd+0x390>
 8000d16:	1a87      	subs	r7, r0, r2
 8000d18:	4643      	mov	r3, r8
 8000d1a:	42b8      	cmp	r0, r7
 8000d1c:	4180      	sbcs	r0, r0
 8000d1e:	2501      	movs	r5, #1
 8000d20:	1ac9      	subs	r1, r1, r3
 8000d22:	4240      	negs	r0, r0
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	020b      	lsls	r3, r1, #8
 8000d28:	d400      	bmi.n	8000d2c <__aeabi_dadd+0x68>
 8000d2a:	e131      	b.n	8000f90 <__aeabi_dadd+0x2cc>
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	0a4e      	lsrs	r6, r1, #9
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d100      	bne.n	8000d36 <__aeabi_dadd+0x72>
 8000d34:	e16e      	b.n	8001014 <__aeabi_dadd+0x350>
 8000d36:	0030      	movs	r0, r6
 8000d38:	f001 f9a6 	bl	8002088 <__clzsi2>
 8000d3c:	0003      	movs	r3, r0
 8000d3e:	3b08      	subs	r3, #8
 8000d40:	2b1f      	cmp	r3, #31
 8000d42:	dd00      	ble.n	8000d46 <__aeabi_dadd+0x82>
 8000d44:	e161      	b.n	800100a <__aeabi_dadd+0x346>
 8000d46:	2220      	movs	r2, #32
 8000d48:	0039      	movs	r1, r7
 8000d4a:	1ad2      	subs	r2, r2, r3
 8000d4c:	409e      	lsls	r6, r3
 8000d4e:	40d1      	lsrs	r1, r2
 8000d50:	409f      	lsls	r7, r3
 8000d52:	430e      	orrs	r6, r1
 8000d54:	429d      	cmp	r5, r3
 8000d56:	dd00      	ble.n	8000d5a <__aeabi_dadd+0x96>
 8000d58:	e151      	b.n	8000ffe <__aeabi_dadd+0x33a>
 8000d5a:	1b5d      	subs	r5, r3, r5
 8000d5c:	1c6b      	adds	r3, r5, #1
 8000d5e:	2b1f      	cmp	r3, #31
 8000d60:	dd00      	ble.n	8000d64 <__aeabi_dadd+0xa0>
 8000d62:	e17c      	b.n	800105e <__aeabi_dadd+0x39a>
 8000d64:	2120      	movs	r1, #32
 8000d66:	1ac9      	subs	r1, r1, r3
 8000d68:	003d      	movs	r5, r7
 8000d6a:	0030      	movs	r0, r6
 8000d6c:	408f      	lsls	r7, r1
 8000d6e:	4088      	lsls	r0, r1
 8000d70:	40dd      	lsrs	r5, r3
 8000d72:	1e79      	subs	r1, r7, #1
 8000d74:	418f      	sbcs	r7, r1
 8000d76:	0031      	movs	r1, r6
 8000d78:	2207      	movs	r2, #7
 8000d7a:	4328      	orrs	r0, r5
 8000d7c:	40d9      	lsrs	r1, r3
 8000d7e:	2500      	movs	r5, #0
 8000d80:	4307      	orrs	r7, r0
 8000d82:	403a      	ands	r2, r7
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	d009      	beq.n	8000d9c <__aeabi_dadd+0xd8>
 8000d88:	230f      	movs	r3, #15
 8000d8a:	403b      	ands	r3, r7
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d005      	beq.n	8000d9c <__aeabi_dadd+0xd8>
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	42bb      	cmp	r3, r7
 8000d94:	41bf      	sbcs	r7, r7
 8000d96:	427f      	negs	r7, r7
 8000d98:	19c9      	adds	r1, r1, r7
 8000d9a:	001f      	movs	r7, r3
 8000d9c:	020b      	lsls	r3, r1, #8
 8000d9e:	d400      	bmi.n	8000da2 <__aeabi_dadd+0xde>
 8000da0:	e226      	b.n	80011f0 <__aeabi_dadd+0x52c>
 8000da2:	1c6a      	adds	r2, r5, #1
 8000da4:	4bc6      	ldr	r3, [pc, #792]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000da6:	0555      	lsls	r5, r2, #21
 8000da8:	0d6d      	lsrs	r5, r5, #21
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d100      	bne.n	8000db0 <__aeabi_dadd+0xec>
 8000dae:	e106      	b.n	8000fbe <__aeabi_dadd+0x2fa>
 8000db0:	4ac4      	ldr	r2, [pc, #784]	; (80010c4 <__aeabi_dadd+0x400>)
 8000db2:	08ff      	lsrs	r7, r7, #3
 8000db4:	400a      	ands	r2, r1
 8000db6:	0753      	lsls	r3, r2, #29
 8000db8:	0252      	lsls	r2, r2, #9
 8000dba:	433b      	orrs	r3, r7
 8000dbc:	0b12      	lsrs	r2, r2, #12
 8000dbe:	e08e      	b.n	8000ede <__aeabi_dadd+0x21a>
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d000      	beq.n	8000dc6 <__aeabi_dadd+0x102>
 8000dc4:	e0b8      	b.n	8000f38 <__aeabi_dadd+0x274>
 8000dc6:	1c6b      	adds	r3, r5, #1
 8000dc8:	055b      	lsls	r3, r3, #21
 8000dca:	0d5b      	lsrs	r3, r3, #21
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	dc00      	bgt.n	8000dd2 <__aeabi_dadd+0x10e>
 8000dd0:	e130      	b.n	8001034 <__aeabi_dadd+0x370>
 8000dd2:	1a87      	subs	r7, r0, r2
 8000dd4:	4643      	mov	r3, r8
 8000dd6:	42b8      	cmp	r0, r7
 8000dd8:	41b6      	sbcs	r6, r6
 8000dda:	1acb      	subs	r3, r1, r3
 8000ddc:	4276      	negs	r6, r6
 8000dde:	1b9e      	subs	r6, r3, r6
 8000de0:	0233      	lsls	r3, r6, #8
 8000de2:	d500      	bpl.n	8000de6 <__aeabi_dadd+0x122>
 8000de4:	e14c      	b.n	8001080 <__aeabi_dadd+0x3bc>
 8000de6:	003b      	movs	r3, r7
 8000de8:	4333      	orrs	r3, r6
 8000dea:	d1a1      	bne.n	8000d30 <__aeabi_dadd+0x6c>
 8000dec:	2200      	movs	r2, #0
 8000dee:	2400      	movs	r4, #0
 8000df0:	2500      	movs	r5, #0
 8000df2:	e070      	b.n	8000ed6 <__aeabi_dadd+0x212>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	dc00      	bgt.n	8000dfa <__aeabi_dadd+0x136>
 8000df8:	e0e5      	b.n	8000fc6 <__aeabi_dadd+0x302>
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_dadd+0x13c>
 8000dfe:	e083      	b.n	8000f08 <__aeabi_dadd+0x244>
 8000e00:	4eaf      	ldr	r6, [pc, #700]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000e02:	42b5      	cmp	r5, r6
 8000e04:	d060      	beq.n	8000ec8 <__aeabi_dadd+0x204>
 8000e06:	2680      	movs	r6, #128	; 0x80
 8000e08:	0436      	lsls	r6, r6, #16
 8000e0a:	4337      	orrs	r7, r6
 8000e0c:	46b8      	mov	r8, r7
 8000e0e:	2b38      	cmp	r3, #56	; 0x38
 8000e10:	dc00      	bgt.n	8000e14 <__aeabi_dadd+0x150>
 8000e12:	e13e      	b.n	8001092 <__aeabi_dadd+0x3ce>
 8000e14:	4643      	mov	r3, r8
 8000e16:	4313      	orrs	r3, r2
 8000e18:	001f      	movs	r7, r3
 8000e1a:	1e7a      	subs	r2, r7, #1
 8000e1c:	4197      	sbcs	r7, r2
 8000e1e:	183f      	adds	r7, r7, r0
 8000e20:	4287      	cmp	r7, r0
 8000e22:	4180      	sbcs	r0, r0
 8000e24:	4240      	negs	r0, r0
 8000e26:	1809      	adds	r1, r1, r0
 8000e28:	020b      	lsls	r3, r1, #8
 8000e2a:	d400      	bmi.n	8000e2e <__aeabi_dadd+0x16a>
 8000e2c:	e0b0      	b.n	8000f90 <__aeabi_dadd+0x2cc>
 8000e2e:	4ba4      	ldr	r3, [pc, #656]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000e30:	3501      	adds	r5, #1
 8000e32:	429d      	cmp	r5, r3
 8000e34:	d100      	bne.n	8000e38 <__aeabi_dadd+0x174>
 8000e36:	e0c3      	b.n	8000fc0 <__aeabi_dadd+0x2fc>
 8000e38:	4aa2      	ldr	r2, [pc, #648]	; (80010c4 <__aeabi_dadd+0x400>)
 8000e3a:	087b      	lsrs	r3, r7, #1
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	2101      	movs	r1, #1
 8000e40:	400f      	ands	r7, r1
 8000e42:	431f      	orrs	r7, r3
 8000e44:	0851      	lsrs	r1, r2, #1
 8000e46:	07d3      	lsls	r3, r2, #31
 8000e48:	2207      	movs	r2, #7
 8000e4a:	431f      	orrs	r7, r3
 8000e4c:	403a      	ands	r2, r7
 8000e4e:	e799      	b.n	8000d84 <__aeabi_dadd+0xc0>
 8000e50:	4e9b      	ldr	r6, [pc, #620]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000e52:	42b5      	cmp	r5, r6
 8000e54:	d038      	beq.n	8000ec8 <__aeabi_dadd+0x204>
 8000e56:	2680      	movs	r6, #128	; 0x80
 8000e58:	0436      	lsls	r6, r6, #16
 8000e5a:	4337      	orrs	r7, r6
 8000e5c:	46b8      	mov	r8, r7
 8000e5e:	2b38      	cmp	r3, #56	; 0x38
 8000e60:	dd00      	ble.n	8000e64 <__aeabi_dadd+0x1a0>
 8000e62:	e0dc      	b.n	800101e <__aeabi_dadd+0x35a>
 8000e64:	2b1f      	cmp	r3, #31
 8000e66:	dc00      	bgt.n	8000e6a <__aeabi_dadd+0x1a6>
 8000e68:	e130      	b.n	80010cc <__aeabi_dadd+0x408>
 8000e6a:	001e      	movs	r6, r3
 8000e6c:	4647      	mov	r7, r8
 8000e6e:	3e20      	subs	r6, #32
 8000e70:	40f7      	lsrs	r7, r6
 8000e72:	46bc      	mov	ip, r7
 8000e74:	2b20      	cmp	r3, #32
 8000e76:	d004      	beq.n	8000e82 <__aeabi_dadd+0x1be>
 8000e78:	2640      	movs	r6, #64	; 0x40
 8000e7a:	1af3      	subs	r3, r6, r3
 8000e7c:	4646      	mov	r6, r8
 8000e7e:	409e      	lsls	r6, r3
 8000e80:	4332      	orrs	r2, r6
 8000e82:	0017      	movs	r7, r2
 8000e84:	4663      	mov	r3, ip
 8000e86:	1e7a      	subs	r2, r7, #1
 8000e88:	4197      	sbcs	r7, r2
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	e0cc      	b.n	8001028 <__aeabi_dadd+0x364>
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d100      	bne.n	8000e94 <__aeabi_dadd+0x1d0>
 8000e92:	e204      	b.n	800129e <__aeabi_dadd+0x5da>
 8000e94:	4643      	mov	r3, r8
 8000e96:	4313      	orrs	r3, r2
 8000e98:	d100      	bne.n	8000e9c <__aeabi_dadd+0x1d8>
 8000e9a:	e159      	b.n	8001150 <__aeabi_dadd+0x48c>
 8000e9c:	074b      	lsls	r3, r1, #29
 8000e9e:	08c0      	lsrs	r0, r0, #3
 8000ea0:	4318      	orrs	r0, r3
 8000ea2:	2380      	movs	r3, #128	; 0x80
 8000ea4:	08c9      	lsrs	r1, r1, #3
 8000ea6:	031b      	lsls	r3, r3, #12
 8000ea8:	4219      	tst	r1, r3
 8000eaa:	d008      	beq.n	8000ebe <__aeabi_dadd+0x1fa>
 8000eac:	4645      	mov	r5, r8
 8000eae:	08ed      	lsrs	r5, r5, #3
 8000eb0:	421d      	tst	r5, r3
 8000eb2:	d104      	bne.n	8000ebe <__aeabi_dadd+0x1fa>
 8000eb4:	4643      	mov	r3, r8
 8000eb6:	08d0      	lsrs	r0, r2, #3
 8000eb8:	0759      	lsls	r1, r3, #29
 8000eba:	4308      	orrs	r0, r1
 8000ebc:	0029      	movs	r1, r5
 8000ebe:	0f42      	lsrs	r2, r0, #29
 8000ec0:	00c9      	lsls	r1, r1, #3
 8000ec2:	4d7f      	ldr	r5, [pc, #508]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000ec4:	4311      	orrs	r1, r2
 8000ec6:	00c0      	lsls	r0, r0, #3
 8000ec8:	074b      	lsls	r3, r1, #29
 8000eca:	08ca      	lsrs	r2, r1, #3
 8000ecc:	497c      	ldr	r1, [pc, #496]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000ece:	08c0      	lsrs	r0, r0, #3
 8000ed0:	4303      	orrs	r3, r0
 8000ed2:	428d      	cmp	r5, r1
 8000ed4:	d068      	beq.n	8000fa8 <__aeabi_dadd+0x2e4>
 8000ed6:	0312      	lsls	r2, r2, #12
 8000ed8:	056d      	lsls	r5, r5, #21
 8000eda:	0b12      	lsrs	r2, r2, #12
 8000edc:	0d6d      	lsrs	r5, r5, #21
 8000ede:	2100      	movs	r1, #0
 8000ee0:	0312      	lsls	r2, r2, #12
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	0b13      	lsrs	r3, r2, #12
 8000ee6:	0d0a      	lsrs	r2, r1, #20
 8000ee8:	0512      	lsls	r2, r2, #20
 8000eea:	431a      	orrs	r2, r3
 8000eec:	4b76      	ldr	r3, [pc, #472]	; (80010c8 <__aeabi_dadd+0x404>)
 8000eee:	052d      	lsls	r5, r5, #20
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	432b      	orrs	r3, r5
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	07e4      	lsls	r4, r4, #31
 8000ef8:	085b      	lsrs	r3, r3, #1
 8000efa:	4323      	orrs	r3, r4
 8000efc:	0019      	movs	r1, r3
 8000efe:	bc1c      	pop	{r2, r3, r4}
 8000f00:	4690      	mov	r8, r2
 8000f02:	4699      	mov	r9, r3
 8000f04:	46a2      	mov	sl, r4
 8000f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f08:	003e      	movs	r6, r7
 8000f0a:	4316      	orrs	r6, r2
 8000f0c:	d012      	beq.n	8000f34 <__aeabi_dadd+0x270>
 8000f0e:	1e5e      	subs	r6, r3, #1
 8000f10:	2e00      	cmp	r6, #0
 8000f12:	d000      	beq.n	8000f16 <__aeabi_dadd+0x252>
 8000f14:	e100      	b.n	8001118 <__aeabi_dadd+0x454>
 8000f16:	1887      	adds	r7, r0, r2
 8000f18:	4287      	cmp	r7, r0
 8000f1a:	4180      	sbcs	r0, r0
 8000f1c:	4441      	add	r1, r8
 8000f1e:	4240      	negs	r0, r0
 8000f20:	1809      	adds	r1, r1, r0
 8000f22:	2501      	movs	r5, #1
 8000f24:	020b      	lsls	r3, r1, #8
 8000f26:	d533      	bpl.n	8000f90 <__aeabi_dadd+0x2cc>
 8000f28:	2502      	movs	r5, #2
 8000f2a:	e785      	b.n	8000e38 <__aeabi_dadd+0x174>
 8000f2c:	4664      	mov	r4, ip
 8000f2e:	0033      	movs	r3, r6
 8000f30:	4641      	mov	r1, r8
 8000f32:	0010      	movs	r0, r2
 8000f34:	001d      	movs	r5, r3
 8000f36:	e7c7      	b.n	8000ec8 <__aeabi_dadd+0x204>
 8000f38:	2d00      	cmp	r5, #0
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_dadd+0x27a>
 8000f3c:	e0da      	b.n	80010f4 <__aeabi_dadd+0x430>
 8000f3e:	000c      	movs	r4, r1
 8000f40:	4304      	orrs	r4, r0
 8000f42:	d0f3      	beq.n	8000f2c <__aeabi_dadd+0x268>
 8000f44:	1c5c      	adds	r4, r3, #1
 8000f46:	d100      	bne.n	8000f4a <__aeabi_dadd+0x286>
 8000f48:	e19f      	b.n	800128a <__aeabi_dadd+0x5c6>
 8000f4a:	4c5d      	ldr	r4, [pc, #372]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000f4c:	42a6      	cmp	r6, r4
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_dadd+0x28e>
 8000f50:	e12f      	b.n	80011b2 <__aeabi_dadd+0x4ee>
 8000f52:	43db      	mvns	r3, r3
 8000f54:	2b38      	cmp	r3, #56	; 0x38
 8000f56:	dd00      	ble.n	8000f5a <__aeabi_dadd+0x296>
 8000f58:	e166      	b.n	8001228 <__aeabi_dadd+0x564>
 8000f5a:	2b1f      	cmp	r3, #31
 8000f5c:	dd00      	ble.n	8000f60 <__aeabi_dadd+0x29c>
 8000f5e:	e183      	b.n	8001268 <__aeabi_dadd+0x5a4>
 8000f60:	2420      	movs	r4, #32
 8000f62:	0005      	movs	r5, r0
 8000f64:	1ae4      	subs	r4, r4, r3
 8000f66:	000f      	movs	r7, r1
 8000f68:	40dd      	lsrs	r5, r3
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	40a0      	lsls	r0, r4
 8000f6e:	4643      	mov	r3, r8
 8000f70:	40a7      	lsls	r7, r4
 8000f72:	1a5b      	subs	r3, r3, r1
 8000f74:	1e44      	subs	r4, r0, #1
 8000f76:	41a0      	sbcs	r0, r4
 8000f78:	4698      	mov	r8, r3
 8000f7a:	432f      	orrs	r7, r5
 8000f7c:	4338      	orrs	r0, r7
 8000f7e:	1a17      	subs	r7, r2, r0
 8000f80:	42ba      	cmp	r2, r7
 8000f82:	4192      	sbcs	r2, r2
 8000f84:	4643      	mov	r3, r8
 8000f86:	4252      	negs	r2, r2
 8000f88:	1a99      	subs	r1, r3, r2
 8000f8a:	4664      	mov	r4, ip
 8000f8c:	0035      	movs	r5, r6
 8000f8e:	e6ca      	b.n	8000d26 <__aeabi_dadd+0x62>
 8000f90:	2207      	movs	r2, #7
 8000f92:	403a      	ands	r2, r7
 8000f94:	2a00      	cmp	r2, #0
 8000f96:	d000      	beq.n	8000f9a <__aeabi_dadd+0x2d6>
 8000f98:	e6f6      	b.n	8000d88 <__aeabi_dadd+0xc4>
 8000f9a:	074b      	lsls	r3, r1, #29
 8000f9c:	08ca      	lsrs	r2, r1, #3
 8000f9e:	4948      	ldr	r1, [pc, #288]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000fa0:	08ff      	lsrs	r7, r7, #3
 8000fa2:	433b      	orrs	r3, r7
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d196      	bne.n	8000ed6 <__aeabi_dadd+0x212>
 8000fa8:	0019      	movs	r1, r3
 8000faa:	4311      	orrs	r1, r2
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_dadd+0x2ec>
 8000fae:	e19e      	b.n	80012ee <__aeabi_dadd+0x62a>
 8000fb0:	2180      	movs	r1, #128	; 0x80
 8000fb2:	0309      	lsls	r1, r1, #12
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	0312      	lsls	r2, r2, #12
 8000fb8:	0b12      	lsrs	r2, r2, #12
 8000fba:	4d41      	ldr	r5, [pc, #260]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000fbc:	e78f      	b.n	8000ede <__aeabi_dadd+0x21a>
 8000fbe:	0015      	movs	r5, r2
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e78b      	b.n	8000ede <__aeabi_dadd+0x21a>
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d000      	beq.n	8000fcc <__aeabi_dadd+0x308>
 8000fca:	e0c7      	b.n	800115c <__aeabi_dadd+0x498>
 8000fcc:	1c6b      	adds	r3, r5, #1
 8000fce:	055f      	lsls	r7, r3, #21
 8000fd0:	0d7f      	lsrs	r7, r7, #21
 8000fd2:	2f01      	cmp	r7, #1
 8000fd4:	dc00      	bgt.n	8000fd8 <__aeabi_dadd+0x314>
 8000fd6:	e0f1      	b.n	80011bc <__aeabi_dadd+0x4f8>
 8000fd8:	4d39      	ldr	r5, [pc, #228]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8000fda:	42ab      	cmp	r3, r5
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_dadd+0x31c>
 8000fde:	e0b9      	b.n	8001154 <__aeabi_dadd+0x490>
 8000fe0:	1885      	adds	r5, r0, r2
 8000fe2:	000a      	movs	r2, r1
 8000fe4:	4285      	cmp	r5, r0
 8000fe6:	4189      	sbcs	r1, r1
 8000fe8:	4442      	add	r2, r8
 8000fea:	4249      	negs	r1, r1
 8000fec:	1851      	adds	r1, r2, r1
 8000fee:	2207      	movs	r2, #7
 8000ff0:	07cf      	lsls	r7, r1, #31
 8000ff2:	086d      	lsrs	r5, r5, #1
 8000ff4:	432f      	orrs	r7, r5
 8000ff6:	0849      	lsrs	r1, r1, #1
 8000ff8:	403a      	ands	r2, r7
 8000ffa:	001d      	movs	r5, r3
 8000ffc:	e6c2      	b.n	8000d84 <__aeabi_dadd+0xc0>
 8000ffe:	2207      	movs	r2, #7
 8001000:	4930      	ldr	r1, [pc, #192]	; (80010c4 <__aeabi_dadd+0x400>)
 8001002:	1aed      	subs	r5, r5, r3
 8001004:	4031      	ands	r1, r6
 8001006:	403a      	ands	r2, r7
 8001008:	e6bc      	b.n	8000d84 <__aeabi_dadd+0xc0>
 800100a:	003e      	movs	r6, r7
 800100c:	3828      	subs	r0, #40	; 0x28
 800100e:	4086      	lsls	r6, r0
 8001010:	2700      	movs	r7, #0
 8001012:	e69f      	b.n	8000d54 <__aeabi_dadd+0x90>
 8001014:	0038      	movs	r0, r7
 8001016:	f001 f837 	bl	8002088 <__clzsi2>
 800101a:	3020      	adds	r0, #32
 800101c:	e68e      	b.n	8000d3c <__aeabi_dadd+0x78>
 800101e:	4643      	mov	r3, r8
 8001020:	4313      	orrs	r3, r2
 8001022:	001f      	movs	r7, r3
 8001024:	1e7a      	subs	r2, r7, #1
 8001026:	4197      	sbcs	r7, r2
 8001028:	1bc7      	subs	r7, r0, r7
 800102a:	42b8      	cmp	r0, r7
 800102c:	4180      	sbcs	r0, r0
 800102e:	4240      	negs	r0, r0
 8001030:	1a09      	subs	r1, r1, r0
 8001032:	e678      	b.n	8000d26 <__aeabi_dadd+0x62>
 8001034:	000e      	movs	r6, r1
 8001036:	003b      	movs	r3, r7
 8001038:	4306      	orrs	r6, r0
 800103a:	4313      	orrs	r3, r2
 800103c:	2d00      	cmp	r5, #0
 800103e:	d161      	bne.n	8001104 <__aeabi_dadd+0x440>
 8001040:	2e00      	cmp	r6, #0
 8001042:	d000      	beq.n	8001046 <__aeabi_dadd+0x382>
 8001044:	e0f4      	b.n	8001230 <__aeabi_dadd+0x56c>
 8001046:	2b00      	cmp	r3, #0
 8001048:	d100      	bne.n	800104c <__aeabi_dadd+0x388>
 800104a:	e11b      	b.n	8001284 <__aeabi_dadd+0x5c0>
 800104c:	4664      	mov	r4, ip
 800104e:	0039      	movs	r1, r7
 8001050:	0010      	movs	r0, r2
 8001052:	e739      	b.n	8000ec8 <__aeabi_dadd+0x204>
 8001054:	4f1a      	ldr	r7, [pc, #104]	; (80010c0 <__aeabi_dadd+0x3fc>)
 8001056:	42bb      	cmp	r3, r7
 8001058:	d07a      	beq.n	8001150 <__aeabi_dadd+0x48c>
 800105a:	0033      	movs	r3, r6
 800105c:	e6ff      	b.n	8000e5e <__aeabi_dadd+0x19a>
 800105e:	0030      	movs	r0, r6
 8001060:	3d1f      	subs	r5, #31
 8001062:	40e8      	lsrs	r0, r5
 8001064:	2b20      	cmp	r3, #32
 8001066:	d003      	beq.n	8001070 <__aeabi_dadd+0x3ac>
 8001068:	2140      	movs	r1, #64	; 0x40
 800106a:	1acb      	subs	r3, r1, r3
 800106c:	409e      	lsls	r6, r3
 800106e:	4337      	orrs	r7, r6
 8001070:	1e7b      	subs	r3, r7, #1
 8001072:	419f      	sbcs	r7, r3
 8001074:	2207      	movs	r2, #7
 8001076:	4307      	orrs	r7, r0
 8001078:	403a      	ands	r2, r7
 800107a:	2100      	movs	r1, #0
 800107c:	2500      	movs	r5, #0
 800107e:	e789      	b.n	8000f94 <__aeabi_dadd+0x2d0>
 8001080:	1a17      	subs	r7, r2, r0
 8001082:	4643      	mov	r3, r8
 8001084:	42ba      	cmp	r2, r7
 8001086:	41b6      	sbcs	r6, r6
 8001088:	1a59      	subs	r1, r3, r1
 800108a:	4276      	negs	r6, r6
 800108c:	1b8e      	subs	r6, r1, r6
 800108e:	4664      	mov	r4, ip
 8001090:	e64e      	b.n	8000d30 <__aeabi_dadd+0x6c>
 8001092:	2b1f      	cmp	r3, #31
 8001094:	dd00      	ble.n	8001098 <__aeabi_dadd+0x3d4>
 8001096:	e0ad      	b.n	80011f4 <__aeabi_dadd+0x530>
 8001098:	2620      	movs	r6, #32
 800109a:	4647      	mov	r7, r8
 800109c:	1af6      	subs	r6, r6, r3
 800109e:	40b7      	lsls	r7, r6
 80010a0:	46b9      	mov	r9, r7
 80010a2:	0017      	movs	r7, r2
 80010a4:	46b2      	mov	sl, r6
 80010a6:	40df      	lsrs	r7, r3
 80010a8:	464e      	mov	r6, r9
 80010aa:	433e      	orrs	r6, r7
 80010ac:	0037      	movs	r7, r6
 80010ae:	4656      	mov	r6, sl
 80010b0:	40b2      	lsls	r2, r6
 80010b2:	1e56      	subs	r6, r2, #1
 80010b4:	41b2      	sbcs	r2, r6
 80010b6:	4317      	orrs	r7, r2
 80010b8:	4642      	mov	r2, r8
 80010ba:	40da      	lsrs	r2, r3
 80010bc:	1889      	adds	r1, r1, r2
 80010be:	e6ae      	b.n	8000e1e <__aeabi_dadd+0x15a>
 80010c0:	000007ff 	.word	0x000007ff
 80010c4:	ff7fffff 	.word	0xff7fffff
 80010c8:	800fffff 	.word	0x800fffff
 80010cc:	2620      	movs	r6, #32
 80010ce:	4647      	mov	r7, r8
 80010d0:	1af6      	subs	r6, r6, r3
 80010d2:	40b7      	lsls	r7, r6
 80010d4:	46b9      	mov	r9, r7
 80010d6:	0017      	movs	r7, r2
 80010d8:	46b2      	mov	sl, r6
 80010da:	40df      	lsrs	r7, r3
 80010dc:	464e      	mov	r6, r9
 80010de:	433e      	orrs	r6, r7
 80010e0:	0037      	movs	r7, r6
 80010e2:	4656      	mov	r6, sl
 80010e4:	40b2      	lsls	r2, r6
 80010e6:	1e56      	subs	r6, r2, #1
 80010e8:	41b2      	sbcs	r2, r6
 80010ea:	4317      	orrs	r7, r2
 80010ec:	4642      	mov	r2, r8
 80010ee:	40da      	lsrs	r2, r3
 80010f0:	1a89      	subs	r1, r1, r2
 80010f2:	e799      	b.n	8001028 <__aeabi_dadd+0x364>
 80010f4:	4c7f      	ldr	r4, [pc, #508]	; (80012f4 <__aeabi_dadd+0x630>)
 80010f6:	42a6      	cmp	r6, r4
 80010f8:	d05b      	beq.n	80011b2 <__aeabi_dadd+0x4ee>
 80010fa:	2480      	movs	r4, #128	; 0x80
 80010fc:	0424      	lsls	r4, r4, #16
 80010fe:	425b      	negs	r3, r3
 8001100:	4321      	orrs	r1, r4
 8001102:	e727      	b.n	8000f54 <__aeabi_dadd+0x290>
 8001104:	2e00      	cmp	r6, #0
 8001106:	d10c      	bne.n	8001122 <__aeabi_dadd+0x45e>
 8001108:	2b00      	cmp	r3, #0
 800110a:	d100      	bne.n	800110e <__aeabi_dadd+0x44a>
 800110c:	e0cb      	b.n	80012a6 <__aeabi_dadd+0x5e2>
 800110e:	4664      	mov	r4, ip
 8001110:	0039      	movs	r1, r7
 8001112:	0010      	movs	r0, r2
 8001114:	4d77      	ldr	r5, [pc, #476]	; (80012f4 <__aeabi_dadd+0x630>)
 8001116:	e6d7      	b.n	8000ec8 <__aeabi_dadd+0x204>
 8001118:	4f76      	ldr	r7, [pc, #472]	; (80012f4 <__aeabi_dadd+0x630>)
 800111a:	42bb      	cmp	r3, r7
 800111c:	d018      	beq.n	8001150 <__aeabi_dadd+0x48c>
 800111e:	0033      	movs	r3, r6
 8001120:	e675      	b.n	8000e0e <__aeabi_dadd+0x14a>
 8001122:	2b00      	cmp	r3, #0
 8001124:	d014      	beq.n	8001150 <__aeabi_dadd+0x48c>
 8001126:	074b      	lsls	r3, r1, #29
 8001128:	08c0      	lsrs	r0, r0, #3
 800112a:	4318      	orrs	r0, r3
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	08c9      	lsrs	r1, r1, #3
 8001130:	031b      	lsls	r3, r3, #12
 8001132:	4219      	tst	r1, r3
 8001134:	d007      	beq.n	8001146 <__aeabi_dadd+0x482>
 8001136:	08fc      	lsrs	r4, r7, #3
 8001138:	421c      	tst	r4, r3
 800113a:	d104      	bne.n	8001146 <__aeabi_dadd+0x482>
 800113c:	0779      	lsls	r1, r7, #29
 800113e:	08d0      	lsrs	r0, r2, #3
 8001140:	4308      	orrs	r0, r1
 8001142:	46e1      	mov	r9, ip
 8001144:	0021      	movs	r1, r4
 8001146:	464c      	mov	r4, r9
 8001148:	0f42      	lsrs	r2, r0, #29
 800114a:	00c9      	lsls	r1, r1, #3
 800114c:	4311      	orrs	r1, r2
 800114e:	00c0      	lsls	r0, r0, #3
 8001150:	4d68      	ldr	r5, [pc, #416]	; (80012f4 <__aeabi_dadd+0x630>)
 8001152:	e6b9      	b.n	8000ec8 <__aeabi_dadd+0x204>
 8001154:	001d      	movs	r5, r3
 8001156:	2200      	movs	r2, #0
 8001158:	2300      	movs	r3, #0
 800115a:	e6c0      	b.n	8000ede <__aeabi_dadd+0x21a>
 800115c:	2d00      	cmp	r5, #0
 800115e:	d15b      	bne.n	8001218 <__aeabi_dadd+0x554>
 8001160:	000d      	movs	r5, r1
 8001162:	4305      	orrs	r5, r0
 8001164:	d100      	bne.n	8001168 <__aeabi_dadd+0x4a4>
 8001166:	e6e2      	b.n	8000f2e <__aeabi_dadd+0x26a>
 8001168:	1c5d      	adds	r5, r3, #1
 800116a:	d100      	bne.n	800116e <__aeabi_dadd+0x4aa>
 800116c:	e0b0      	b.n	80012d0 <__aeabi_dadd+0x60c>
 800116e:	4d61      	ldr	r5, [pc, #388]	; (80012f4 <__aeabi_dadd+0x630>)
 8001170:	42ae      	cmp	r6, r5
 8001172:	d01f      	beq.n	80011b4 <__aeabi_dadd+0x4f0>
 8001174:	43db      	mvns	r3, r3
 8001176:	2b38      	cmp	r3, #56	; 0x38
 8001178:	dc71      	bgt.n	800125e <__aeabi_dadd+0x59a>
 800117a:	2b1f      	cmp	r3, #31
 800117c:	dd00      	ble.n	8001180 <__aeabi_dadd+0x4bc>
 800117e:	e096      	b.n	80012ae <__aeabi_dadd+0x5ea>
 8001180:	2520      	movs	r5, #32
 8001182:	000f      	movs	r7, r1
 8001184:	1aed      	subs	r5, r5, r3
 8001186:	40af      	lsls	r7, r5
 8001188:	46b9      	mov	r9, r7
 800118a:	0007      	movs	r7, r0
 800118c:	46aa      	mov	sl, r5
 800118e:	40df      	lsrs	r7, r3
 8001190:	464d      	mov	r5, r9
 8001192:	433d      	orrs	r5, r7
 8001194:	002f      	movs	r7, r5
 8001196:	4655      	mov	r5, sl
 8001198:	40a8      	lsls	r0, r5
 800119a:	40d9      	lsrs	r1, r3
 800119c:	1e45      	subs	r5, r0, #1
 800119e:	41a8      	sbcs	r0, r5
 80011a0:	4488      	add	r8, r1
 80011a2:	4307      	orrs	r7, r0
 80011a4:	18bf      	adds	r7, r7, r2
 80011a6:	4297      	cmp	r7, r2
 80011a8:	4192      	sbcs	r2, r2
 80011aa:	4251      	negs	r1, r2
 80011ac:	4441      	add	r1, r8
 80011ae:	0035      	movs	r5, r6
 80011b0:	e63a      	b.n	8000e28 <__aeabi_dadd+0x164>
 80011b2:	4664      	mov	r4, ip
 80011b4:	0035      	movs	r5, r6
 80011b6:	4641      	mov	r1, r8
 80011b8:	0010      	movs	r0, r2
 80011ba:	e685      	b.n	8000ec8 <__aeabi_dadd+0x204>
 80011bc:	000b      	movs	r3, r1
 80011be:	4303      	orrs	r3, r0
 80011c0:	2d00      	cmp	r5, #0
 80011c2:	d000      	beq.n	80011c6 <__aeabi_dadd+0x502>
 80011c4:	e663      	b.n	8000e8e <__aeabi_dadd+0x1ca>
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f5      	beq.n	80011b6 <__aeabi_dadd+0x4f2>
 80011ca:	4643      	mov	r3, r8
 80011cc:	4313      	orrs	r3, r2
 80011ce:	d100      	bne.n	80011d2 <__aeabi_dadd+0x50e>
 80011d0:	e67a      	b.n	8000ec8 <__aeabi_dadd+0x204>
 80011d2:	1887      	adds	r7, r0, r2
 80011d4:	4287      	cmp	r7, r0
 80011d6:	4180      	sbcs	r0, r0
 80011d8:	2207      	movs	r2, #7
 80011da:	4441      	add	r1, r8
 80011dc:	4240      	negs	r0, r0
 80011de:	1809      	adds	r1, r1, r0
 80011e0:	403a      	ands	r2, r7
 80011e2:	020b      	lsls	r3, r1, #8
 80011e4:	d400      	bmi.n	80011e8 <__aeabi_dadd+0x524>
 80011e6:	e6d5      	b.n	8000f94 <__aeabi_dadd+0x2d0>
 80011e8:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <__aeabi_dadd+0x634>)
 80011ea:	3501      	adds	r5, #1
 80011ec:	4019      	ands	r1, r3
 80011ee:	e5c9      	b.n	8000d84 <__aeabi_dadd+0xc0>
 80011f0:	0038      	movs	r0, r7
 80011f2:	e669      	b.n	8000ec8 <__aeabi_dadd+0x204>
 80011f4:	001e      	movs	r6, r3
 80011f6:	4647      	mov	r7, r8
 80011f8:	3e20      	subs	r6, #32
 80011fa:	40f7      	lsrs	r7, r6
 80011fc:	46bc      	mov	ip, r7
 80011fe:	2b20      	cmp	r3, #32
 8001200:	d004      	beq.n	800120c <__aeabi_dadd+0x548>
 8001202:	2640      	movs	r6, #64	; 0x40
 8001204:	1af3      	subs	r3, r6, r3
 8001206:	4646      	mov	r6, r8
 8001208:	409e      	lsls	r6, r3
 800120a:	4332      	orrs	r2, r6
 800120c:	0017      	movs	r7, r2
 800120e:	4663      	mov	r3, ip
 8001210:	1e7a      	subs	r2, r7, #1
 8001212:	4197      	sbcs	r7, r2
 8001214:	431f      	orrs	r7, r3
 8001216:	e602      	b.n	8000e1e <__aeabi_dadd+0x15a>
 8001218:	4d36      	ldr	r5, [pc, #216]	; (80012f4 <__aeabi_dadd+0x630>)
 800121a:	42ae      	cmp	r6, r5
 800121c:	d0ca      	beq.n	80011b4 <__aeabi_dadd+0x4f0>
 800121e:	2580      	movs	r5, #128	; 0x80
 8001220:	042d      	lsls	r5, r5, #16
 8001222:	425b      	negs	r3, r3
 8001224:	4329      	orrs	r1, r5
 8001226:	e7a6      	b.n	8001176 <__aeabi_dadd+0x4b2>
 8001228:	4308      	orrs	r0, r1
 800122a:	1e41      	subs	r1, r0, #1
 800122c:	4188      	sbcs	r0, r1
 800122e:	e6a6      	b.n	8000f7e <__aeabi_dadd+0x2ba>
 8001230:	2b00      	cmp	r3, #0
 8001232:	d100      	bne.n	8001236 <__aeabi_dadd+0x572>
 8001234:	e648      	b.n	8000ec8 <__aeabi_dadd+0x204>
 8001236:	1a87      	subs	r7, r0, r2
 8001238:	4643      	mov	r3, r8
 800123a:	42b8      	cmp	r0, r7
 800123c:	41b6      	sbcs	r6, r6
 800123e:	1acb      	subs	r3, r1, r3
 8001240:	4276      	negs	r6, r6
 8001242:	1b9e      	subs	r6, r3, r6
 8001244:	0233      	lsls	r3, r6, #8
 8001246:	d54b      	bpl.n	80012e0 <__aeabi_dadd+0x61c>
 8001248:	1a17      	subs	r7, r2, r0
 800124a:	4643      	mov	r3, r8
 800124c:	42ba      	cmp	r2, r7
 800124e:	4192      	sbcs	r2, r2
 8001250:	1a59      	subs	r1, r3, r1
 8001252:	4252      	negs	r2, r2
 8001254:	1a89      	subs	r1, r1, r2
 8001256:	2207      	movs	r2, #7
 8001258:	4664      	mov	r4, ip
 800125a:	403a      	ands	r2, r7
 800125c:	e592      	b.n	8000d84 <__aeabi_dadd+0xc0>
 800125e:	4301      	orrs	r1, r0
 8001260:	000f      	movs	r7, r1
 8001262:	1e79      	subs	r1, r7, #1
 8001264:	418f      	sbcs	r7, r1
 8001266:	e79d      	b.n	80011a4 <__aeabi_dadd+0x4e0>
 8001268:	001c      	movs	r4, r3
 800126a:	000f      	movs	r7, r1
 800126c:	3c20      	subs	r4, #32
 800126e:	40e7      	lsrs	r7, r4
 8001270:	2b20      	cmp	r3, #32
 8001272:	d003      	beq.n	800127c <__aeabi_dadd+0x5b8>
 8001274:	2440      	movs	r4, #64	; 0x40
 8001276:	1ae3      	subs	r3, r4, r3
 8001278:	4099      	lsls	r1, r3
 800127a:	4308      	orrs	r0, r1
 800127c:	1e41      	subs	r1, r0, #1
 800127e:	4188      	sbcs	r0, r1
 8001280:	4338      	orrs	r0, r7
 8001282:	e67c      	b.n	8000f7e <__aeabi_dadd+0x2ba>
 8001284:	2200      	movs	r2, #0
 8001286:	2400      	movs	r4, #0
 8001288:	e625      	b.n	8000ed6 <__aeabi_dadd+0x212>
 800128a:	1a17      	subs	r7, r2, r0
 800128c:	4643      	mov	r3, r8
 800128e:	42ba      	cmp	r2, r7
 8001290:	4192      	sbcs	r2, r2
 8001292:	1a59      	subs	r1, r3, r1
 8001294:	4252      	negs	r2, r2
 8001296:	1a89      	subs	r1, r1, r2
 8001298:	4664      	mov	r4, ip
 800129a:	0035      	movs	r5, r6
 800129c:	e543      	b.n	8000d26 <__aeabi_dadd+0x62>
 800129e:	4641      	mov	r1, r8
 80012a0:	0010      	movs	r0, r2
 80012a2:	4d14      	ldr	r5, [pc, #80]	; (80012f4 <__aeabi_dadd+0x630>)
 80012a4:	e610      	b.n	8000ec8 <__aeabi_dadd+0x204>
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	2400      	movs	r4, #0
 80012aa:	0312      	lsls	r2, r2, #12
 80012ac:	e680      	b.n	8000fb0 <__aeabi_dadd+0x2ec>
 80012ae:	001d      	movs	r5, r3
 80012b0:	000f      	movs	r7, r1
 80012b2:	3d20      	subs	r5, #32
 80012b4:	40ef      	lsrs	r7, r5
 80012b6:	46bc      	mov	ip, r7
 80012b8:	2b20      	cmp	r3, #32
 80012ba:	d003      	beq.n	80012c4 <__aeabi_dadd+0x600>
 80012bc:	2540      	movs	r5, #64	; 0x40
 80012be:	1aeb      	subs	r3, r5, r3
 80012c0:	4099      	lsls	r1, r3
 80012c2:	4308      	orrs	r0, r1
 80012c4:	0007      	movs	r7, r0
 80012c6:	4663      	mov	r3, ip
 80012c8:	1e78      	subs	r0, r7, #1
 80012ca:	4187      	sbcs	r7, r0
 80012cc:	431f      	orrs	r7, r3
 80012ce:	e769      	b.n	80011a4 <__aeabi_dadd+0x4e0>
 80012d0:	1887      	adds	r7, r0, r2
 80012d2:	4297      	cmp	r7, r2
 80012d4:	419b      	sbcs	r3, r3
 80012d6:	4441      	add	r1, r8
 80012d8:	425b      	negs	r3, r3
 80012da:	18c9      	adds	r1, r1, r3
 80012dc:	0035      	movs	r5, r6
 80012de:	e5a3      	b.n	8000e28 <__aeabi_dadd+0x164>
 80012e0:	003b      	movs	r3, r7
 80012e2:	4333      	orrs	r3, r6
 80012e4:	d0ce      	beq.n	8001284 <__aeabi_dadd+0x5c0>
 80012e6:	2207      	movs	r2, #7
 80012e8:	0031      	movs	r1, r6
 80012ea:	403a      	ands	r2, r7
 80012ec:	e652      	b.n	8000f94 <__aeabi_dadd+0x2d0>
 80012ee:	2300      	movs	r3, #0
 80012f0:	001a      	movs	r2, r3
 80012f2:	e5f4      	b.n	8000ede <__aeabi_dadd+0x21a>
 80012f4:	000007ff 	.word	0x000007ff
 80012f8:	ff7fffff 	.word	0xff7fffff

080012fc <__aeabi_dmul>:
 80012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fe:	4657      	mov	r7, sl
 8001300:	46de      	mov	lr, fp
 8001302:	464e      	mov	r6, r9
 8001304:	4645      	mov	r5, r8
 8001306:	b5e0      	push	{r5, r6, r7, lr}
 8001308:	4683      	mov	fp, r0
 800130a:	0006      	movs	r6, r0
 800130c:	030f      	lsls	r7, r1, #12
 800130e:	0048      	lsls	r0, r1, #1
 8001310:	b087      	sub	sp, #28
 8001312:	4692      	mov	sl, r2
 8001314:	001d      	movs	r5, r3
 8001316:	0b3f      	lsrs	r7, r7, #12
 8001318:	0d40      	lsrs	r0, r0, #21
 800131a:	0fcc      	lsrs	r4, r1, #31
 800131c:	2800      	cmp	r0, #0
 800131e:	d100      	bne.n	8001322 <__aeabi_dmul+0x26>
 8001320:	e06f      	b.n	8001402 <__aeabi_dmul+0x106>
 8001322:	4bde      	ldr	r3, [pc, #888]	; (800169c <__aeabi_dmul+0x3a0>)
 8001324:	4298      	cmp	r0, r3
 8001326:	d038      	beq.n	800139a <__aeabi_dmul+0x9e>
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	00ff      	lsls	r7, r7, #3
 800132c:	041b      	lsls	r3, r3, #16
 800132e:	431f      	orrs	r7, r3
 8001330:	0f73      	lsrs	r3, r6, #29
 8001332:	433b      	orrs	r3, r7
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	4bda      	ldr	r3, [pc, #872]	; (80016a0 <__aeabi_dmul+0x3a4>)
 8001338:	2700      	movs	r7, #0
 800133a:	4699      	mov	r9, r3
 800133c:	2300      	movs	r3, #0
 800133e:	469b      	mov	fp, r3
 8001340:	00f6      	lsls	r6, r6, #3
 8001342:	4481      	add	r9, r0
 8001344:	032b      	lsls	r3, r5, #12
 8001346:	0069      	lsls	r1, r5, #1
 8001348:	0b1b      	lsrs	r3, r3, #12
 800134a:	4652      	mov	r2, sl
 800134c:	4698      	mov	r8, r3
 800134e:	0d49      	lsrs	r1, r1, #21
 8001350:	0fed      	lsrs	r5, r5, #31
 8001352:	2900      	cmp	r1, #0
 8001354:	d100      	bne.n	8001358 <__aeabi_dmul+0x5c>
 8001356:	e085      	b.n	8001464 <__aeabi_dmul+0x168>
 8001358:	4bd0      	ldr	r3, [pc, #832]	; (800169c <__aeabi_dmul+0x3a0>)
 800135a:	4299      	cmp	r1, r3
 800135c:	d100      	bne.n	8001360 <__aeabi_dmul+0x64>
 800135e:	e073      	b.n	8001448 <__aeabi_dmul+0x14c>
 8001360:	4643      	mov	r3, r8
 8001362:	00da      	lsls	r2, r3, #3
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	041b      	lsls	r3, r3, #16
 8001368:	4313      	orrs	r3, r2
 800136a:	4652      	mov	r2, sl
 800136c:	48cc      	ldr	r0, [pc, #816]	; (80016a0 <__aeabi_dmul+0x3a4>)
 800136e:	0f52      	lsrs	r2, r2, #29
 8001370:	4684      	mov	ip, r0
 8001372:	4313      	orrs	r3, r2
 8001374:	4652      	mov	r2, sl
 8001376:	2000      	movs	r0, #0
 8001378:	4461      	add	r1, ip
 800137a:	00d2      	lsls	r2, r2, #3
 800137c:	4489      	add	r9, r1
 800137e:	0021      	movs	r1, r4
 8001380:	4069      	eors	r1, r5
 8001382:	9100      	str	r1, [sp, #0]
 8001384:	468c      	mov	ip, r1
 8001386:	2101      	movs	r1, #1
 8001388:	4449      	add	r1, r9
 800138a:	468a      	mov	sl, r1
 800138c:	2f0f      	cmp	r7, #15
 800138e:	d900      	bls.n	8001392 <__aeabi_dmul+0x96>
 8001390:	e090      	b.n	80014b4 <__aeabi_dmul+0x1b8>
 8001392:	49c4      	ldr	r1, [pc, #784]	; (80016a4 <__aeabi_dmul+0x3a8>)
 8001394:	00bf      	lsls	r7, r7, #2
 8001396:	59cf      	ldr	r7, [r1, r7]
 8001398:	46bf      	mov	pc, r7
 800139a:	465b      	mov	r3, fp
 800139c:	433b      	orrs	r3, r7
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	d000      	beq.n	80013a4 <__aeabi_dmul+0xa8>
 80013a2:	e16a      	b.n	800167a <__aeabi_dmul+0x37e>
 80013a4:	2302      	movs	r3, #2
 80013a6:	2708      	movs	r7, #8
 80013a8:	2600      	movs	r6, #0
 80013aa:	4681      	mov	r9, r0
 80013ac:	469b      	mov	fp, r3
 80013ae:	e7c9      	b.n	8001344 <__aeabi_dmul+0x48>
 80013b0:	0032      	movs	r2, r6
 80013b2:	4658      	mov	r0, fp
 80013b4:	9b01      	ldr	r3, [sp, #4]
 80013b6:	4661      	mov	r1, ip
 80013b8:	9100      	str	r1, [sp, #0]
 80013ba:	2802      	cmp	r0, #2
 80013bc:	d100      	bne.n	80013c0 <__aeabi_dmul+0xc4>
 80013be:	e075      	b.n	80014ac <__aeabi_dmul+0x1b0>
 80013c0:	2803      	cmp	r0, #3
 80013c2:	d100      	bne.n	80013c6 <__aeabi_dmul+0xca>
 80013c4:	e1fe      	b.n	80017c4 <__aeabi_dmul+0x4c8>
 80013c6:	2801      	cmp	r0, #1
 80013c8:	d000      	beq.n	80013cc <__aeabi_dmul+0xd0>
 80013ca:	e12c      	b.n	8001626 <__aeabi_dmul+0x32a>
 80013cc:	2300      	movs	r3, #0
 80013ce:	2700      	movs	r7, #0
 80013d0:	2600      	movs	r6, #0
 80013d2:	2500      	movs	r5, #0
 80013d4:	033f      	lsls	r7, r7, #12
 80013d6:	0d2a      	lsrs	r2, r5, #20
 80013d8:	0b3f      	lsrs	r7, r7, #12
 80013da:	48b3      	ldr	r0, [pc, #716]	; (80016a8 <__aeabi_dmul+0x3ac>)
 80013dc:	0512      	lsls	r2, r2, #20
 80013de:	433a      	orrs	r2, r7
 80013e0:	4002      	ands	r2, r0
 80013e2:	051b      	lsls	r3, r3, #20
 80013e4:	4313      	orrs	r3, r2
 80013e6:	9a00      	ldr	r2, [sp, #0]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	07d1      	lsls	r1, r2, #31
 80013ec:	085b      	lsrs	r3, r3, #1
 80013ee:	430b      	orrs	r3, r1
 80013f0:	0030      	movs	r0, r6
 80013f2:	0019      	movs	r1, r3
 80013f4:	b007      	add	sp, #28
 80013f6:	bc3c      	pop	{r2, r3, r4, r5}
 80013f8:	4690      	mov	r8, r2
 80013fa:	4699      	mov	r9, r3
 80013fc:	46a2      	mov	sl, r4
 80013fe:	46ab      	mov	fp, r5
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001402:	465b      	mov	r3, fp
 8001404:	433b      	orrs	r3, r7
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	d100      	bne.n	800140c <__aeabi_dmul+0x110>
 800140a:	e12f      	b.n	800166c <__aeabi_dmul+0x370>
 800140c:	2f00      	cmp	r7, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_dmul+0x116>
 8001410:	e1a5      	b.n	800175e <__aeabi_dmul+0x462>
 8001412:	0038      	movs	r0, r7
 8001414:	f000 fe38 	bl	8002088 <__clzsi2>
 8001418:	0003      	movs	r3, r0
 800141a:	3b0b      	subs	r3, #11
 800141c:	2b1c      	cmp	r3, #28
 800141e:	dd00      	ble.n	8001422 <__aeabi_dmul+0x126>
 8001420:	e196      	b.n	8001750 <__aeabi_dmul+0x454>
 8001422:	221d      	movs	r2, #29
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	465a      	mov	r2, fp
 8001428:	0001      	movs	r1, r0
 800142a:	40da      	lsrs	r2, r3
 800142c:	465e      	mov	r6, fp
 800142e:	3908      	subs	r1, #8
 8001430:	408f      	lsls	r7, r1
 8001432:	0013      	movs	r3, r2
 8001434:	408e      	lsls	r6, r1
 8001436:	433b      	orrs	r3, r7
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	4b9c      	ldr	r3, [pc, #624]	; (80016ac <__aeabi_dmul+0x3b0>)
 800143c:	2700      	movs	r7, #0
 800143e:	1a1b      	subs	r3, r3, r0
 8001440:	4699      	mov	r9, r3
 8001442:	2300      	movs	r3, #0
 8001444:	469b      	mov	fp, r3
 8001446:	e77d      	b.n	8001344 <__aeabi_dmul+0x48>
 8001448:	4641      	mov	r1, r8
 800144a:	4653      	mov	r3, sl
 800144c:	430b      	orrs	r3, r1
 800144e:	4993      	ldr	r1, [pc, #588]	; (800169c <__aeabi_dmul+0x3a0>)
 8001450:	468c      	mov	ip, r1
 8001452:	44e1      	add	r9, ip
 8001454:	2b00      	cmp	r3, #0
 8001456:	d000      	beq.n	800145a <__aeabi_dmul+0x15e>
 8001458:	e11a      	b.n	8001690 <__aeabi_dmul+0x394>
 800145a:	2202      	movs	r2, #2
 800145c:	2002      	movs	r0, #2
 800145e:	4317      	orrs	r7, r2
 8001460:	2200      	movs	r2, #0
 8001462:	e78c      	b.n	800137e <__aeabi_dmul+0x82>
 8001464:	4313      	orrs	r3, r2
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x16e>
 8001468:	e10d      	b.n	8001686 <__aeabi_dmul+0x38a>
 800146a:	4643      	mov	r3, r8
 800146c:	2b00      	cmp	r3, #0
 800146e:	d100      	bne.n	8001472 <__aeabi_dmul+0x176>
 8001470:	e181      	b.n	8001776 <__aeabi_dmul+0x47a>
 8001472:	4640      	mov	r0, r8
 8001474:	f000 fe08 	bl	8002088 <__clzsi2>
 8001478:	0002      	movs	r2, r0
 800147a:	3a0b      	subs	r2, #11
 800147c:	2a1c      	cmp	r2, #28
 800147e:	dd00      	ble.n	8001482 <__aeabi_dmul+0x186>
 8001480:	e172      	b.n	8001768 <__aeabi_dmul+0x46c>
 8001482:	0001      	movs	r1, r0
 8001484:	4643      	mov	r3, r8
 8001486:	3908      	subs	r1, #8
 8001488:	408b      	lsls	r3, r1
 800148a:	4698      	mov	r8, r3
 800148c:	231d      	movs	r3, #29
 800148e:	1a9a      	subs	r2, r3, r2
 8001490:	4653      	mov	r3, sl
 8001492:	40d3      	lsrs	r3, r2
 8001494:	001a      	movs	r2, r3
 8001496:	4643      	mov	r3, r8
 8001498:	4313      	orrs	r3, r2
 800149a:	4652      	mov	r2, sl
 800149c:	408a      	lsls	r2, r1
 800149e:	4649      	mov	r1, r9
 80014a0:	1a08      	subs	r0, r1, r0
 80014a2:	4982      	ldr	r1, [pc, #520]	; (80016ac <__aeabi_dmul+0x3b0>)
 80014a4:	4689      	mov	r9, r1
 80014a6:	4481      	add	r9, r0
 80014a8:	2000      	movs	r0, #0
 80014aa:	e768      	b.n	800137e <__aeabi_dmul+0x82>
 80014ac:	4b7b      	ldr	r3, [pc, #492]	; (800169c <__aeabi_dmul+0x3a0>)
 80014ae:	2700      	movs	r7, #0
 80014b0:	2600      	movs	r6, #0
 80014b2:	e78e      	b.n	80013d2 <__aeabi_dmul+0xd6>
 80014b4:	0c14      	lsrs	r4, r2, #16
 80014b6:	0412      	lsls	r2, r2, #16
 80014b8:	0c12      	lsrs	r2, r2, #16
 80014ba:	0011      	movs	r1, r2
 80014bc:	0c37      	lsrs	r7, r6, #16
 80014be:	0436      	lsls	r6, r6, #16
 80014c0:	0c35      	lsrs	r5, r6, #16
 80014c2:	4379      	muls	r1, r7
 80014c4:	0028      	movs	r0, r5
 80014c6:	468c      	mov	ip, r1
 80014c8:	002e      	movs	r6, r5
 80014ca:	4360      	muls	r0, r4
 80014cc:	4460      	add	r0, ip
 80014ce:	4683      	mov	fp, r0
 80014d0:	4356      	muls	r6, r2
 80014d2:	0021      	movs	r1, r4
 80014d4:	0c30      	lsrs	r0, r6, #16
 80014d6:	4680      	mov	r8, r0
 80014d8:	4658      	mov	r0, fp
 80014da:	4379      	muls	r1, r7
 80014dc:	4440      	add	r0, r8
 80014de:	9102      	str	r1, [sp, #8]
 80014e0:	4584      	cmp	ip, r0
 80014e2:	d906      	bls.n	80014f2 <__aeabi_dmul+0x1f6>
 80014e4:	4688      	mov	r8, r1
 80014e6:	2180      	movs	r1, #128	; 0x80
 80014e8:	0249      	lsls	r1, r1, #9
 80014ea:	468c      	mov	ip, r1
 80014ec:	44e0      	add	r8, ip
 80014ee:	4641      	mov	r1, r8
 80014f0:	9102      	str	r1, [sp, #8]
 80014f2:	0436      	lsls	r6, r6, #16
 80014f4:	0c01      	lsrs	r1, r0, #16
 80014f6:	0c36      	lsrs	r6, r6, #16
 80014f8:	0400      	lsls	r0, r0, #16
 80014fa:	468b      	mov	fp, r1
 80014fc:	1981      	adds	r1, r0, r6
 80014fe:	0c1e      	lsrs	r6, r3, #16
 8001500:	041b      	lsls	r3, r3, #16
 8001502:	0c1b      	lsrs	r3, r3, #16
 8001504:	9103      	str	r1, [sp, #12]
 8001506:	0019      	movs	r1, r3
 8001508:	4379      	muls	r1, r7
 800150a:	468c      	mov	ip, r1
 800150c:	0028      	movs	r0, r5
 800150e:	4375      	muls	r5, r6
 8001510:	4465      	add	r5, ip
 8001512:	46a8      	mov	r8, r5
 8001514:	4358      	muls	r0, r3
 8001516:	0c05      	lsrs	r5, r0, #16
 8001518:	4445      	add	r5, r8
 800151a:	4377      	muls	r7, r6
 800151c:	42a9      	cmp	r1, r5
 800151e:	d903      	bls.n	8001528 <__aeabi_dmul+0x22c>
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	0249      	lsls	r1, r1, #9
 8001524:	468c      	mov	ip, r1
 8001526:	4467      	add	r7, ip
 8001528:	0c29      	lsrs	r1, r5, #16
 800152a:	468c      	mov	ip, r1
 800152c:	0039      	movs	r1, r7
 800152e:	0400      	lsls	r0, r0, #16
 8001530:	0c00      	lsrs	r0, r0, #16
 8001532:	042d      	lsls	r5, r5, #16
 8001534:	182d      	adds	r5, r5, r0
 8001536:	4461      	add	r1, ip
 8001538:	44ab      	add	fp, r5
 800153a:	9105      	str	r1, [sp, #20]
 800153c:	4659      	mov	r1, fp
 800153e:	9104      	str	r1, [sp, #16]
 8001540:	9901      	ldr	r1, [sp, #4]
 8001542:	040f      	lsls	r7, r1, #16
 8001544:	0c3f      	lsrs	r7, r7, #16
 8001546:	0c08      	lsrs	r0, r1, #16
 8001548:	0039      	movs	r1, r7
 800154a:	4351      	muls	r1, r2
 800154c:	4342      	muls	r2, r0
 800154e:	4690      	mov	r8, r2
 8001550:	0002      	movs	r2, r0
 8001552:	468c      	mov	ip, r1
 8001554:	0c09      	lsrs	r1, r1, #16
 8001556:	468b      	mov	fp, r1
 8001558:	4362      	muls	r2, r4
 800155a:	437c      	muls	r4, r7
 800155c:	4444      	add	r4, r8
 800155e:	445c      	add	r4, fp
 8001560:	45a0      	cmp	r8, r4
 8001562:	d903      	bls.n	800156c <__aeabi_dmul+0x270>
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	0249      	lsls	r1, r1, #9
 8001568:	4688      	mov	r8, r1
 800156a:	4442      	add	r2, r8
 800156c:	0c21      	lsrs	r1, r4, #16
 800156e:	4688      	mov	r8, r1
 8001570:	4661      	mov	r1, ip
 8001572:	0409      	lsls	r1, r1, #16
 8001574:	0c09      	lsrs	r1, r1, #16
 8001576:	468c      	mov	ip, r1
 8001578:	0039      	movs	r1, r7
 800157a:	4359      	muls	r1, r3
 800157c:	4343      	muls	r3, r0
 800157e:	4370      	muls	r0, r6
 8001580:	437e      	muls	r6, r7
 8001582:	0c0f      	lsrs	r7, r1, #16
 8001584:	18f6      	adds	r6, r6, r3
 8001586:	0424      	lsls	r4, r4, #16
 8001588:	19be      	adds	r6, r7, r6
 800158a:	4464      	add	r4, ip
 800158c:	4442      	add	r2, r8
 800158e:	468c      	mov	ip, r1
 8001590:	42b3      	cmp	r3, r6
 8001592:	d903      	bls.n	800159c <__aeabi_dmul+0x2a0>
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	025b      	lsls	r3, r3, #9
 8001598:	4698      	mov	r8, r3
 800159a:	4440      	add	r0, r8
 800159c:	9b02      	ldr	r3, [sp, #8]
 800159e:	4661      	mov	r1, ip
 80015a0:	4698      	mov	r8, r3
 80015a2:	9b04      	ldr	r3, [sp, #16]
 80015a4:	0437      	lsls	r7, r6, #16
 80015a6:	4443      	add	r3, r8
 80015a8:	469b      	mov	fp, r3
 80015aa:	45ab      	cmp	fp, r5
 80015ac:	41ad      	sbcs	r5, r5
 80015ae:	426b      	negs	r3, r5
 80015b0:	040d      	lsls	r5, r1, #16
 80015b2:	9905      	ldr	r1, [sp, #20]
 80015b4:	0c2d      	lsrs	r5, r5, #16
 80015b6:	468c      	mov	ip, r1
 80015b8:	197f      	adds	r7, r7, r5
 80015ba:	4467      	add	r7, ip
 80015bc:	18fd      	adds	r5, r7, r3
 80015be:	46a8      	mov	r8, r5
 80015c0:	465d      	mov	r5, fp
 80015c2:	192d      	adds	r5, r5, r4
 80015c4:	42a5      	cmp	r5, r4
 80015c6:	41a4      	sbcs	r4, r4
 80015c8:	4693      	mov	fp, r2
 80015ca:	4264      	negs	r4, r4
 80015cc:	46a4      	mov	ip, r4
 80015ce:	44c3      	add	fp, r8
 80015d0:	44dc      	add	ip, fp
 80015d2:	428f      	cmp	r7, r1
 80015d4:	41bf      	sbcs	r7, r7
 80015d6:	4598      	cmp	r8, r3
 80015d8:	419b      	sbcs	r3, r3
 80015da:	4593      	cmp	fp, r2
 80015dc:	4192      	sbcs	r2, r2
 80015de:	45a4      	cmp	ip, r4
 80015e0:	41a4      	sbcs	r4, r4
 80015e2:	425b      	negs	r3, r3
 80015e4:	427f      	negs	r7, r7
 80015e6:	431f      	orrs	r7, r3
 80015e8:	0c36      	lsrs	r6, r6, #16
 80015ea:	4252      	negs	r2, r2
 80015ec:	4264      	negs	r4, r4
 80015ee:	19bf      	adds	r7, r7, r6
 80015f0:	4322      	orrs	r2, r4
 80015f2:	18bf      	adds	r7, r7, r2
 80015f4:	4662      	mov	r2, ip
 80015f6:	1838      	adds	r0, r7, r0
 80015f8:	0243      	lsls	r3, r0, #9
 80015fa:	0dd2      	lsrs	r2, r2, #23
 80015fc:	9903      	ldr	r1, [sp, #12]
 80015fe:	4313      	orrs	r3, r2
 8001600:	026a      	lsls	r2, r5, #9
 8001602:	430a      	orrs	r2, r1
 8001604:	1e50      	subs	r0, r2, #1
 8001606:	4182      	sbcs	r2, r0
 8001608:	4661      	mov	r1, ip
 800160a:	0ded      	lsrs	r5, r5, #23
 800160c:	432a      	orrs	r2, r5
 800160e:	024e      	lsls	r6, r1, #9
 8001610:	4332      	orrs	r2, r6
 8001612:	01d9      	lsls	r1, r3, #7
 8001614:	d400      	bmi.n	8001618 <__aeabi_dmul+0x31c>
 8001616:	e0b3      	b.n	8001780 <__aeabi_dmul+0x484>
 8001618:	2601      	movs	r6, #1
 800161a:	0850      	lsrs	r0, r2, #1
 800161c:	4032      	ands	r2, r6
 800161e:	4302      	orrs	r2, r0
 8001620:	07de      	lsls	r6, r3, #31
 8001622:	4332      	orrs	r2, r6
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	4c22      	ldr	r4, [pc, #136]	; (80016b0 <__aeabi_dmul+0x3b4>)
 8001628:	4454      	add	r4, sl
 800162a:	2c00      	cmp	r4, #0
 800162c:	dd62      	ble.n	80016f4 <__aeabi_dmul+0x3f8>
 800162e:	0751      	lsls	r1, r2, #29
 8001630:	d009      	beq.n	8001646 <__aeabi_dmul+0x34a>
 8001632:	200f      	movs	r0, #15
 8001634:	4010      	ands	r0, r2
 8001636:	2804      	cmp	r0, #4
 8001638:	d005      	beq.n	8001646 <__aeabi_dmul+0x34a>
 800163a:	1d10      	adds	r0, r2, #4
 800163c:	4290      	cmp	r0, r2
 800163e:	4192      	sbcs	r2, r2
 8001640:	4252      	negs	r2, r2
 8001642:	189b      	adds	r3, r3, r2
 8001644:	0002      	movs	r2, r0
 8001646:	01d9      	lsls	r1, r3, #7
 8001648:	d504      	bpl.n	8001654 <__aeabi_dmul+0x358>
 800164a:	2480      	movs	r4, #128	; 0x80
 800164c:	4819      	ldr	r0, [pc, #100]	; (80016b4 <__aeabi_dmul+0x3b8>)
 800164e:	00e4      	lsls	r4, r4, #3
 8001650:	4003      	ands	r3, r0
 8001652:	4454      	add	r4, sl
 8001654:	4818      	ldr	r0, [pc, #96]	; (80016b8 <__aeabi_dmul+0x3bc>)
 8001656:	4284      	cmp	r4, r0
 8001658:	dd00      	ble.n	800165c <__aeabi_dmul+0x360>
 800165a:	e727      	b.n	80014ac <__aeabi_dmul+0x1b0>
 800165c:	075e      	lsls	r6, r3, #29
 800165e:	025b      	lsls	r3, r3, #9
 8001660:	08d2      	lsrs	r2, r2, #3
 8001662:	0b1f      	lsrs	r7, r3, #12
 8001664:	0563      	lsls	r3, r4, #21
 8001666:	4316      	orrs	r6, r2
 8001668:	0d5b      	lsrs	r3, r3, #21
 800166a:	e6b2      	b.n	80013d2 <__aeabi_dmul+0xd6>
 800166c:	2300      	movs	r3, #0
 800166e:	4699      	mov	r9, r3
 8001670:	3301      	adds	r3, #1
 8001672:	2704      	movs	r7, #4
 8001674:	2600      	movs	r6, #0
 8001676:	469b      	mov	fp, r3
 8001678:	e664      	b.n	8001344 <__aeabi_dmul+0x48>
 800167a:	2303      	movs	r3, #3
 800167c:	9701      	str	r7, [sp, #4]
 800167e:	4681      	mov	r9, r0
 8001680:	270c      	movs	r7, #12
 8001682:	469b      	mov	fp, r3
 8001684:	e65e      	b.n	8001344 <__aeabi_dmul+0x48>
 8001686:	2201      	movs	r2, #1
 8001688:	2001      	movs	r0, #1
 800168a:	4317      	orrs	r7, r2
 800168c:	2200      	movs	r2, #0
 800168e:	e676      	b.n	800137e <__aeabi_dmul+0x82>
 8001690:	2303      	movs	r3, #3
 8001692:	2003      	movs	r0, #3
 8001694:	431f      	orrs	r7, r3
 8001696:	4643      	mov	r3, r8
 8001698:	e671      	b.n	800137e <__aeabi_dmul+0x82>
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	000007ff 	.word	0x000007ff
 80016a0:	fffffc01 	.word	0xfffffc01
 80016a4:	08003ed8 	.word	0x08003ed8
 80016a8:	800fffff 	.word	0x800fffff
 80016ac:	fffffc0d 	.word	0xfffffc0d
 80016b0:	000003ff 	.word	0x000003ff
 80016b4:	feffffff 	.word	0xfeffffff
 80016b8:	000007fe 	.word	0x000007fe
 80016bc:	2300      	movs	r3, #0
 80016be:	2780      	movs	r7, #128	; 0x80
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	033f      	lsls	r7, r7, #12
 80016c4:	2600      	movs	r6, #0
 80016c6:	4b43      	ldr	r3, [pc, #268]	; (80017d4 <__aeabi_dmul+0x4d8>)
 80016c8:	e683      	b.n	80013d2 <__aeabi_dmul+0xd6>
 80016ca:	9b01      	ldr	r3, [sp, #4]
 80016cc:	0032      	movs	r2, r6
 80016ce:	46a4      	mov	ip, r4
 80016d0:	4658      	mov	r0, fp
 80016d2:	e670      	b.n	80013b6 <__aeabi_dmul+0xba>
 80016d4:	46ac      	mov	ip, r5
 80016d6:	e66e      	b.n	80013b6 <__aeabi_dmul+0xba>
 80016d8:	2780      	movs	r7, #128	; 0x80
 80016da:	9901      	ldr	r1, [sp, #4]
 80016dc:	033f      	lsls	r7, r7, #12
 80016de:	4239      	tst	r1, r7
 80016e0:	d02d      	beq.n	800173e <__aeabi_dmul+0x442>
 80016e2:	423b      	tst	r3, r7
 80016e4:	d12b      	bne.n	800173e <__aeabi_dmul+0x442>
 80016e6:	431f      	orrs	r7, r3
 80016e8:	033f      	lsls	r7, r7, #12
 80016ea:	0b3f      	lsrs	r7, r7, #12
 80016ec:	9500      	str	r5, [sp, #0]
 80016ee:	0016      	movs	r6, r2
 80016f0:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <__aeabi_dmul+0x4d8>)
 80016f2:	e66e      	b.n	80013d2 <__aeabi_dmul+0xd6>
 80016f4:	2501      	movs	r5, #1
 80016f6:	1b2d      	subs	r5, r5, r4
 80016f8:	2d38      	cmp	r5, #56	; 0x38
 80016fa:	dd00      	ble.n	80016fe <__aeabi_dmul+0x402>
 80016fc:	e666      	b.n	80013cc <__aeabi_dmul+0xd0>
 80016fe:	2d1f      	cmp	r5, #31
 8001700:	dc40      	bgt.n	8001784 <__aeabi_dmul+0x488>
 8001702:	4835      	ldr	r0, [pc, #212]	; (80017d8 <__aeabi_dmul+0x4dc>)
 8001704:	001c      	movs	r4, r3
 8001706:	4450      	add	r0, sl
 8001708:	0016      	movs	r6, r2
 800170a:	4082      	lsls	r2, r0
 800170c:	4084      	lsls	r4, r0
 800170e:	40ee      	lsrs	r6, r5
 8001710:	1e50      	subs	r0, r2, #1
 8001712:	4182      	sbcs	r2, r0
 8001714:	4334      	orrs	r4, r6
 8001716:	4314      	orrs	r4, r2
 8001718:	40eb      	lsrs	r3, r5
 800171a:	0762      	lsls	r2, r4, #29
 800171c:	d009      	beq.n	8001732 <__aeabi_dmul+0x436>
 800171e:	220f      	movs	r2, #15
 8001720:	4022      	ands	r2, r4
 8001722:	2a04      	cmp	r2, #4
 8001724:	d005      	beq.n	8001732 <__aeabi_dmul+0x436>
 8001726:	0022      	movs	r2, r4
 8001728:	1d14      	adds	r4, r2, #4
 800172a:	4294      	cmp	r4, r2
 800172c:	4180      	sbcs	r0, r0
 800172e:	4240      	negs	r0, r0
 8001730:	181b      	adds	r3, r3, r0
 8001732:	021a      	lsls	r2, r3, #8
 8001734:	d53e      	bpl.n	80017b4 <__aeabi_dmul+0x4b8>
 8001736:	2301      	movs	r3, #1
 8001738:	2700      	movs	r7, #0
 800173a:	2600      	movs	r6, #0
 800173c:	e649      	b.n	80013d2 <__aeabi_dmul+0xd6>
 800173e:	2780      	movs	r7, #128	; 0x80
 8001740:	9b01      	ldr	r3, [sp, #4]
 8001742:	033f      	lsls	r7, r7, #12
 8001744:	431f      	orrs	r7, r3
 8001746:	033f      	lsls	r7, r7, #12
 8001748:	0b3f      	lsrs	r7, r7, #12
 800174a:	9400      	str	r4, [sp, #0]
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <__aeabi_dmul+0x4d8>)
 800174e:	e640      	b.n	80013d2 <__aeabi_dmul+0xd6>
 8001750:	0003      	movs	r3, r0
 8001752:	465a      	mov	r2, fp
 8001754:	3b28      	subs	r3, #40	; 0x28
 8001756:	409a      	lsls	r2, r3
 8001758:	2600      	movs	r6, #0
 800175a:	9201      	str	r2, [sp, #4]
 800175c:	e66d      	b.n	800143a <__aeabi_dmul+0x13e>
 800175e:	4658      	mov	r0, fp
 8001760:	f000 fc92 	bl	8002088 <__clzsi2>
 8001764:	3020      	adds	r0, #32
 8001766:	e657      	b.n	8001418 <__aeabi_dmul+0x11c>
 8001768:	0003      	movs	r3, r0
 800176a:	4652      	mov	r2, sl
 800176c:	3b28      	subs	r3, #40	; 0x28
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	2200      	movs	r2, #0
 8001774:	e693      	b.n	800149e <__aeabi_dmul+0x1a2>
 8001776:	4650      	mov	r0, sl
 8001778:	f000 fc86 	bl	8002088 <__clzsi2>
 800177c:	3020      	adds	r0, #32
 800177e:	e67b      	b.n	8001478 <__aeabi_dmul+0x17c>
 8001780:	46ca      	mov	sl, r9
 8001782:	e750      	b.n	8001626 <__aeabi_dmul+0x32a>
 8001784:	201f      	movs	r0, #31
 8001786:	001e      	movs	r6, r3
 8001788:	4240      	negs	r0, r0
 800178a:	1b04      	subs	r4, r0, r4
 800178c:	40e6      	lsrs	r6, r4
 800178e:	2d20      	cmp	r5, #32
 8001790:	d003      	beq.n	800179a <__aeabi_dmul+0x49e>
 8001792:	4c12      	ldr	r4, [pc, #72]	; (80017dc <__aeabi_dmul+0x4e0>)
 8001794:	4454      	add	r4, sl
 8001796:	40a3      	lsls	r3, r4
 8001798:	431a      	orrs	r2, r3
 800179a:	1e50      	subs	r0, r2, #1
 800179c:	4182      	sbcs	r2, r0
 800179e:	4332      	orrs	r2, r6
 80017a0:	2607      	movs	r6, #7
 80017a2:	2700      	movs	r7, #0
 80017a4:	4016      	ands	r6, r2
 80017a6:	d009      	beq.n	80017bc <__aeabi_dmul+0x4c0>
 80017a8:	200f      	movs	r0, #15
 80017aa:	2300      	movs	r3, #0
 80017ac:	4010      	ands	r0, r2
 80017ae:	0014      	movs	r4, r2
 80017b0:	2804      	cmp	r0, #4
 80017b2:	d1b9      	bne.n	8001728 <__aeabi_dmul+0x42c>
 80017b4:	0022      	movs	r2, r4
 80017b6:	075e      	lsls	r6, r3, #29
 80017b8:	025b      	lsls	r3, r3, #9
 80017ba:	0b1f      	lsrs	r7, r3, #12
 80017bc:	08d2      	lsrs	r2, r2, #3
 80017be:	4316      	orrs	r6, r2
 80017c0:	2300      	movs	r3, #0
 80017c2:	e606      	b.n	80013d2 <__aeabi_dmul+0xd6>
 80017c4:	2780      	movs	r7, #128	; 0x80
 80017c6:	033f      	lsls	r7, r7, #12
 80017c8:	431f      	orrs	r7, r3
 80017ca:	033f      	lsls	r7, r7, #12
 80017cc:	0b3f      	lsrs	r7, r7, #12
 80017ce:	0016      	movs	r6, r2
 80017d0:	4b00      	ldr	r3, [pc, #0]	; (80017d4 <__aeabi_dmul+0x4d8>)
 80017d2:	e5fe      	b.n	80013d2 <__aeabi_dmul+0xd6>
 80017d4:	000007ff 	.word	0x000007ff
 80017d8:	0000041e 	.word	0x0000041e
 80017dc:	0000043e 	.word	0x0000043e

080017e0 <__aeabi_dsub>:
 80017e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e2:	4657      	mov	r7, sl
 80017e4:	464e      	mov	r6, r9
 80017e6:	4645      	mov	r5, r8
 80017e8:	46de      	mov	lr, fp
 80017ea:	000c      	movs	r4, r1
 80017ec:	0309      	lsls	r1, r1, #12
 80017ee:	b5e0      	push	{r5, r6, r7, lr}
 80017f0:	0a49      	lsrs	r1, r1, #9
 80017f2:	0f46      	lsrs	r6, r0, #29
 80017f4:	005f      	lsls	r7, r3, #1
 80017f6:	4331      	orrs	r1, r6
 80017f8:	031e      	lsls	r6, r3, #12
 80017fa:	0fdb      	lsrs	r3, r3, #31
 80017fc:	0a76      	lsrs	r6, r6, #9
 80017fe:	469b      	mov	fp, r3
 8001800:	0f53      	lsrs	r3, r2, #29
 8001802:	4333      	orrs	r3, r6
 8001804:	4ec8      	ldr	r6, [pc, #800]	; (8001b28 <__aeabi_dsub+0x348>)
 8001806:	0065      	lsls	r5, r4, #1
 8001808:	00c0      	lsls	r0, r0, #3
 800180a:	0fe4      	lsrs	r4, r4, #31
 800180c:	00d2      	lsls	r2, r2, #3
 800180e:	0d6d      	lsrs	r5, r5, #21
 8001810:	46a2      	mov	sl, r4
 8001812:	4681      	mov	r9, r0
 8001814:	0d7f      	lsrs	r7, r7, #21
 8001816:	469c      	mov	ip, r3
 8001818:	4690      	mov	r8, r2
 800181a:	42b7      	cmp	r7, r6
 800181c:	d100      	bne.n	8001820 <__aeabi_dsub+0x40>
 800181e:	e0b9      	b.n	8001994 <__aeabi_dsub+0x1b4>
 8001820:	465b      	mov	r3, fp
 8001822:	2601      	movs	r6, #1
 8001824:	4073      	eors	r3, r6
 8001826:	469b      	mov	fp, r3
 8001828:	1bee      	subs	r6, r5, r7
 800182a:	45a3      	cmp	fp, r4
 800182c:	d100      	bne.n	8001830 <__aeabi_dsub+0x50>
 800182e:	e083      	b.n	8001938 <__aeabi_dsub+0x158>
 8001830:	2e00      	cmp	r6, #0
 8001832:	dd63      	ble.n	80018fc <__aeabi_dsub+0x11c>
 8001834:	2f00      	cmp	r7, #0
 8001836:	d000      	beq.n	800183a <__aeabi_dsub+0x5a>
 8001838:	e0b1      	b.n	800199e <__aeabi_dsub+0x1be>
 800183a:	4663      	mov	r3, ip
 800183c:	4313      	orrs	r3, r2
 800183e:	d100      	bne.n	8001842 <__aeabi_dsub+0x62>
 8001840:	e123      	b.n	8001a8a <__aeabi_dsub+0x2aa>
 8001842:	1e73      	subs	r3, r6, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d000      	beq.n	800184a <__aeabi_dsub+0x6a>
 8001848:	e1ba      	b.n	8001bc0 <__aeabi_dsub+0x3e0>
 800184a:	1a86      	subs	r6, r0, r2
 800184c:	4663      	mov	r3, ip
 800184e:	42b0      	cmp	r0, r6
 8001850:	4180      	sbcs	r0, r0
 8001852:	2501      	movs	r5, #1
 8001854:	1ac9      	subs	r1, r1, r3
 8001856:	4240      	negs	r0, r0
 8001858:	1a09      	subs	r1, r1, r0
 800185a:	020b      	lsls	r3, r1, #8
 800185c:	d400      	bmi.n	8001860 <__aeabi_dsub+0x80>
 800185e:	e147      	b.n	8001af0 <__aeabi_dsub+0x310>
 8001860:	0249      	lsls	r1, r1, #9
 8001862:	0a4b      	lsrs	r3, r1, #9
 8001864:	4698      	mov	r8, r3
 8001866:	4643      	mov	r3, r8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d100      	bne.n	800186e <__aeabi_dsub+0x8e>
 800186c:	e189      	b.n	8001b82 <__aeabi_dsub+0x3a2>
 800186e:	4640      	mov	r0, r8
 8001870:	f000 fc0a 	bl	8002088 <__clzsi2>
 8001874:	0003      	movs	r3, r0
 8001876:	3b08      	subs	r3, #8
 8001878:	2b1f      	cmp	r3, #31
 800187a:	dd00      	ble.n	800187e <__aeabi_dsub+0x9e>
 800187c:	e17c      	b.n	8001b78 <__aeabi_dsub+0x398>
 800187e:	2220      	movs	r2, #32
 8001880:	0030      	movs	r0, r6
 8001882:	1ad2      	subs	r2, r2, r3
 8001884:	4641      	mov	r1, r8
 8001886:	40d0      	lsrs	r0, r2
 8001888:	4099      	lsls	r1, r3
 800188a:	0002      	movs	r2, r0
 800188c:	409e      	lsls	r6, r3
 800188e:	430a      	orrs	r2, r1
 8001890:	429d      	cmp	r5, r3
 8001892:	dd00      	ble.n	8001896 <__aeabi_dsub+0xb6>
 8001894:	e16a      	b.n	8001b6c <__aeabi_dsub+0x38c>
 8001896:	1b5d      	subs	r5, r3, r5
 8001898:	1c6b      	adds	r3, r5, #1
 800189a:	2b1f      	cmp	r3, #31
 800189c:	dd00      	ble.n	80018a0 <__aeabi_dsub+0xc0>
 800189e:	e194      	b.n	8001bca <__aeabi_dsub+0x3ea>
 80018a0:	2120      	movs	r1, #32
 80018a2:	0010      	movs	r0, r2
 80018a4:	0035      	movs	r5, r6
 80018a6:	1ac9      	subs	r1, r1, r3
 80018a8:	408e      	lsls	r6, r1
 80018aa:	40da      	lsrs	r2, r3
 80018ac:	4088      	lsls	r0, r1
 80018ae:	40dd      	lsrs	r5, r3
 80018b0:	1e71      	subs	r1, r6, #1
 80018b2:	418e      	sbcs	r6, r1
 80018b4:	0011      	movs	r1, r2
 80018b6:	2207      	movs	r2, #7
 80018b8:	4328      	orrs	r0, r5
 80018ba:	2500      	movs	r5, #0
 80018bc:	4306      	orrs	r6, r0
 80018be:	4032      	ands	r2, r6
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d009      	beq.n	80018d8 <__aeabi_dsub+0xf8>
 80018c4:	230f      	movs	r3, #15
 80018c6:	4033      	ands	r3, r6
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d005      	beq.n	80018d8 <__aeabi_dsub+0xf8>
 80018cc:	1d33      	adds	r3, r6, #4
 80018ce:	42b3      	cmp	r3, r6
 80018d0:	41b6      	sbcs	r6, r6
 80018d2:	4276      	negs	r6, r6
 80018d4:	1989      	adds	r1, r1, r6
 80018d6:	001e      	movs	r6, r3
 80018d8:	020b      	lsls	r3, r1, #8
 80018da:	d400      	bmi.n	80018de <__aeabi_dsub+0xfe>
 80018dc:	e23d      	b.n	8001d5a <__aeabi_dsub+0x57a>
 80018de:	1c6a      	adds	r2, r5, #1
 80018e0:	4b91      	ldr	r3, [pc, #580]	; (8001b28 <__aeabi_dsub+0x348>)
 80018e2:	0555      	lsls	r5, r2, #21
 80018e4:	0d6d      	lsrs	r5, r5, #21
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d100      	bne.n	80018ec <__aeabi_dsub+0x10c>
 80018ea:	e119      	b.n	8001b20 <__aeabi_dsub+0x340>
 80018ec:	4a8f      	ldr	r2, [pc, #572]	; (8001b2c <__aeabi_dsub+0x34c>)
 80018ee:	08f6      	lsrs	r6, r6, #3
 80018f0:	400a      	ands	r2, r1
 80018f2:	0757      	lsls	r7, r2, #29
 80018f4:	0252      	lsls	r2, r2, #9
 80018f6:	4337      	orrs	r7, r6
 80018f8:	0b12      	lsrs	r2, r2, #12
 80018fa:	e09b      	b.n	8001a34 <__aeabi_dsub+0x254>
 80018fc:	2e00      	cmp	r6, #0
 80018fe:	d000      	beq.n	8001902 <__aeabi_dsub+0x122>
 8001900:	e0c5      	b.n	8001a8e <__aeabi_dsub+0x2ae>
 8001902:	1c6e      	adds	r6, r5, #1
 8001904:	0576      	lsls	r6, r6, #21
 8001906:	0d76      	lsrs	r6, r6, #21
 8001908:	2e01      	cmp	r6, #1
 800190a:	dc00      	bgt.n	800190e <__aeabi_dsub+0x12e>
 800190c:	e148      	b.n	8001ba0 <__aeabi_dsub+0x3c0>
 800190e:	4667      	mov	r7, ip
 8001910:	1a86      	subs	r6, r0, r2
 8001912:	1bcb      	subs	r3, r1, r7
 8001914:	42b0      	cmp	r0, r6
 8001916:	41bf      	sbcs	r7, r7
 8001918:	427f      	negs	r7, r7
 800191a:	46b8      	mov	r8, r7
 800191c:	001f      	movs	r7, r3
 800191e:	4643      	mov	r3, r8
 8001920:	1aff      	subs	r7, r7, r3
 8001922:	003b      	movs	r3, r7
 8001924:	46b8      	mov	r8, r7
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	d500      	bpl.n	800192c <__aeabi_dsub+0x14c>
 800192a:	e15f      	b.n	8001bec <__aeabi_dsub+0x40c>
 800192c:	4337      	orrs	r7, r6
 800192e:	d19a      	bne.n	8001866 <__aeabi_dsub+0x86>
 8001930:	2200      	movs	r2, #0
 8001932:	2400      	movs	r4, #0
 8001934:	2500      	movs	r5, #0
 8001936:	e079      	b.n	8001a2c <__aeabi_dsub+0x24c>
 8001938:	2e00      	cmp	r6, #0
 800193a:	dc00      	bgt.n	800193e <__aeabi_dsub+0x15e>
 800193c:	e0fa      	b.n	8001b34 <__aeabi_dsub+0x354>
 800193e:	2f00      	cmp	r7, #0
 8001940:	d100      	bne.n	8001944 <__aeabi_dsub+0x164>
 8001942:	e08d      	b.n	8001a60 <__aeabi_dsub+0x280>
 8001944:	4b78      	ldr	r3, [pc, #480]	; (8001b28 <__aeabi_dsub+0x348>)
 8001946:	429d      	cmp	r5, r3
 8001948:	d067      	beq.n	8001a1a <__aeabi_dsub+0x23a>
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	4667      	mov	r7, ip
 800194e:	041b      	lsls	r3, r3, #16
 8001950:	431f      	orrs	r7, r3
 8001952:	46bc      	mov	ip, r7
 8001954:	2e38      	cmp	r6, #56	; 0x38
 8001956:	dc00      	bgt.n	800195a <__aeabi_dsub+0x17a>
 8001958:	e152      	b.n	8001c00 <__aeabi_dsub+0x420>
 800195a:	4663      	mov	r3, ip
 800195c:	4313      	orrs	r3, r2
 800195e:	1e5a      	subs	r2, r3, #1
 8001960:	4193      	sbcs	r3, r2
 8001962:	181e      	adds	r6, r3, r0
 8001964:	4286      	cmp	r6, r0
 8001966:	4180      	sbcs	r0, r0
 8001968:	4240      	negs	r0, r0
 800196a:	1809      	adds	r1, r1, r0
 800196c:	020b      	lsls	r3, r1, #8
 800196e:	d400      	bmi.n	8001972 <__aeabi_dsub+0x192>
 8001970:	e0be      	b.n	8001af0 <__aeabi_dsub+0x310>
 8001972:	4b6d      	ldr	r3, [pc, #436]	; (8001b28 <__aeabi_dsub+0x348>)
 8001974:	3501      	adds	r5, #1
 8001976:	429d      	cmp	r5, r3
 8001978:	d100      	bne.n	800197c <__aeabi_dsub+0x19c>
 800197a:	e0d2      	b.n	8001b22 <__aeabi_dsub+0x342>
 800197c:	4a6b      	ldr	r2, [pc, #428]	; (8001b2c <__aeabi_dsub+0x34c>)
 800197e:	0873      	lsrs	r3, r6, #1
 8001980:	400a      	ands	r2, r1
 8001982:	2101      	movs	r1, #1
 8001984:	400e      	ands	r6, r1
 8001986:	431e      	orrs	r6, r3
 8001988:	0851      	lsrs	r1, r2, #1
 800198a:	07d3      	lsls	r3, r2, #31
 800198c:	2207      	movs	r2, #7
 800198e:	431e      	orrs	r6, r3
 8001990:	4032      	ands	r2, r6
 8001992:	e795      	b.n	80018c0 <__aeabi_dsub+0xe0>
 8001994:	001e      	movs	r6, r3
 8001996:	4316      	orrs	r6, r2
 8001998:	d000      	beq.n	800199c <__aeabi_dsub+0x1bc>
 800199a:	e745      	b.n	8001828 <__aeabi_dsub+0x48>
 800199c:	e740      	b.n	8001820 <__aeabi_dsub+0x40>
 800199e:	4b62      	ldr	r3, [pc, #392]	; (8001b28 <__aeabi_dsub+0x348>)
 80019a0:	429d      	cmp	r5, r3
 80019a2:	d03a      	beq.n	8001a1a <__aeabi_dsub+0x23a>
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	4667      	mov	r7, ip
 80019a8:	041b      	lsls	r3, r3, #16
 80019aa:	431f      	orrs	r7, r3
 80019ac:	46bc      	mov	ip, r7
 80019ae:	2e38      	cmp	r6, #56	; 0x38
 80019b0:	dd00      	ble.n	80019b4 <__aeabi_dsub+0x1d4>
 80019b2:	e0eb      	b.n	8001b8c <__aeabi_dsub+0x3ac>
 80019b4:	2e1f      	cmp	r6, #31
 80019b6:	dc00      	bgt.n	80019ba <__aeabi_dsub+0x1da>
 80019b8:	e13a      	b.n	8001c30 <__aeabi_dsub+0x450>
 80019ba:	0033      	movs	r3, r6
 80019bc:	4667      	mov	r7, ip
 80019be:	3b20      	subs	r3, #32
 80019c0:	40df      	lsrs	r7, r3
 80019c2:	003b      	movs	r3, r7
 80019c4:	2e20      	cmp	r6, #32
 80019c6:	d005      	beq.n	80019d4 <__aeabi_dsub+0x1f4>
 80019c8:	2740      	movs	r7, #64	; 0x40
 80019ca:	1bbf      	subs	r7, r7, r6
 80019cc:	4666      	mov	r6, ip
 80019ce:	40be      	lsls	r6, r7
 80019d0:	4332      	orrs	r2, r6
 80019d2:	4690      	mov	r8, r2
 80019d4:	4646      	mov	r6, r8
 80019d6:	1e72      	subs	r2, r6, #1
 80019d8:	4196      	sbcs	r6, r2
 80019da:	4333      	orrs	r3, r6
 80019dc:	e0da      	b.n	8001b94 <__aeabi_dsub+0x3b4>
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x204>
 80019e2:	e214      	b.n	8001e0e <__aeabi_dsub+0x62e>
 80019e4:	4663      	mov	r3, ip
 80019e6:	4313      	orrs	r3, r2
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x20c>
 80019ea:	e168      	b.n	8001cbe <__aeabi_dsub+0x4de>
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	074e      	lsls	r6, r1, #29
 80019f0:	08c0      	lsrs	r0, r0, #3
 80019f2:	08c9      	lsrs	r1, r1, #3
 80019f4:	031b      	lsls	r3, r3, #12
 80019f6:	4306      	orrs	r6, r0
 80019f8:	4219      	tst	r1, r3
 80019fa:	d008      	beq.n	8001a0e <__aeabi_dsub+0x22e>
 80019fc:	4660      	mov	r0, ip
 80019fe:	08c0      	lsrs	r0, r0, #3
 8001a00:	4218      	tst	r0, r3
 8001a02:	d104      	bne.n	8001a0e <__aeabi_dsub+0x22e>
 8001a04:	4663      	mov	r3, ip
 8001a06:	0001      	movs	r1, r0
 8001a08:	08d2      	lsrs	r2, r2, #3
 8001a0a:	075e      	lsls	r6, r3, #29
 8001a0c:	4316      	orrs	r6, r2
 8001a0e:	00f3      	lsls	r3, r6, #3
 8001a10:	4699      	mov	r9, r3
 8001a12:	00c9      	lsls	r1, r1, #3
 8001a14:	0f72      	lsrs	r2, r6, #29
 8001a16:	4d44      	ldr	r5, [pc, #272]	; (8001b28 <__aeabi_dsub+0x348>)
 8001a18:	4311      	orrs	r1, r2
 8001a1a:	464b      	mov	r3, r9
 8001a1c:	08de      	lsrs	r6, r3, #3
 8001a1e:	4b42      	ldr	r3, [pc, #264]	; (8001b28 <__aeabi_dsub+0x348>)
 8001a20:	074f      	lsls	r7, r1, #29
 8001a22:	4337      	orrs	r7, r6
 8001a24:	08ca      	lsrs	r2, r1, #3
 8001a26:	429d      	cmp	r5, r3
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dsub+0x24c>
 8001a2a:	e06e      	b.n	8001b0a <__aeabi_dsub+0x32a>
 8001a2c:	0312      	lsls	r2, r2, #12
 8001a2e:	056d      	lsls	r5, r5, #21
 8001a30:	0b12      	lsrs	r2, r2, #12
 8001a32:	0d6d      	lsrs	r5, r5, #21
 8001a34:	2100      	movs	r1, #0
 8001a36:	0312      	lsls	r2, r2, #12
 8001a38:	0b13      	lsrs	r3, r2, #12
 8001a3a:	0d0a      	lsrs	r2, r1, #20
 8001a3c:	0512      	lsls	r2, r2, #20
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <__aeabi_dsub+0x350>)
 8001a42:	052d      	lsls	r5, r5, #20
 8001a44:	4013      	ands	r3, r2
 8001a46:	432b      	orrs	r3, r5
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	07e4      	lsls	r4, r4, #31
 8001a4c:	085b      	lsrs	r3, r3, #1
 8001a4e:	4323      	orrs	r3, r4
 8001a50:	0038      	movs	r0, r7
 8001a52:	0019      	movs	r1, r3
 8001a54:	bc3c      	pop	{r2, r3, r4, r5}
 8001a56:	4690      	mov	r8, r2
 8001a58:	4699      	mov	r9, r3
 8001a5a:	46a2      	mov	sl, r4
 8001a5c:	46ab      	mov	fp, r5
 8001a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a60:	4663      	mov	r3, ip
 8001a62:	4313      	orrs	r3, r2
 8001a64:	d011      	beq.n	8001a8a <__aeabi_dsub+0x2aa>
 8001a66:	1e73      	subs	r3, r6, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d000      	beq.n	8001a6e <__aeabi_dsub+0x28e>
 8001a6c:	e107      	b.n	8001c7e <__aeabi_dsub+0x49e>
 8001a6e:	1886      	adds	r6, r0, r2
 8001a70:	4286      	cmp	r6, r0
 8001a72:	4180      	sbcs	r0, r0
 8001a74:	4461      	add	r1, ip
 8001a76:	4240      	negs	r0, r0
 8001a78:	1809      	adds	r1, r1, r0
 8001a7a:	2501      	movs	r5, #1
 8001a7c:	020b      	lsls	r3, r1, #8
 8001a7e:	d537      	bpl.n	8001af0 <__aeabi_dsub+0x310>
 8001a80:	2502      	movs	r5, #2
 8001a82:	e77b      	b.n	800197c <__aeabi_dsub+0x19c>
 8001a84:	003e      	movs	r6, r7
 8001a86:	4661      	mov	r1, ip
 8001a88:	4691      	mov	r9, r2
 8001a8a:	0035      	movs	r5, r6
 8001a8c:	e7c5      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001a8e:	465c      	mov	r4, fp
 8001a90:	2d00      	cmp	r5, #0
 8001a92:	d000      	beq.n	8001a96 <__aeabi_dsub+0x2b6>
 8001a94:	e0e1      	b.n	8001c5a <__aeabi_dsub+0x47a>
 8001a96:	000b      	movs	r3, r1
 8001a98:	4303      	orrs	r3, r0
 8001a9a:	d0f3      	beq.n	8001a84 <__aeabi_dsub+0x2a4>
 8001a9c:	1c73      	adds	r3, r6, #1
 8001a9e:	d100      	bne.n	8001aa2 <__aeabi_dsub+0x2c2>
 8001aa0:	e1ac      	b.n	8001dfc <__aeabi_dsub+0x61c>
 8001aa2:	4b21      	ldr	r3, [pc, #132]	; (8001b28 <__aeabi_dsub+0x348>)
 8001aa4:	429f      	cmp	r7, r3
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dsub+0x2ca>
 8001aa8:	e13a      	b.n	8001d20 <__aeabi_dsub+0x540>
 8001aaa:	43f3      	mvns	r3, r6
 8001aac:	2b38      	cmp	r3, #56	; 0x38
 8001aae:	dd00      	ble.n	8001ab2 <__aeabi_dsub+0x2d2>
 8001ab0:	e16f      	b.n	8001d92 <__aeabi_dsub+0x5b2>
 8001ab2:	2b1f      	cmp	r3, #31
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dsub+0x2d8>
 8001ab6:	e18c      	b.n	8001dd2 <__aeabi_dsub+0x5f2>
 8001ab8:	2520      	movs	r5, #32
 8001aba:	000e      	movs	r6, r1
 8001abc:	1aed      	subs	r5, r5, r3
 8001abe:	40ae      	lsls	r6, r5
 8001ac0:	46b0      	mov	r8, r6
 8001ac2:	0006      	movs	r6, r0
 8001ac4:	46aa      	mov	sl, r5
 8001ac6:	40de      	lsrs	r6, r3
 8001ac8:	4645      	mov	r5, r8
 8001aca:	4335      	orrs	r5, r6
 8001acc:	002e      	movs	r6, r5
 8001ace:	4655      	mov	r5, sl
 8001ad0:	40d9      	lsrs	r1, r3
 8001ad2:	40a8      	lsls	r0, r5
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	1e45      	subs	r5, r0, #1
 8001ad8:	41a8      	sbcs	r0, r5
 8001ada:	1a5b      	subs	r3, r3, r1
 8001adc:	469c      	mov	ip, r3
 8001ade:	4330      	orrs	r0, r6
 8001ae0:	1a16      	subs	r6, r2, r0
 8001ae2:	42b2      	cmp	r2, r6
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4663      	mov	r3, ip
 8001ae8:	4252      	negs	r2, r2
 8001aea:	1a99      	subs	r1, r3, r2
 8001aec:	003d      	movs	r5, r7
 8001aee:	e6b4      	b.n	800185a <__aeabi_dsub+0x7a>
 8001af0:	2207      	movs	r2, #7
 8001af2:	4032      	ands	r2, r6
 8001af4:	2a00      	cmp	r2, #0
 8001af6:	d000      	beq.n	8001afa <__aeabi_dsub+0x31a>
 8001af8:	e6e4      	b.n	80018c4 <__aeabi_dsub+0xe4>
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <__aeabi_dsub+0x348>)
 8001afc:	08f6      	lsrs	r6, r6, #3
 8001afe:	074f      	lsls	r7, r1, #29
 8001b00:	4337      	orrs	r7, r6
 8001b02:	08ca      	lsrs	r2, r1, #3
 8001b04:	429d      	cmp	r5, r3
 8001b06:	d000      	beq.n	8001b0a <__aeabi_dsub+0x32a>
 8001b08:	e790      	b.n	8001a2c <__aeabi_dsub+0x24c>
 8001b0a:	003b      	movs	r3, r7
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x332>
 8001b10:	e1a6      	b.n	8001e60 <__aeabi_dsub+0x680>
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	031b      	lsls	r3, r3, #12
 8001b16:	431a      	orrs	r2, r3
 8001b18:	0312      	lsls	r2, r2, #12
 8001b1a:	0b12      	lsrs	r2, r2, #12
 8001b1c:	4d02      	ldr	r5, [pc, #8]	; (8001b28 <__aeabi_dsub+0x348>)
 8001b1e:	e789      	b.n	8001a34 <__aeabi_dsub+0x254>
 8001b20:	0015      	movs	r5, r2
 8001b22:	2200      	movs	r2, #0
 8001b24:	2700      	movs	r7, #0
 8001b26:	e785      	b.n	8001a34 <__aeabi_dsub+0x254>
 8001b28:	000007ff 	.word	0x000007ff
 8001b2c:	ff7fffff 	.word	0xff7fffff
 8001b30:	800fffff 	.word	0x800fffff
 8001b34:	2e00      	cmp	r6, #0
 8001b36:	d000      	beq.n	8001b3a <__aeabi_dsub+0x35a>
 8001b38:	e0c7      	b.n	8001cca <__aeabi_dsub+0x4ea>
 8001b3a:	1c6b      	adds	r3, r5, #1
 8001b3c:	055e      	lsls	r6, r3, #21
 8001b3e:	0d76      	lsrs	r6, r6, #21
 8001b40:	2e01      	cmp	r6, #1
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dsub+0x366>
 8001b44:	e0f0      	b.n	8001d28 <__aeabi_dsub+0x548>
 8001b46:	4dc8      	ldr	r5, [pc, #800]	; (8001e68 <__aeabi_dsub+0x688>)
 8001b48:	42ab      	cmp	r3, r5
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dsub+0x36e>
 8001b4c:	e0b9      	b.n	8001cc2 <__aeabi_dsub+0x4e2>
 8001b4e:	1885      	adds	r5, r0, r2
 8001b50:	000a      	movs	r2, r1
 8001b52:	4285      	cmp	r5, r0
 8001b54:	4189      	sbcs	r1, r1
 8001b56:	4462      	add	r2, ip
 8001b58:	4249      	negs	r1, r1
 8001b5a:	1851      	adds	r1, r2, r1
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	07ce      	lsls	r6, r1, #31
 8001b60:	086d      	lsrs	r5, r5, #1
 8001b62:	432e      	orrs	r6, r5
 8001b64:	0849      	lsrs	r1, r1, #1
 8001b66:	4032      	ands	r2, r6
 8001b68:	001d      	movs	r5, r3
 8001b6a:	e6a9      	b.n	80018c0 <__aeabi_dsub+0xe0>
 8001b6c:	49bf      	ldr	r1, [pc, #764]	; (8001e6c <__aeabi_dsub+0x68c>)
 8001b6e:	1aed      	subs	r5, r5, r3
 8001b70:	4011      	ands	r1, r2
 8001b72:	2207      	movs	r2, #7
 8001b74:	4032      	ands	r2, r6
 8001b76:	e6a3      	b.n	80018c0 <__aeabi_dsub+0xe0>
 8001b78:	0032      	movs	r2, r6
 8001b7a:	3828      	subs	r0, #40	; 0x28
 8001b7c:	4082      	lsls	r2, r0
 8001b7e:	2600      	movs	r6, #0
 8001b80:	e686      	b.n	8001890 <__aeabi_dsub+0xb0>
 8001b82:	0030      	movs	r0, r6
 8001b84:	f000 fa80 	bl	8002088 <__clzsi2>
 8001b88:	3020      	adds	r0, #32
 8001b8a:	e673      	b.n	8001874 <__aeabi_dsub+0x94>
 8001b8c:	4663      	mov	r3, ip
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	1e5a      	subs	r2, r3, #1
 8001b92:	4193      	sbcs	r3, r2
 8001b94:	1ac6      	subs	r6, r0, r3
 8001b96:	42b0      	cmp	r0, r6
 8001b98:	4180      	sbcs	r0, r0
 8001b9a:	4240      	negs	r0, r0
 8001b9c:	1a09      	subs	r1, r1, r0
 8001b9e:	e65c      	b.n	800185a <__aeabi_dsub+0x7a>
 8001ba0:	000e      	movs	r6, r1
 8001ba2:	4667      	mov	r7, ip
 8001ba4:	4306      	orrs	r6, r0
 8001ba6:	4317      	orrs	r7, r2
 8001ba8:	2d00      	cmp	r5, #0
 8001baa:	d15e      	bne.n	8001c6a <__aeabi_dsub+0x48a>
 8001bac:	2e00      	cmp	r6, #0
 8001bae:	d000      	beq.n	8001bb2 <__aeabi_dsub+0x3d2>
 8001bb0:	e0f3      	b.n	8001d9a <__aeabi_dsub+0x5ba>
 8001bb2:	2f00      	cmp	r7, #0
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0x3d8>
 8001bb6:	e11e      	b.n	8001df6 <__aeabi_dsub+0x616>
 8001bb8:	465c      	mov	r4, fp
 8001bba:	4661      	mov	r1, ip
 8001bbc:	4691      	mov	r9, r2
 8001bbe:	e72c      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001bc0:	4fa9      	ldr	r7, [pc, #676]	; (8001e68 <__aeabi_dsub+0x688>)
 8001bc2:	42be      	cmp	r6, r7
 8001bc4:	d07b      	beq.n	8001cbe <__aeabi_dsub+0x4de>
 8001bc6:	001e      	movs	r6, r3
 8001bc8:	e6f1      	b.n	80019ae <__aeabi_dsub+0x1ce>
 8001bca:	0010      	movs	r0, r2
 8001bcc:	3d1f      	subs	r5, #31
 8001bce:	40e8      	lsrs	r0, r5
 8001bd0:	2b20      	cmp	r3, #32
 8001bd2:	d003      	beq.n	8001bdc <__aeabi_dsub+0x3fc>
 8001bd4:	2140      	movs	r1, #64	; 0x40
 8001bd6:	1acb      	subs	r3, r1, r3
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	4316      	orrs	r6, r2
 8001bdc:	1e73      	subs	r3, r6, #1
 8001bde:	419e      	sbcs	r6, r3
 8001be0:	2207      	movs	r2, #7
 8001be2:	4306      	orrs	r6, r0
 8001be4:	4032      	ands	r2, r6
 8001be6:	2100      	movs	r1, #0
 8001be8:	2500      	movs	r5, #0
 8001bea:	e783      	b.n	8001af4 <__aeabi_dsub+0x314>
 8001bec:	1a16      	subs	r6, r2, r0
 8001bee:	4663      	mov	r3, ip
 8001bf0:	42b2      	cmp	r2, r6
 8001bf2:	4180      	sbcs	r0, r0
 8001bf4:	1a59      	subs	r1, r3, r1
 8001bf6:	4240      	negs	r0, r0
 8001bf8:	1a0b      	subs	r3, r1, r0
 8001bfa:	4698      	mov	r8, r3
 8001bfc:	465c      	mov	r4, fp
 8001bfe:	e632      	b.n	8001866 <__aeabi_dsub+0x86>
 8001c00:	2e1f      	cmp	r6, #31
 8001c02:	dd00      	ble.n	8001c06 <__aeabi_dsub+0x426>
 8001c04:	e0ab      	b.n	8001d5e <__aeabi_dsub+0x57e>
 8001c06:	2720      	movs	r7, #32
 8001c08:	1bbb      	subs	r3, r7, r6
 8001c0a:	469a      	mov	sl, r3
 8001c0c:	4663      	mov	r3, ip
 8001c0e:	4657      	mov	r7, sl
 8001c10:	40bb      	lsls	r3, r7
 8001c12:	4699      	mov	r9, r3
 8001c14:	0013      	movs	r3, r2
 8001c16:	464f      	mov	r7, r9
 8001c18:	40f3      	lsrs	r3, r6
 8001c1a:	431f      	orrs	r7, r3
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	4657      	mov	r7, sl
 8001c20:	40ba      	lsls	r2, r7
 8001c22:	1e57      	subs	r7, r2, #1
 8001c24:	41ba      	sbcs	r2, r7
 8001c26:	4313      	orrs	r3, r2
 8001c28:	4662      	mov	r2, ip
 8001c2a:	40f2      	lsrs	r2, r6
 8001c2c:	1889      	adds	r1, r1, r2
 8001c2e:	e698      	b.n	8001962 <__aeabi_dsub+0x182>
 8001c30:	2720      	movs	r7, #32
 8001c32:	1bbb      	subs	r3, r7, r6
 8001c34:	469a      	mov	sl, r3
 8001c36:	4663      	mov	r3, ip
 8001c38:	4657      	mov	r7, sl
 8001c3a:	40bb      	lsls	r3, r7
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	0013      	movs	r3, r2
 8001c40:	464f      	mov	r7, r9
 8001c42:	40f3      	lsrs	r3, r6
 8001c44:	431f      	orrs	r7, r3
 8001c46:	003b      	movs	r3, r7
 8001c48:	4657      	mov	r7, sl
 8001c4a:	40ba      	lsls	r2, r7
 8001c4c:	1e57      	subs	r7, r2, #1
 8001c4e:	41ba      	sbcs	r2, r7
 8001c50:	4313      	orrs	r3, r2
 8001c52:	4662      	mov	r2, ip
 8001c54:	40f2      	lsrs	r2, r6
 8001c56:	1a89      	subs	r1, r1, r2
 8001c58:	e79c      	b.n	8001b94 <__aeabi_dsub+0x3b4>
 8001c5a:	4b83      	ldr	r3, [pc, #524]	; (8001e68 <__aeabi_dsub+0x688>)
 8001c5c:	429f      	cmp	r7, r3
 8001c5e:	d05f      	beq.n	8001d20 <__aeabi_dsub+0x540>
 8001c60:	2580      	movs	r5, #128	; 0x80
 8001c62:	042d      	lsls	r5, r5, #16
 8001c64:	4273      	negs	r3, r6
 8001c66:	4329      	orrs	r1, r5
 8001c68:	e720      	b.n	8001aac <__aeabi_dsub+0x2cc>
 8001c6a:	2e00      	cmp	r6, #0
 8001c6c:	d10c      	bne.n	8001c88 <__aeabi_dsub+0x4a8>
 8001c6e:	2f00      	cmp	r7, #0
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x494>
 8001c72:	e0d0      	b.n	8001e16 <__aeabi_dsub+0x636>
 8001c74:	465c      	mov	r4, fp
 8001c76:	4661      	mov	r1, ip
 8001c78:	4691      	mov	r9, r2
 8001c7a:	4d7b      	ldr	r5, [pc, #492]	; (8001e68 <__aeabi_dsub+0x688>)
 8001c7c:	e6cd      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001c7e:	4f7a      	ldr	r7, [pc, #488]	; (8001e68 <__aeabi_dsub+0x688>)
 8001c80:	42be      	cmp	r6, r7
 8001c82:	d01c      	beq.n	8001cbe <__aeabi_dsub+0x4de>
 8001c84:	001e      	movs	r6, r3
 8001c86:	e665      	b.n	8001954 <__aeabi_dsub+0x174>
 8001c88:	2f00      	cmp	r7, #0
 8001c8a:	d018      	beq.n	8001cbe <__aeabi_dsub+0x4de>
 8001c8c:	08c0      	lsrs	r0, r0, #3
 8001c8e:	074e      	lsls	r6, r1, #29
 8001c90:	4306      	orrs	r6, r0
 8001c92:	2080      	movs	r0, #128	; 0x80
 8001c94:	08c9      	lsrs	r1, r1, #3
 8001c96:	0300      	lsls	r0, r0, #12
 8001c98:	4201      	tst	r1, r0
 8001c9a:	d008      	beq.n	8001cae <__aeabi_dsub+0x4ce>
 8001c9c:	4663      	mov	r3, ip
 8001c9e:	08dc      	lsrs	r4, r3, #3
 8001ca0:	4204      	tst	r4, r0
 8001ca2:	d104      	bne.n	8001cae <__aeabi_dsub+0x4ce>
 8001ca4:	0021      	movs	r1, r4
 8001ca6:	46da      	mov	sl, fp
 8001ca8:	08d2      	lsrs	r2, r2, #3
 8001caa:	075e      	lsls	r6, r3, #29
 8001cac:	4316      	orrs	r6, r2
 8001cae:	00f3      	lsls	r3, r6, #3
 8001cb0:	4699      	mov	r9, r3
 8001cb2:	2401      	movs	r4, #1
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	00c9      	lsls	r1, r1, #3
 8001cb8:	0f72      	lsrs	r2, r6, #29
 8001cba:	4311      	orrs	r1, r2
 8001cbc:	401c      	ands	r4, r3
 8001cbe:	4d6a      	ldr	r5, [pc, #424]	; (8001e68 <__aeabi_dsub+0x688>)
 8001cc0:	e6ab      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001cc2:	001d      	movs	r5, r3
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2700      	movs	r7, #0
 8001cc8:	e6b4      	b.n	8001a34 <__aeabi_dsub+0x254>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d159      	bne.n	8001d82 <__aeabi_dsub+0x5a2>
 8001cce:	000b      	movs	r3, r1
 8001cd0:	4303      	orrs	r3, r0
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_dsub+0x4f6>
 8001cd4:	e6d6      	b.n	8001a84 <__aeabi_dsub+0x2a4>
 8001cd6:	1c73      	adds	r3, r6, #1
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_dsub+0x4fc>
 8001cda:	e0b2      	b.n	8001e42 <__aeabi_dsub+0x662>
 8001cdc:	4b62      	ldr	r3, [pc, #392]	; (8001e68 <__aeabi_dsub+0x688>)
 8001cde:	429f      	cmp	r7, r3
 8001ce0:	d01e      	beq.n	8001d20 <__aeabi_dsub+0x540>
 8001ce2:	43f3      	mvns	r3, r6
 8001ce4:	2b38      	cmp	r3, #56	; 0x38
 8001ce6:	dc6f      	bgt.n	8001dc8 <__aeabi_dsub+0x5e8>
 8001ce8:	2b1f      	cmp	r3, #31
 8001cea:	dd00      	ble.n	8001cee <__aeabi_dsub+0x50e>
 8001cec:	e097      	b.n	8001e1e <__aeabi_dsub+0x63e>
 8001cee:	2520      	movs	r5, #32
 8001cf0:	000e      	movs	r6, r1
 8001cf2:	1aed      	subs	r5, r5, r3
 8001cf4:	40ae      	lsls	r6, r5
 8001cf6:	46b0      	mov	r8, r6
 8001cf8:	0006      	movs	r6, r0
 8001cfa:	46aa      	mov	sl, r5
 8001cfc:	40de      	lsrs	r6, r3
 8001cfe:	4645      	mov	r5, r8
 8001d00:	4335      	orrs	r5, r6
 8001d02:	002e      	movs	r6, r5
 8001d04:	4655      	mov	r5, sl
 8001d06:	40a8      	lsls	r0, r5
 8001d08:	40d9      	lsrs	r1, r3
 8001d0a:	1e45      	subs	r5, r0, #1
 8001d0c:	41a8      	sbcs	r0, r5
 8001d0e:	448c      	add	ip, r1
 8001d10:	4306      	orrs	r6, r0
 8001d12:	18b6      	adds	r6, r6, r2
 8001d14:	4296      	cmp	r6, r2
 8001d16:	4192      	sbcs	r2, r2
 8001d18:	4251      	negs	r1, r2
 8001d1a:	4461      	add	r1, ip
 8001d1c:	003d      	movs	r5, r7
 8001d1e:	e625      	b.n	800196c <__aeabi_dsub+0x18c>
 8001d20:	003d      	movs	r5, r7
 8001d22:	4661      	mov	r1, ip
 8001d24:	4691      	mov	r9, r2
 8001d26:	e678      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001d28:	000b      	movs	r3, r1
 8001d2a:	4303      	orrs	r3, r0
 8001d2c:	2d00      	cmp	r5, #0
 8001d2e:	d000      	beq.n	8001d32 <__aeabi_dsub+0x552>
 8001d30:	e655      	b.n	80019de <__aeabi_dsub+0x1fe>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f5      	beq.n	8001d22 <__aeabi_dsub+0x542>
 8001d36:	4663      	mov	r3, ip
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	d100      	bne.n	8001d3e <__aeabi_dsub+0x55e>
 8001d3c:	e66d      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001d3e:	1886      	adds	r6, r0, r2
 8001d40:	4286      	cmp	r6, r0
 8001d42:	4180      	sbcs	r0, r0
 8001d44:	4461      	add	r1, ip
 8001d46:	4240      	negs	r0, r0
 8001d48:	1809      	adds	r1, r1, r0
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	020b      	lsls	r3, r1, #8
 8001d4e:	d400      	bmi.n	8001d52 <__aeabi_dsub+0x572>
 8001d50:	e6d0      	b.n	8001af4 <__aeabi_dsub+0x314>
 8001d52:	4b46      	ldr	r3, [pc, #280]	; (8001e6c <__aeabi_dsub+0x68c>)
 8001d54:	3501      	adds	r5, #1
 8001d56:	4019      	ands	r1, r3
 8001d58:	e5b2      	b.n	80018c0 <__aeabi_dsub+0xe0>
 8001d5a:	46b1      	mov	r9, r6
 8001d5c:	e65d      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001d5e:	0033      	movs	r3, r6
 8001d60:	4667      	mov	r7, ip
 8001d62:	3b20      	subs	r3, #32
 8001d64:	40df      	lsrs	r7, r3
 8001d66:	003b      	movs	r3, r7
 8001d68:	2e20      	cmp	r6, #32
 8001d6a:	d005      	beq.n	8001d78 <__aeabi_dsub+0x598>
 8001d6c:	2740      	movs	r7, #64	; 0x40
 8001d6e:	1bbf      	subs	r7, r7, r6
 8001d70:	4666      	mov	r6, ip
 8001d72:	40be      	lsls	r6, r7
 8001d74:	4332      	orrs	r2, r6
 8001d76:	4690      	mov	r8, r2
 8001d78:	4646      	mov	r6, r8
 8001d7a:	1e72      	subs	r2, r6, #1
 8001d7c:	4196      	sbcs	r6, r2
 8001d7e:	4333      	orrs	r3, r6
 8001d80:	e5ef      	b.n	8001962 <__aeabi_dsub+0x182>
 8001d82:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <__aeabi_dsub+0x688>)
 8001d84:	429f      	cmp	r7, r3
 8001d86:	d0cb      	beq.n	8001d20 <__aeabi_dsub+0x540>
 8001d88:	2580      	movs	r5, #128	; 0x80
 8001d8a:	042d      	lsls	r5, r5, #16
 8001d8c:	4273      	negs	r3, r6
 8001d8e:	4329      	orrs	r1, r5
 8001d90:	e7a8      	b.n	8001ce4 <__aeabi_dsub+0x504>
 8001d92:	4308      	orrs	r0, r1
 8001d94:	1e41      	subs	r1, r0, #1
 8001d96:	4188      	sbcs	r0, r1
 8001d98:	e6a2      	b.n	8001ae0 <__aeabi_dsub+0x300>
 8001d9a:	2f00      	cmp	r7, #0
 8001d9c:	d100      	bne.n	8001da0 <__aeabi_dsub+0x5c0>
 8001d9e:	e63c      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001da0:	4663      	mov	r3, ip
 8001da2:	1a86      	subs	r6, r0, r2
 8001da4:	1acf      	subs	r7, r1, r3
 8001da6:	42b0      	cmp	r0, r6
 8001da8:	419b      	sbcs	r3, r3
 8001daa:	425b      	negs	r3, r3
 8001dac:	1afb      	subs	r3, r7, r3
 8001dae:	4698      	mov	r8, r3
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	d54e      	bpl.n	8001e52 <__aeabi_dsub+0x672>
 8001db4:	1a16      	subs	r6, r2, r0
 8001db6:	4663      	mov	r3, ip
 8001db8:	42b2      	cmp	r2, r6
 8001dba:	4192      	sbcs	r2, r2
 8001dbc:	1a59      	subs	r1, r3, r1
 8001dbe:	4252      	negs	r2, r2
 8001dc0:	1a89      	subs	r1, r1, r2
 8001dc2:	465c      	mov	r4, fp
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	e57b      	b.n	80018c0 <__aeabi_dsub+0xe0>
 8001dc8:	4301      	orrs	r1, r0
 8001dca:	000e      	movs	r6, r1
 8001dcc:	1e71      	subs	r1, r6, #1
 8001dce:	418e      	sbcs	r6, r1
 8001dd0:	e79f      	b.n	8001d12 <__aeabi_dsub+0x532>
 8001dd2:	001d      	movs	r5, r3
 8001dd4:	000e      	movs	r6, r1
 8001dd6:	3d20      	subs	r5, #32
 8001dd8:	40ee      	lsrs	r6, r5
 8001dda:	46b0      	mov	r8, r6
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d004      	beq.n	8001dea <__aeabi_dsub+0x60a>
 8001de0:	2540      	movs	r5, #64	; 0x40
 8001de2:	1aeb      	subs	r3, r5, r3
 8001de4:	4099      	lsls	r1, r3
 8001de6:	4308      	orrs	r0, r1
 8001de8:	4681      	mov	r9, r0
 8001dea:	4648      	mov	r0, r9
 8001dec:	4643      	mov	r3, r8
 8001dee:	1e41      	subs	r1, r0, #1
 8001df0:	4188      	sbcs	r0, r1
 8001df2:	4318      	orrs	r0, r3
 8001df4:	e674      	b.n	8001ae0 <__aeabi_dsub+0x300>
 8001df6:	2200      	movs	r2, #0
 8001df8:	2400      	movs	r4, #0
 8001dfa:	e617      	b.n	8001a2c <__aeabi_dsub+0x24c>
 8001dfc:	1a16      	subs	r6, r2, r0
 8001dfe:	4663      	mov	r3, ip
 8001e00:	42b2      	cmp	r2, r6
 8001e02:	4192      	sbcs	r2, r2
 8001e04:	1a59      	subs	r1, r3, r1
 8001e06:	4252      	negs	r2, r2
 8001e08:	1a89      	subs	r1, r1, r2
 8001e0a:	003d      	movs	r5, r7
 8001e0c:	e525      	b.n	800185a <__aeabi_dsub+0x7a>
 8001e0e:	4661      	mov	r1, ip
 8001e10:	4691      	mov	r9, r2
 8001e12:	4d15      	ldr	r5, [pc, #84]	; (8001e68 <__aeabi_dsub+0x688>)
 8001e14:	e601      	b.n	8001a1a <__aeabi_dsub+0x23a>
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	2400      	movs	r4, #0
 8001e1a:	0312      	lsls	r2, r2, #12
 8001e1c:	e679      	b.n	8001b12 <__aeabi_dsub+0x332>
 8001e1e:	001d      	movs	r5, r3
 8001e20:	000e      	movs	r6, r1
 8001e22:	3d20      	subs	r5, #32
 8001e24:	40ee      	lsrs	r6, r5
 8001e26:	46b0      	mov	r8, r6
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	d004      	beq.n	8001e36 <__aeabi_dsub+0x656>
 8001e2c:	2540      	movs	r5, #64	; 0x40
 8001e2e:	1aeb      	subs	r3, r5, r3
 8001e30:	4099      	lsls	r1, r3
 8001e32:	4308      	orrs	r0, r1
 8001e34:	4681      	mov	r9, r0
 8001e36:	464e      	mov	r6, r9
 8001e38:	4643      	mov	r3, r8
 8001e3a:	1e71      	subs	r1, r6, #1
 8001e3c:	418e      	sbcs	r6, r1
 8001e3e:	431e      	orrs	r6, r3
 8001e40:	e767      	b.n	8001d12 <__aeabi_dsub+0x532>
 8001e42:	1886      	adds	r6, r0, r2
 8001e44:	4296      	cmp	r6, r2
 8001e46:	419b      	sbcs	r3, r3
 8001e48:	4461      	add	r1, ip
 8001e4a:	425b      	negs	r3, r3
 8001e4c:	18c9      	adds	r1, r1, r3
 8001e4e:	003d      	movs	r5, r7
 8001e50:	e58c      	b.n	800196c <__aeabi_dsub+0x18c>
 8001e52:	4647      	mov	r7, r8
 8001e54:	4337      	orrs	r7, r6
 8001e56:	d0ce      	beq.n	8001df6 <__aeabi_dsub+0x616>
 8001e58:	2207      	movs	r2, #7
 8001e5a:	4641      	mov	r1, r8
 8001e5c:	4032      	ands	r2, r6
 8001e5e:	e649      	b.n	8001af4 <__aeabi_dsub+0x314>
 8001e60:	2700      	movs	r7, #0
 8001e62:	003a      	movs	r2, r7
 8001e64:	e5e6      	b.n	8001a34 <__aeabi_dsub+0x254>
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	000007ff 	.word	0x000007ff
 8001e6c:	ff7fffff 	.word	0xff7fffff

08001e70 <__aeabi_d2iz>:
 8001e70:	b530      	push	{r4, r5, lr}
 8001e72:	4d14      	ldr	r5, [pc, #80]	; (8001ec4 <__aeabi_d2iz+0x54>)
 8001e74:	030a      	lsls	r2, r1, #12
 8001e76:	004b      	lsls	r3, r1, #1
 8001e78:	0b12      	lsrs	r2, r2, #12
 8001e7a:	0d5b      	lsrs	r3, r3, #21
 8001e7c:	0fc9      	lsrs	r1, r1, #31
 8001e7e:	2400      	movs	r4, #0
 8001e80:	42ab      	cmp	r3, r5
 8001e82:	dd11      	ble.n	8001ea8 <__aeabi_d2iz+0x38>
 8001e84:	4c10      	ldr	r4, [pc, #64]	; (8001ec8 <__aeabi_d2iz+0x58>)
 8001e86:	42a3      	cmp	r3, r4
 8001e88:	dc10      	bgt.n	8001eac <__aeabi_d2iz+0x3c>
 8001e8a:	2480      	movs	r4, #128	; 0x80
 8001e8c:	0364      	lsls	r4, r4, #13
 8001e8e:	4322      	orrs	r2, r4
 8001e90:	4c0e      	ldr	r4, [pc, #56]	; (8001ecc <__aeabi_d2iz+0x5c>)
 8001e92:	1ae4      	subs	r4, r4, r3
 8001e94:	2c1f      	cmp	r4, #31
 8001e96:	dd0c      	ble.n	8001eb2 <__aeabi_d2iz+0x42>
 8001e98:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <__aeabi_d2iz+0x60>)
 8001e9a:	1ac3      	subs	r3, r0, r3
 8001e9c:	40da      	lsrs	r2, r3
 8001e9e:	0013      	movs	r3, r2
 8001ea0:	425c      	negs	r4, r3
 8001ea2:	2900      	cmp	r1, #0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_d2iz+0x38>
 8001ea6:	001c      	movs	r4, r3
 8001ea8:	0020      	movs	r0, r4
 8001eaa:	bd30      	pop	{r4, r5, pc}
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <__aeabi_d2iz+0x64>)
 8001eae:	18cc      	adds	r4, r1, r3
 8001eb0:	e7fa      	b.n	8001ea8 <__aeabi_d2iz+0x38>
 8001eb2:	4d09      	ldr	r5, [pc, #36]	; (8001ed8 <__aeabi_d2iz+0x68>)
 8001eb4:	40e0      	lsrs	r0, r4
 8001eb6:	46ac      	mov	ip, r5
 8001eb8:	4463      	add	r3, ip
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	0013      	movs	r3, r2
 8001ebe:	4303      	orrs	r3, r0
 8001ec0:	e7ee      	b.n	8001ea0 <__aeabi_d2iz+0x30>
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	000003fe 	.word	0x000003fe
 8001ec8:	0000041d 	.word	0x0000041d
 8001ecc:	00000433 	.word	0x00000433
 8001ed0:	00000413 	.word	0x00000413
 8001ed4:	7fffffff 	.word	0x7fffffff
 8001ed8:	fffffbed 	.word	0xfffffbed

08001edc <__aeabi_f2d>:
 8001edc:	0041      	lsls	r1, r0, #1
 8001ede:	0e09      	lsrs	r1, r1, #24
 8001ee0:	1c4b      	adds	r3, r1, #1
 8001ee2:	b570      	push	{r4, r5, r6, lr}
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	0246      	lsls	r6, r0, #9
 8001ee8:	0a75      	lsrs	r5, r6, #9
 8001eea:	0fc4      	lsrs	r4, r0, #31
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	dd14      	ble.n	8001f1a <__aeabi_f2d+0x3e>
 8001ef0:	23e0      	movs	r3, #224	; 0xe0
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	076d      	lsls	r5, r5, #29
 8001ef6:	0b36      	lsrs	r6, r6, #12
 8001ef8:	18cb      	adds	r3, r1, r3
 8001efa:	2100      	movs	r1, #0
 8001efc:	0d0a      	lsrs	r2, r1, #20
 8001efe:	0028      	movs	r0, r5
 8001f00:	0512      	lsls	r2, r2, #20
 8001f02:	4d1c      	ldr	r5, [pc, #112]	; (8001f74 <__aeabi_f2d+0x98>)
 8001f04:	4332      	orrs	r2, r6
 8001f06:	055b      	lsls	r3, r3, #21
 8001f08:	402a      	ands	r2, r5
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	07e4      	lsls	r4, r4, #31
 8001f12:	085b      	lsrs	r3, r3, #1
 8001f14:	4323      	orrs	r3, r4
 8001f16:	0019      	movs	r1, r3
 8001f18:	bd70      	pop	{r4, r5, r6, pc}
 8001f1a:	2900      	cmp	r1, #0
 8001f1c:	d114      	bne.n	8001f48 <__aeabi_f2d+0x6c>
 8001f1e:	2d00      	cmp	r5, #0
 8001f20:	d01e      	beq.n	8001f60 <__aeabi_f2d+0x84>
 8001f22:	0028      	movs	r0, r5
 8001f24:	f000 f8b0 	bl	8002088 <__clzsi2>
 8001f28:	280a      	cmp	r0, #10
 8001f2a:	dc1c      	bgt.n	8001f66 <__aeabi_f2d+0x8a>
 8001f2c:	230b      	movs	r3, #11
 8001f2e:	002a      	movs	r2, r5
 8001f30:	1a1b      	subs	r3, r3, r0
 8001f32:	40da      	lsrs	r2, r3
 8001f34:	0003      	movs	r3, r0
 8001f36:	3315      	adds	r3, #21
 8001f38:	409d      	lsls	r5, r3
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <__aeabi_f2d+0x9c>)
 8001f3c:	0312      	lsls	r2, r2, #12
 8001f3e:	1a1b      	subs	r3, r3, r0
 8001f40:	055b      	lsls	r3, r3, #21
 8001f42:	0b16      	lsrs	r6, r2, #12
 8001f44:	0d5b      	lsrs	r3, r3, #21
 8001f46:	e7d8      	b.n	8001efa <__aeabi_f2d+0x1e>
 8001f48:	2d00      	cmp	r5, #0
 8001f4a:	d006      	beq.n	8001f5a <__aeabi_f2d+0x7e>
 8001f4c:	0b32      	lsrs	r2, r6, #12
 8001f4e:	2680      	movs	r6, #128	; 0x80
 8001f50:	0336      	lsls	r6, r6, #12
 8001f52:	076d      	lsls	r5, r5, #29
 8001f54:	4316      	orrs	r6, r2
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <__aeabi_f2d+0xa0>)
 8001f58:	e7cf      	b.n	8001efa <__aeabi_f2d+0x1e>
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <__aeabi_f2d+0xa0>)
 8001f5c:	2600      	movs	r6, #0
 8001f5e:	e7cc      	b.n	8001efa <__aeabi_f2d+0x1e>
 8001f60:	2300      	movs	r3, #0
 8001f62:	2600      	movs	r6, #0
 8001f64:	e7c9      	b.n	8001efa <__aeabi_f2d+0x1e>
 8001f66:	0003      	movs	r3, r0
 8001f68:	002a      	movs	r2, r5
 8001f6a:	3b0b      	subs	r3, #11
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	2500      	movs	r5, #0
 8001f70:	e7e3      	b.n	8001f3a <__aeabi_f2d+0x5e>
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	800fffff 	.word	0x800fffff
 8001f78:	00000389 	.word	0x00000389
 8001f7c:	000007ff 	.word	0x000007ff

08001f80 <__aeabi_d2f>:
 8001f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f82:	004c      	lsls	r4, r1, #1
 8001f84:	0d64      	lsrs	r4, r4, #21
 8001f86:	030b      	lsls	r3, r1, #12
 8001f88:	1c62      	adds	r2, r4, #1
 8001f8a:	0a5b      	lsrs	r3, r3, #9
 8001f8c:	0f46      	lsrs	r6, r0, #29
 8001f8e:	0552      	lsls	r2, r2, #21
 8001f90:	0fc9      	lsrs	r1, r1, #31
 8001f92:	431e      	orrs	r6, r3
 8001f94:	00c5      	lsls	r5, r0, #3
 8001f96:	0d52      	lsrs	r2, r2, #21
 8001f98:	2a01      	cmp	r2, #1
 8001f9a:	dd29      	ble.n	8001ff0 <__aeabi_d2f+0x70>
 8001f9c:	4b37      	ldr	r3, [pc, #220]	; (800207c <__aeabi_d2f+0xfc>)
 8001f9e:	18e7      	adds	r7, r4, r3
 8001fa0:	2ffe      	cmp	r7, #254	; 0xfe
 8001fa2:	dc1c      	bgt.n	8001fde <__aeabi_d2f+0x5e>
 8001fa4:	2f00      	cmp	r7, #0
 8001fa6:	dd3b      	ble.n	8002020 <__aeabi_d2f+0xa0>
 8001fa8:	0180      	lsls	r0, r0, #6
 8001faa:	1e43      	subs	r3, r0, #1
 8001fac:	4198      	sbcs	r0, r3
 8001fae:	2207      	movs	r2, #7
 8001fb0:	00f3      	lsls	r3, r6, #3
 8001fb2:	0f6d      	lsrs	r5, r5, #29
 8001fb4:	4303      	orrs	r3, r0
 8001fb6:	432b      	orrs	r3, r5
 8001fb8:	401a      	ands	r2, r3
 8001fba:	2a00      	cmp	r2, #0
 8001fbc:	d004      	beq.n	8001fc8 <__aeabi_d2f+0x48>
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	2a04      	cmp	r2, #4
 8001fc4:	d000      	beq.n	8001fc8 <__aeabi_d2f+0x48>
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	2280      	movs	r2, #128	; 0x80
 8001fca:	04d2      	lsls	r2, r2, #19
 8001fcc:	401a      	ands	r2, r3
 8001fce:	d024      	beq.n	800201a <__aeabi_d2f+0x9a>
 8001fd0:	3701      	adds	r7, #1
 8001fd2:	b2fa      	uxtb	r2, r7
 8001fd4:	2fff      	cmp	r7, #255	; 0xff
 8001fd6:	d002      	beq.n	8001fde <__aeabi_d2f+0x5e>
 8001fd8:	019b      	lsls	r3, r3, #6
 8001fda:	0a58      	lsrs	r0, r3, #9
 8001fdc:	e001      	b.n	8001fe2 <__aeabi_d2f+0x62>
 8001fde:	22ff      	movs	r2, #255	; 0xff
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	0240      	lsls	r0, r0, #9
 8001fe4:	05d2      	lsls	r2, r2, #23
 8001fe6:	0a40      	lsrs	r0, r0, #9
 8001fe8:	07c9      	lsls	r1, r1, #31
 8001fea:	4310      	orrs	r0, r2
 8001fec:	4308      	orrs	r0, r1
 8001fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff0:	4335      	orrs	r5, r6
 8001ff2:	2c00      	cmp	r4, #0
 8001ff4:	d104      	bne.n	8002000 <__aeabi_d2f+0x80>
 8001ff6:	2d00      	cmp	r5, #0
 8001ff8:	d10a      	bne.n	8002010 <__aeabi_d2f+0x90>
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	e7f0      	b.n	8001fe2 <__aeabi_d2f+0x62>
 8002000:	2d00      	cmp	r5, #0
 8002002:	d0ec      	beq.n	8001fde <__aeabi_d2f+0x5e>
 8002004:	2080      	movs	r0, #128	; 0x80
 8002006:	03c0      	lsls	r0, r0, #15
 8002008:	4330      	orrs	r0, r6
 800200a:	22ff      	movs	r2, #255	; 0xff
 800200c:	e7e9      	b.n	8001fe2 <__aeabi_d2f+0x62>
 800200e:	2400      	movs	r4, #0
 8002010:	2300      	movs	r3, #0
 8002012:	025b      	lsls	r3, r3, #9
 8002014:	0a58      	lsrs	r0, r3, #9
 8002016:	b2e2      	uxtb	r2, r4
 8002018:	e7e3      	b.n	8001fe2 <__aeabi_d2f+0x62>
 800201a:	08db      	lsrs	r3, r3, #3
 800201c:	003c      	movs	r4, r7
 800201e:	e7f8      	b.n	8002012 <__aeabi_d2f+0x92>
 8002020:	003b      	movs	r3, r7
 8002022:	3317      	adds	r3, #23
 8002024:	dbf3      	blt.n	800200e <__aeabi_d2f+0x8e>
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	041b      	lsls	r3, r3, #16
 800202a:	4333      	orrs	r3, r6
 800202c:	261e      	movs	r6, #30
 800202e:	1bf6      	subs	r6, r6, r7
 8002030:	2e1f      	cmp	r6, #31
 8002032:	dd14      	ble.n	800205e <__aeabi_d2f+0xde>
 8002034:	2202      	movs	r2, #2
 8002036:	4252      	negs	r2, r2
 8002038:	1bd7      	subs	r7, r2, r7
 800203a:	001a      	movs	r2, r3
 800203c:	40fa      	lsrs	r2, r7
 800203e:	0017      	movs	r7, r2
 8002040:	2e20      	cmp	r6, #32
 8002042:	d004      	beq.n	800204e <__aeabi_d2f+0xce>
 8002044:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <__aeabi_d2f+0x100>)
 8002046:	4694      	mov	ip, r2
 8002048:	4464      	add	r4, ip
 800204a:	40a3      	lsls	r3, r4
 800204c:	431d      	orrs	r5, r3
 800204e:	002b      	movs	r3, r5
 8002050:	1e5d      	subs	r5, r3, #1
 8002052:	41ab      	sbcs	r3, r5
 8002054:	2207      	movs	r2, #7
 8002056:	433b      	orrs	r3, r7
 8002058:	401a      	ands	r2, r3
 800205a:	2700      	movs	r7, #0
 800205c:	e7ad      	b.n	8001fba <__aeabi_d2f+0x3a>
 800205e:	4a09      	ldr	r2, [pc, #36]	; (8002084 <__aeabi_d2f+0x104>)
 8002060:	0028      	movs	r0, r5
 8002062:	18a2      	adds	r2, r4, r2
 8002064:	4095      	lsls	r5, r2
 8002066:	4093      	lsls	r3, r2
 8002068:	1e6c      	subs	r4, r5, #1
 800206a:	41a5      	sbcs	r5, r4
 800206c:	40f0      	lsrs	r0, r6
 800206e:	2207      	movs	r2, #7
 8002070:	432b      	orrs	r3, r5
 8002072:	4303      	orrs	r3, r0
 8002074:	401a      	ands	r2, r3
 8002076:	2700      	movs	r7, #0
 8002078:	e79f      	b.n	8001fba <__aeabi_d2f+0x3a>
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	fffffc80 	.word	0xfffffc80
 8002080:	fffffca2 	.word	0xfffffca2
 8002084:	fffffc82 	.word	0xfffffc82

08002088 <__clzsi2>:
 8002088:	211c      	movs	r1, #28
 800208a:	2301      	movs	r3, #1
 800208c:	041b      	lsls	r3, r3, #16
 800208e:	4298      	cmp	r0, r3
 8002090:	d301      	bcc.n	8002096 <__clzsi2+0xe>
 8002092:	0c00      	lsrs	r0, r0, #16
 8002094:	3910      	subs	r1, #16
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	4298      	cmp	r0, r3
 800209a:	d301      	bcc.n	80020a0 <__clzsi2+0x18>
 800209c:	0a00      	lsrs	r0, r0, #8
 800209e:	3908      	subs	r1, #8
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	4298      	cmp	r0, r3
 80020a4:	d301      	bcc.n	80020aa <__clzsi2+0x22>
 80020a6:	0900      	lsrs	r0, r0, #4
 80020a8:	3904      	subs	r1, #4
 80020aa:	a202      	add	r2, pc, #8	; (adr r2, 80020b4 <__clzsi2+0x2c>)
 80020ac:	5c10      	ldrb	r0, [r2, r0]
 80020ae:	1840      	adds	r0, r0, r1
 80020b0:	4770      	bx	lr
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	02020304 	.word	0x02020304
 80020b8:	01010101 	.word	0x01010101
	...

080020c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020c4:	b530      	push	{r4, r5, lr}
 80020c6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020c8:	222c      	movs	r2, #44	; 0x2c
 80020ca:	2100      	movs	r1, #0
 80020cc:	a809      	add	r0, sp, #36	; 0x24
 80020ce:	f001 fe7f 	bl	8003dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020d2:	2210      	movs	r2, #16
 80020d4:	2100      	movs	r1, #0
 80020d6:	4668      	mov	r0, sp
 80020d8:	f001 fe7a 	bl	8003dd0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020dc:	2210      	movs	r2, #16
 80020de:	2100      	movs	r1, #0
 80020e0:	a804      	add	r0, sp, #16
 80020e2:	f001 fe75 	bl	8003dd0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80020e6:	2312      	movs	r3, #18
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020e8:	2410      	movs	r4, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80020ea:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80020ec:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020ee:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020f0:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80020f2:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80020f4:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020f6:	3c0e      	subs	r4, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020f8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020fa:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80020fc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020fe:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002100:	950d      	str	r5, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002102:	f000 ffcd 	bl	80030a0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002106:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002108:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800210a:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800210c:	2101      	movs	r1, #1
 800210e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002110:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002112:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002114:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002116:	f001 fa11 	bl	800353c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800211a:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800211c:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800211e:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002120:	f001 fb0e 	bl	8003740 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002124:	b015      	add	sp, #84	; 0x54
 8002126:	bd30      	pop	{r4, r5, pc}

08002128 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
void MX_ADC_Init(void)
{
 8002128:	b570      	push	{r4, r5, r6, lr}
 800212a:	b084      	sub	sp, #16

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800212c:	220c      	movs	r2, #12
 800212e:	2100      	movs	r1, #0
 8002130:	a801      	add	r0, sp, #4
 8002132:	f001 fe4d 	bl	8003dd0 <memset>
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8002136:	4c16      	ldr	r4, [pc, #88]	; (8002190 <MX_ADC_Init+0x68>)
 8002138:	4b16      	ldr	r3, [pc, #88]	; (8002194 <MX_ADC_Init+0x6c>)
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800213a:	2500      	movs	r5, #0
	hadc.Instance = ADC1;
 800213c:	6023      	str	r3, [r4, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	05db      	lsls	r3, r3, #23
 8002142:	6063      	str	r3, [r4, #4]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002144:	2308      	movs	r3, #8
 8002146:	6163      	str	r3, [r4, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	025b      	lsls	r3, r3, #9
 800214c:	61a3      	str	r3, [r4, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
	hadc.Init.ContinuousConvMode = ENABLE;
	hadc.Init.DiscontinuousConvMode = DISABLE;
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800214e:	23c2      	movs	r3, #194	; 0xc2
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002150:	2601      	movs	r6, #1
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002152:	33ff      	adds	r3, #255	; 0xff
 8002154:	61e3      	str	r3, [r4, #28]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	hadc.Init.DMAContinuousRequests = ENABLE;
 8002156:	3b9e      	subs	r3, #158	; 0x9e
 8002158:	3bff      	subs	r3, #255	; 0xff
	hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 800215a:	0020      	movs	r0, r4
	hadc.Init.DMAContinuousRequests = ENABLE;
 800215c:	54e6      	strb	r6, [r4, r3]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800215e:	60a5      	str	r5, [r4, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002160:	60e5      	str	r5, [r4, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002162:	6126      	str	r6, [r4, #16]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002164:	6225      	str	r5, [r4, #32]
	hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002166:	62a5      	str	r5, [r4, #40]	; 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002168:	f000 fb7a 	bl	8002860 <HAL_ADC_Init>
		Error_Handler();
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	015b      	lsls	r3, r3, #5
 8002170:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002172:	2307      	movs	r3, #7
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002174:	a901      	add	r1, sp, #4
 8002176:	0020      	movs	r0, r4
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002178:	9303      	str	r3, [sp, #12]
	sConfig.Channel = ADC_CHANNEL_0;
 800217a:	9501      	str	r5, [sp, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800217c:	f000 fd02 	bl	8002b84 <HAL_ADC_ConfigChannel>
		Error_Handler();
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002180:	a901      	add	r1, sp, #4
 8002182:	0020      	movs	r0, r4
	sConfig.Channel = ADC_CHANNEL_1;
 8002184:	9601      	str	r6, [sp, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002186:	f000 fcfd 	bl	8002b84 <HAL_ADC_ConfigChannel>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 800218a:	b004      	add	sp, #16
 800218c:	bd70      	pop	{r4, r5, r6, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	200000f8 	.word	0x200000f8
 8002194:	40012400 	.word	0x40012400

08002198 <MX_USART1_UART_Init>:
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002198:	4809      	ldr	r0, [pc, #36]	; (80021c0 <MX_USART1_UART_Init+0x28>)
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <MX_USART1_UART_Init+0x2c>)
{
 800219c:	b510      	push	{r4, lr}
	huart1.Instance = USART1;
 800219e:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 230400;
 80021a0:	23e1      	movs	r3, #225	; 0xe1
 80021a2:	029b      	lsls	r3, r3, #10
 80021a4:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
	huart1.Init.StopBits = UART_STOPBITS_1;
	huart1.Init.Parity = UART_PARITY_NONE;
	huart1.Init.Mode = UART_MODE_TX_RX;
 80021a6:	220c      	movs	r2, #12
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021a8:	2300      	movs	r3, #0
	huart1.Init.Mode = UART_MODE_TX_RX;
 80021aa:	6142      	str	r2, [r0, #20]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021ac:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80021ae:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80021b0:	6103      	str	r3, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b2:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b4:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021b6:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021b8:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ba:	f001 fc99 	bl	8003af0 <HAL_UART_Init>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80021be:	bd10      	pop	{r4, pc}
 80021c0:	20000034 	.word	0x20000034
 80021c4:	40013800 	.word	0x40013800

080021c8 <MX_DMA_Init>:
 */
void MX_DMA_Init(void)
{

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80021c8:	2301      	movs	r3, #1
 80021ca:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <MX_DMA_Init+0x2c>)
{
 80021cc:	b500      	push	{lr}
	__HAL_RCC_DMA1_CLK_ENABLE();
 80021ce:	6951      	ldr	r1, [r2, #20]
{
 80021d0:	b083      	sub	sp, #12
	__HAL_RCC_DMA1_CLK_ENABLE();
 80021d2:	4319      	orrs	r1, r3
 80021d4:	6151      	str	r1, [r2, #20]
 80021d6:	6952      	ldr	r2, [r2, #20]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021d8:	2100      	movs	r1, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 80021da:	4013      	ands	r3, r2
 80021dc:	9301      	str	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2009      	movs	r0, #9
	__HAL_RCC_DMA1_CLK_ENABLE();
 80021e2:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021e4:	f000 fd4e 	bl	8002c84 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021e8:	2009      	movs	r0, #9
 80021ea:	f000 fd77 	bl	8002cdc <HAL_NVIC_EnableIRQ>

}
 80021ee:	b003      	add	sp, #12
 80021f0:	bd00      	pop	{pc}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	40021000 	.word	0x40021000

080021f8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 80021f8:	b530      	push	{r4, r5, lr}
 80021fa:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	2214      	movs	r2, #20
 80021fe:	2100      	movs	r1, #0
 8002200:	a803      	add	r0, sp, #12
 8002202:	f001 fde5 	bl	8003dd0 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	2080      	movs	r0, #128	; 0x80
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <MX_GPIO_Init+0x5c>)
 800220a:	0280      	lsls	r0, r0, #10
 800220c:	6959      	ldr	r1, [r3, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800220e:	2580      	movs	r5, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002210:	4301      	orrs	r1, r0
 8002212:	6159      	str	r1, [r3, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002214:	2180      	movs	r1, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002216:	695a      	ldr	r2, [r3, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002218:	02c9      	lsls	r1, r1, #11
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	4002      	ands	r2, r0
 800221c:	9201      	str	r2, [sp, #4]
 800221e:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002220:	695a      	ldr	r2, [r3, #20]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8002222:	4c0d      	ldr	r4, [pc, #52]	; (8002258 <MX_GPIO_Init+0x60>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002224:	430a      	orrs	r2, r1
 8002226:	615a      	str	r2, [r3, #20]
 8002228:	695b      	ldr	r3, [r3, #20]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800222a:	022d      	lsls	r5, r5, #8
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800222c:	400b      	ands	r3, r1
 800222e:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8002230:	2200      	movs	r2, #0
 8002232:	0029      	movs	r1, r5
 8002234:	0020      	movs	r0, r4
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8002238:	f000 ff2c 	bl	8003094 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223c:	2301      	movs	r3, #1
 800223e:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002242:	a903      	add	r1, sp, #12
 8002244:	0020      	movs	r0, r4
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002246:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	9306      	str	r3, [sp, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224c:	f000 fe30 	bl	8002eb0 <HAL_GPIO_Init>

}
 8002250:	b009      	add	sp, #36	; 0x24
 8002252:	bd30      	pop	{r4, r5, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	48000400 	.word	0x48000400

0800225c <Error_Handler>:
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800225c:	4770      	bx	lr
 800225e:	46c0      	nop			; (mov r8, r8)

08002260 <theta_abs_rad>:
{
	return sin_fast(theta + HALF_PI);
}

float theta_abs_rad()
{
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	46de      	mov	lr, fp
 8002264:	4657      	mov	r7, sl
 8002266:	464e      	mov	r6, r9
 8002268:	4645      	mov	r5, r8
	int16_t sinVal = dma_adc_raw[ADC_SIN_CHAN]-sin_mid;
 800226a:	4c4c      	ldr	r4, [pc, #304]	; (800239c <theta_abs_rad+0x13c>)
 800226c:	4b4c      	ldr	r3, [pc, #304]	; (80023a0 <theta_abs_rad+0x140>)
 800226e:	8820      	ldrh	r0, [r4, #0]
 8002270:	881b      	ldrh	r3, [r3, #0]
{
 8002272:	b5e0      	push	{r5, r6, r7, lr}
	int16_t sinVal = dma_adc_raw[ADC_SIN_CHAN]-sin_mid;
 8002274:	1ac0      	subs	r0, r0, r3
	int16_t cosVal = dma_adc_raw[ADC_COS_CHAN]-cos_mid;
//	return atan2((float)sinVal,(float)cosVal);
	return atan2_approx((float)sinVal,(float)cosVal);
 8002276:	b200      	sxth	r0, r0
 8002278:	f7fe fcda 	bl	8000c30 <__aeabi_i2f>
	int16_t cosVal = dma_adc_raw[ADC_COS_CHAN]-cos_mid;
 800227c:	4b49      	ldr	r3, [pc, #292]	; (80023a4 <theta_abs_rad+0x144>)
	return atan2_approx((float)sinVal,(float)cosVal);
 800227e:	4680      	mov	r8, r0
	int16_t cosVal = dma_adc_raw[ADC_COS_CHAN]-cos_mid;
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	8860      	ldrh	r0, [r4, #2]
	float abs_s = sinVal;
 8002284:	46c2      	mov	sl, r8
	int16_t cosVal = dma_adc_raw[ADC_COS_CHAN]-cos_mid;
 8002286:	1ac0      	subs	r0, r0, r3
	return atan2_approx((float)sinVal,(float)cosVal);
 8002288:	b200      	sxth	r0, r0
 800228a:	f7fe fcd1 	bl	8000c30 <__aeabi_i2f>
	if(abs_s < 0)
 800228e:	2100      	movs	r1, #0
	return atan2_approx((float)sinVal,(float)cosVal);
 8002290:	4681      	mov	r9, r0
	if(abs_s < 0)
 8002292:	4640      	mov	r0, r8
 8002294:	f7fd ffd6 	bl	8000244 <__aeabi_fcmplt>
 8002298:	2800      	cmp	r0, #0
 800229a:	d003      	beq.n	80022a4 <theta_abs_rad+0x44>
		abs_s = -abs_s;
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	061b      	lsls	r3, r3, #24
 80022a0:	4443      	add	r3, r8
 80022a2:	469a      	mov	sl, r3
	if(abs_c < 0)
 80022a4:	2100      	movs	r1, #0
 80022a6:	4648      	mov	r0, r9
 80022a8:	f7fd ffcc 	bl	8000244 <__aeabi_fcmplt>
	float abs_c = cosVal;
 80022ac:	46cb      	mov	fp, r9
	if(abs_c < 0)
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d003      	beq.n	80022ba <theta_abs_rad+0x5a>
		abs_c = -abs_c;
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	061b      	lsls	r3, r3, #24
 80022b6:	444b      	add	r3, r9
 80022b8:	469b      	mov	fp, r3
	if(abs_s < abs_c)
 80022ba:	4659      	mov	r1, fp
 80022bc:	4650      	mov	r0, sl
 80022be:	f7fd ffc1 	bl	8000244 <__aeabi_fcmplt>
 80022c2:	2800      	cmp	r0, #0
 80022c4:	d066      	beq.n	8002394 <theta_abs_rad+0x134>
		max_v = abs_c;
 80022c6:	4659      	mov	r1, fp
		min_v = abs_s;
 80022c8:	4650      	mov	r0, sl
	float a = min_v/max_v;
 80022ca:	f7fd ffe3 	bl	8000294 <__aeabi_fdiv>
	float sv = a*a;
 80022ce:	1c01      	adds	r1, r0, #0
	float a = min_v/max_v;
 80022d0:	1c06      	adds	r6, r0, #0
	float sv = a*a;
 80022d2:	f7fe f9b7 	bl	8000644 <__aeabi_fmul>
	float r = ((-0.0464964749 * sv + 0.15931422)*sv- 0.327622764) * sv * a + a;
 80022d6:	f7ff fe01 	bl	8001edc <__aeabi_f2d>
 80022da:	0004      	movs	r4, r0
 80022dc:	1c30      	adds	r0, r6, #0
 80022de:	000d      	movs	r5, r1
 80022e0:	f7ff fdfc 	bl	8001edc <__aeabi_f2d>
 80022e4:	0006      	movs	r6, r0
 80022e6:	000f      	movs	r7, r1
 80022e8:	4a2f      	ldr	r2, [pc, #188]	; (80023a8 <theta_abs_rad+0x148>)
 80022ea:	4b30      	ldr	r3, [pc, #192]	; (80023ac <theta_abs_rad+0x14c>)
 80022ec:	0020      	movs	r0, r4
 80022ee:	0029      	movs	r1, r5
 80022f0:	f7ff f804 	bl	80012fc <__aeabi_dmul>
 80022f4:	4a2e      	ldr	r2, [pc, #184]	; (80023b0 <theta_abs_rad+0x150>)
 80022f6:	4b2f      	ldr	r3, [pc, #188]	; (80023b4 <theta_abs_rad+0x154>)
 80022f8:	f7fe fce4 	bl	8000cc4 <__aeabi_dadd>
 80022fc:	0022      	movs	r2, r4
 80022fe:	002b      	movs	r3, r5
 8002300:	f7fe fffc 	bl	80012fc <__aeabi_dmul>
 8002304:	4a2c      	ldr	r2, [pc, #176]	; (80023b8 <theta_abs_rad+0x158>)
 8002306:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <theta_abs_rad+0x15c>)
 8002308:	f7ff fa6a 	bl	80017e0 <__aeabi_dsub>
 800230c:	0022      	movs	r2, r4
 800230e:	002b      	movs	r3, r5
 8002310:	f7fe fff4 	bl	80012fc <__aeabi_dmul>
 8002314:	0032      	movs	r2, r6
 8002316:	003b      	movs	r3, r7
 8002318:	f7fe fff0 	bl	80012fc <__aeabi_dmul>
 800231c:	0032      	movs	r2, r6
 800231e:	003b      	movs	r3, r7
 8002320:	f7fe fcd0 	bl	8000cc4 <__aeabi_dadd>
 8002324:	f7ff fe2c 	bl	8001f80 <__aeabi_d2f>
	if(abs_s > abs_c)
 8002328:	4659      	mov	r1, fp
	float r = ((-0.0464964749 * sv + 0.15931422)*sv- 0.327622764) * sv * a + a;
 800232a:	1c04      	adds	r4, r0, #0
	if(abs_s > abs_c)
 800232c:	4650      	mov	r0, sl
 800232e:	f7fd ff9d 	bl	800026c <__aeabi_fcmpgt>
 8002332:	2800      	cmp	r0, #0
 8002334:	d00b      	beq.n	800234e <theta_abs_rad+0xee>
		r = 1.57079637 -r;
 8002336:	1c20      	adds	r0, r4, #0
 8002338:	f7ff fdd0 	bl	8001edc <__aeabi_f2d>
 800233c:	0002      	movs	r2, r0
 800233e:	000b      	movs	r3, r1
 8002340:	481f      	ldr	r0, [pc, #124]	; (80023c0 <theta_abs_rad+0x160>)
 8002342:	4920      	ldr	r1, [pc, #128]	; (80023c4 <theta_abs_rad+0x164>)
 8002344:	f7ff fa4c 	bl	80017e0 <__aeabi_dsub>
 8002348:	f7ff fe1a 	bl	8001f80 <__aeabi_d2f>
 800234c:	1c04      	adds	r4, r0, #0
	if(cosVal < 0)
 800234e:	2100      	movs	r1, #0
 8002350:	4648      	mov	r0, r9
 8002352:	f7fd ff77 	bl	8000244 <__aeabi_fcmplt>
 8002356:	2800      	cmp	r0, #0
 8002358:	d00b      	beq.n	8002372 <theta_abs_rad+0x112>
		r = 3.14159274 - r;
 800235a:	1c20      	adds	r0, r4, #0
 800235c:	f7ff fdbe 	bl	8001edc <__aeabi_f2d>
 8002360:	0002      	movs	r2, r0
 8002362:	000b      	movs	r3, r1
 8002364:	4816      	ldr	r0, [pc, #88]	; (80023c0 <theta_abs_rad+0x160>)
 8002366:	4918      	ldr	r1, [pc, #96]	; (80023c8 <theta_abs_rad+0x168>)
 8002368:	f7ff fa3a 	bl	80017e0 <__aeabi_dsub>
 800236c:	f7ff fe08 	bl	8001f80 <__aeabi_d2f>
 8002370:	1c04      	adds	r4, r0, #0
	if(sinVal < 0)
 8002372:	2100      	movs	r1, #0
 8002374:	4640      	mov	r0, r8
 8002376:	f7fd ff65 	bl	8000244 <__aeabi_fcmplt>
 800237a:	2800      	cmp	r0, #0
 800237c:	d003      	beq.n	8002386 <theta_abs_rad+0x126>
		r = -r;
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	061b      	lsls	r3, r3, #24
 8002382:	469c      	mov	ip, r3
 8002384:	4464      	add	r4, ip
}
 8002386:	1c20      	adds	r0, r4, #0
 8002388:	bc3c      	pop	{r2, r3, r4, r5}
 800238a:	4690      	mov	r8, r2
 800238c:	4699      	mov	r9, r3
 800238e:	46a2      	mov	sl, r4
 8002390:	46ab      	mov	fp, r5
 8002392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float max_v = abs_s;
 8002394:	4651      	mov	r1, sl
	float min_v = abs_c;
 8002396:	4658      	mov	r0, fp
 8002398:	e797      	b.n	80022ca <theta_abs_rad+0x6a>
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	2000002c 	.word	0x2000002c
 80023a0:	20000002 	.word	0x20000002
 80023a4:	20000000 	.word	0x20000000
 80023a8:	ce264a34 	.word	0xce264a34
 80023ac:	bfa7ce62 	.word	0xbfa7ce62
 80023b0:	8a58082a 	.word	0x8a58082a
 80023b4:	3fc46468 	.word	0x3fc46468
 80023b8:	78338730 	.word	0x78338730
 80023bc:	3fd4f7c5 	.word	0x3fd4f7c5
 80023c0:	5fdd3550 	.word	0x5fdd3550
 80023c4:	3ff921fb 	.word	0x3ff921fb
 80023c8:	400921fb 	.word	0x400921fb

080023cc <unwrap>:
		fv = (-fv)-1;
	return in-TWO_PI*fv;
}

float unwrap(float theta, float * prev_theta)
{
 80023cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ce:	46c6      	mov	lr, r8
	float dif = fmod_2pi(fmod_2pi(*prev_theta) - theta + PI);
 80023d0:	680e      	ldr	r6, [r1, #0]
{
 80023d2:	b500      	push	{lr}
 80023d4:	1c07      	adds	r7, r0, #0
 80023d6:	1c30      	adds	r0, r6, #0
 80023d8:	4688      	mov	r8, r1
 80023da:	f7ff fd7f 	bl	8001edc <__aeabi_f2d>
 80023de:	0004      	movs	r4, r0
 80023e0:	000d      	movs	r5, r1
	if(in < 0)
 80023e2:	1c30      	adds	r0, r6, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	f7fd ff2d 	bl	8000244 <__aeabi_fcmplt>
 80023ea:	2800      	cmp	r0, #0
 80023ec:	d000      	beq.n	80023f0 <unwrap+0x24>
 80023ee:	e083      	b.n	80024f8 <unwrap+0x12c>
	float fv = (float)((int)(in_eval*ONE_BY_TWO_PI));
 80023f0:	4a4c      	ldr	r2, [pc, #304]	; (8002524 <unwrap+0x158>)
 80023f2:	4b4d      	ldr	r3, [pc, #308]	; (8002528 <unwrap+0x15c>)
 80023f4:	0020      	movs	r0, r4
 80023f6:	0029      	movs	r1, r5
 80023f8:	f7fe ff80 	bl	80012fc <__aeabi_dmul>
 80023fc:	f7ff fd38 	bl	8001e70 <__aeabi_d2iz>
 8002400:	f7fe fc16 	bl	8000c30 <__aeabi_i2f>
	return in-TWO_PI*fv;
 8002404:	f7ff fd6a 	bl	8001edc <__aeabi_f2d>
 8002408:	4a48      	ldr	r2, [pc, #288]	; (800252c <unwrap+0x160>)
 800240a:	4b49      	ldr	r3, [pc, #292]	; (8002530 <unwrap+0x164>)
 800240c:	f7fe ff76 	bl	80012fc <__aeabi_dmul>
 8002410:	0002      	movs	r2, r0
 8002412:	000b      	movs	r3, r1
 8002414:	0020      	movs	r0, r4
 8002416:	0029      	movs	r1, r5
 8002418:	f7ff f9e2 	bl	80017e0 <__aeabi_dsub>
 800241c:	f7ff fdb0 	bl	8001f80 <__aeabi_d2f>
	float dif = fmod_2pi(fmod_2pi(*prev_theta) - theta + PI);
 8002420:	1c39      	adds	r1, r7, #0
 8002422:	f7fe fa41 	bl	80008a8 <__aeabi_fsub>
 8002426:	f7ff fd59 	bl	8001edc <__aeabi_f2d>
 800242a:	4a40      	ldr	r2, [pc, #256]	; (800252c <unwrap+0x160>)
 800242c:	4b41      	ldr	r3, [pc, #260]	; (8002534 <unwrap+0x168>)
 800242e:	f7fe fc49 	bl	8000cc4 <__aeabi_dadd>
 8002432:	f7ff fda5 	bl	8001f80 <__aeabi_d2f>
 8002436:	1c07      	adds	r7, r0, #0
 8002438:	f7ff fd50 	bl	8001edc <__aeabi_f2d>
 800243c:	0004      	movs	r4, r0
 800243e:	000d      	movs	r5, r1
	if(in < 0)
 8002440:	1c38      	adds	r0, r7, #0
 8002442:	2100      	movs	r1, #0
 8002444:	f7fd fefe 	bl	8000244 <__aeabi_fcmplt>
 8002448:	2800      	cmp	r0, #0
 800244a:	d13f      	bne.n	80024cc <unwrap+0x100>
	float fv = (float)((int)(in_eval*ONE_BY_TWO_PI));
 800244c:	4a35      	ldr	r2, [pc, #212]	; (8002524 <unwrap+0x158>)
 800244e:	4b36      	ldr	r3, [pc, #216]	; (8002528 <unwrap+0x15c>)
 8002450:	0020      	movs	r0, r4
 8002452:	0029      	movs	r1, r5
 8002454:	f7fe ff52 	bl	80012fc <__aeabi_dmul>
 8002458:	f7ff fd0a 	bl	8001e70 <__aeabi_d2iz>
 800245c:	f7fe fbe8 	bl	8000c30 <__aeabi_i2f>
	return in-TWO_PI*fv;
 8002460:	f7ff fd3c 	bl	8001edc <__aeabi_f2d>
 8002464:	4a31      	ldr	r2, [pc, #196]	; (800252c <unwrap+0x160>)
 8002466:	4b32      	ldr	r3, [pc, #200]	; (8002530 <unwrap+0x164>)
 8002468:	f7fe ff48 	bl	80012fc <__aeabi_dmul>
 800246c:	0002      	movs	r2, r0
 800246e:	000b      	movs	r3, r1
 8002470:	0020      	movs	r0, r4
 8002472:	0029      	movs	r1, r5
 8002474:	f7ff f9b4 	bl	80017e0 <__aeabi_dsub>
 8002478:	f7ff fd82 	bl	8001f80 <__aeabi_d2f>
 800247c:	1c07      	adds	r7, r0, #0
 800247e:	f7ff fd2d 	bl	8001edc <__aeabi_f2d>
 8002482:	0004      	movs	r4, r0
 8002484:	000d      	movs	r5, r1
	if(dif < 0)
 8002486:	1c38      	adds	r0, r7, #0
 8002488:	2100      	movs	r1, #0
 800248a:	f7fd fedb 	bl	8000244 <__aeabi_fcmplt>
 800248e:	2800      	cmp	r0, #0
 8002490:	d00b      	beq.n	80024aa <unwrap+0xde>
		dif = dif + TWO_PI;
 8002492:	4a26      	ldr	r2, [pc, #152]	; (800252c <unwrap+0x160>)
 8002494:	4b26      	ldr	r3, [pc, #152]	; (8002530 <unwrap+0x164>)
 8002496:	0020      	movs	r0, r4
 8002498:	0029      	movs	r1, r5
 800249a:	f7fe fc13 	bl	8000cc4 <__aeabi_dadd>
 800249e:	f7ff fd6f 	bl	8001f80 <__aeabi_d2f>
 80024a2:	f7ff fd1b 	bl	8001edc <__aeabi_f2d>
 80024a6:	0004      	movs	r4, r0
 80024a8:	000d      	movs	r5, r1
	dif = dif - PI;
 80024aa:	4a20      	ldr	r2, [pc, #128]	; (800252c <unwrap+0x160>)
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <unwrap+0x168>)
 80024ae:	0029      	movs	r1, r5
 80024b0:	0020      	movs	r0, r4
 80024b2:	f7ff f995 	bl	80017e0 <__aeabi_dsub>
 80024b6:	f7ff fd63 	bl	8001f80 <__aeabi_d2f>
 80024ba:	1c01      	adds	r1, r0, #0
	float theta_ret = *prev_theta - dif;
 80024bc:	1c30      	adds	r0, r6, #0
 80024be:	f7fe f9f3 	bl	80008a8 <__aeabi_fsub>
	*prev_theta = theta_ret;
 80024c2:	4643      	mov	r3, r8
 80024c4:	6018      	str	r0, [r3, #0]
	return theta_ret;
}
 80024c6:	bc04      	pop	{r2}
 80024c8:	4690      	mov	r8, r2
 80024ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		in_eval = -in;
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	061b      	lsls	r3, r3, #24
 80024d0:	18f8      	adds	r0, r7, r3
	float fv = (float)((int)(in_eval*ONE_BY_TWO_PI));
 80024d2:	f7ff fd03 	bl	8001edc <__aeabi_f2d>
 80024d6:	4a13      	ldr	r2, [pc, #76]	; (8002524 <unwrap+0x158>)
 80024d8:	4b13      	ldr	r3, [pc, #76]	; (8002528 <unwrap+0x15c>)
 80024da:	f7fe ff0f 	bl	80012fc <__aeabi_dmul>
 80024de:	f7ff fcc7 	bl	8001e70 <__aeabi_d2iz>
 80024e2:	f7fe fba5 	bl	8000c30 <__aeabi_i2f>
		fv = (-fv)-1;
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	061b      	lsls	r3, r3, #24
 80024ea:	469c      	mov	ip, r3
 80024ec:	21fe      	movs	r1, #254	; 0xfe
 80024ee:	4460      	add	r0, ip
 80024f0:	0589      	lsls	r1, r1, #22
 80024f2:	f7fe f9d9 	bl	80008a8 <__aeabi_fsub>
 80024f6:	e7b3      	b.n	8002460 <unwrap+0x94>
		in_eval = -in;
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	061b      	lsls	r3, r3, #24
 80024fc:	18f0      	adds	r0, r6, r3
	float fv = (float)((int)(in_eval*ONE_BY_TWO_PI));
 80024fe:	f7ff fced 	bl	8001edc <__aeabi_f2d>
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <unwrap+0x158>)
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <unwrap+0x15c>)
 8002506:	f7fe fef9 	bl	80012fc <__aeabi_dmul>
 800250a:	f7ff fcb1 	bl	8001e70 <__aeabi_d2iz>
 800250e:	f7fe fb8f 	bl	8000c30 <__aeabi_i2f>
		fv = (-fv)-1;
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	061b      	lsls	r3, r3, #24
 8002516:	469c      	mov	ip, r3
 8002518:	21fe      	movs	r1, #254	; 0xfe
 800251a:	4460      	add	r0, ip
 800251c:	0589      	lsls	r1, r1, #22
 800251e:	f7fe f9c3 	bl	80008a8 <__aeabi_fsub>
 8002522:	e76f      	b.n	8002404 <unwrap+0x38>
 8002524:	113fc364 	.word	0x113fc364
 8002528:	3fc45f30 	.word	0x3fc45f30
 800252c:	54442eea 	.word	0x54442eea
 8002530:	401921fb 	.word	0x401921fb
 8002534:	400921fb 	.word	0x400921fb

08002538 <HAL_ADC_ConvCpltCallback>:
}floatsend_t;

volatile uint8_t gl_adc_cplt_flag = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	gl_adc_cplt_flag = 1;
 8002538:	2201      	movs	r2, #1
 800253a:	4b01      	ldr	r3, [pc, #4]	; (8002540 <HAL_ADC_ConvCpltCallback+0x8>)
 800253c:	701a      	strb	r2, [r3, #0]
}
 800253e:	4770      	bx	lr
 8002540:	20000030 	.word	0x20000030

08002544 <main>:


int main(void)
{
 8002544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002546:	b083      	sub	sp, #12
	HAL_Init();
 8002548:	f000 f956 	bl	80027f8 <HAL_Init>
	SystemClock_Config();
 800254c:	f7ff fdba 	bl	80020c4 <SystemClock_Config>
	MX_GPIO_Init();
 8002550:	f7ff fe52 	bl	80021f8 <MX_GPIO_Init>
	MX_DMA_Init();
 8002554:	f7ff fe38 	bl	80021c8 <MX_DMA_Init>
	MX_ADC_Init();
 8002558:	f7ff fde6 	bl	8002128 <MX_ADC_Init>
	MX_USART1_UART_Init();
 800255c:	f7ff fe1c 	bl	8002198 <MX_USART1_UART_Init>

	HAL_ADC_Start_DMA(&hadc, (uint32_t * )dma_adc_raw, NUM_ADC);
 8002560:	2202      	movs	r2, #2
 8002562:	4922      	ldr	r1, [pc, #136]	; (80025ec <main+0xa8>)
 8002564:	4822      	ldr	r0, [pc, #136]	; (80025f0 <main+0xac>)
 8002566:	f000 fa27 	bl	80029b8 <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	2201      	movs	r2, #1
 800256e:	0209      	lsls	r1, r1, #8
 8002570:	4820      	ldr	r0, [pc, #128]	; (80025f4 <main+0xb0>)
 8002572:	f000 fd8f 	bl	8003094 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002576:	20fa      	movs	r0, #250	; 0xfa
 8002578:	0080      	lsls	r0, r0, #2
 800257a:	f000 f95f 	bl	800283c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,0);
 800257e:	2180      	movs	r1, #128	; 0x80
 8002580:	2200      	movs	r2, #0
 8002582:	0209      	lsls	r1, r1, #8
 8002584:	481b      	ldr	r0, [pc, #108]	; (80025f4 <main+0xb0>)
 8002586:	f000 fd85 	bl	8003094 <HAL_GPIO_WritePin>

	floatsend_t theta;
	float prev_theta = 0.f;
 800258a:	2300      	movs	r3, #0

	uint32_t uart_disp_ts = 0;
 800258c:	2400      	movs	r4, #0
	while (1)
	{
		if(gl_adc_cplt_flag)
		{
			theta.v = unwrap(theta_abs_rad(),&prev_theta);
			gl_adc_cplt_flag = 0;
 800258e:	2600      	movs	r6, #0
 8002590:	4d19      	ldr	r5, [pc, #100]	; (80025f8 <main+0xb4>)
 8002592:	4f1a      	ldr	r7, [pc, #104]	; (80025fc <main+0xb8>)
	float prev_theta = 0.f;
 8002594:	9301      	str	r3, [sp, #4]
		if(gl_adc_cplt_flag)
 8002596:	782b      	ldrb	r3, [r5, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d115      	bne.n	80025c8 <main+0x84>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
		}

		if(HAL_GetTick() >= uart_disp_ts) //update frequency may be prone to jitters due to high calculation time of unwrap and atan2
 800259c:	f000 f948 	bl	8002830 <HAL_GetTick>
 80025a0:	42a0      	cmp	r0, r4
 80025a2:	d3f8      	bcc.n	8002596 <main+0x52>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	2201      	movs	r2, #1
 80025a8:	0209      	lsls	r1, r1, #8
 80025aa:	4812      	ldr	r0, [pc, #72]	; (80025f4 <main+0xb0>)
 80025ac:	f000 fd72 	bl	8003094 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, theta.d, 4, uart_update_period);
 80025b0:	2302      	movs	r3, #2
 80025b2:	2204      	movs	r2, #4
 80025b4:	4669      	mov	r1, sp
 80025b6:	0038      	movs	r0, r7
 80025b8:	f001 f952 	bl	8003860 <HAL_UART_Transmit>
			uart_disp_ts = HAL_GetTick()+uart_update_period;	//1 = 1khz, 2 = 500Hz, 3 = 333Hz
 80025bc:	f000 f938 	bl	8002830 <HAL_GetTick>
		if(gl_adc_cplt_flag)
 80025c0:	782b      	ldrb	r3, [r5, #0]
			uart_disp_ts = HAL_GetTick()+uart_update_period;	//1 = 1khz, 2 = 500Hz, 3 = 333Hz
 80025c2:	1c84      	adds	r4, r0, #2
		if(gl_adc_cplt_flag)
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0e9      	beq.n	800259c <main+0x58>
			theta.v = unwrap(theta_abs_rad(),&prev_theta);
 80025c8:	f7ff fe4a 	bl	8002260 <theta_abs_rad>
 80025cc:	a901      	add	r1, sp, #4
 80025ce:	f7ff fefd 	bl	80023cc <unwrap>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80025d2:	2180      	movs	r1, #128	; 0x80
			theta.v = unwrap(theta_abs_rad(),&prev_theta);
 80025d4:	9000      	str	r0, [sp, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	0209      	lsls	r1, r1, #8
 80025da:	4806      	ldr	r0, [pc, #24]	; (80025f4 <main+0xb0>)
			gl_adc_cplt_flag = 0;
 80025dc:	702e      	strb	r6, [r5, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80025de:	f000 fd59 	bl	8003094 <HAL_GPIO_WritePin>
		if(HAL_GetTick() >= uart_disp_ts) //update frequency may be prone to jitters due to high calculation time of unwrap and atan2
 80025e2:	f000 f925 	bl	8002830 <HAL_GetTick>
 80025e6:	4284      	cmp	r4, r0
 80025e8:	d8d5      	bhi.n	8002596 <main+0x52>
 80025ea:	e7db      	b.n	80025a4 <main+0x60>
 80025ec:	2000002c 	.word	0x2000002c
 80025f0:	200000f8 	.word	0x200000f8
 80025f4:	48000400 	.word	0x48000400
 80025f8:	20000030 	.word	0x20000030
 80025fc:	20000034 	.word	0x20000034

08002600 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002600:	2201      	movs	r2, #1
 8002602:	4b0a      	ldr	r3, [pc, #40]	; (800262c <HAL_MspInit+0x2c>)
{
 8002604:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002606:	6999      	ldr	r1, [r3, #24]
 8002608:	4311      	orrs	r1, r2
 800260a:	6199      	str	r1, [r3, #24]
 800260c:	6999      	ldr	r1, [r3, #24]
 800260e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002610:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002612:	9200      	str	r2, [sp, #0]
 8002614:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	69da      	ldr	r2, [r3, #28]
 8002618:	0549      	lsls	r1, r1, #21
 800261a:	430a      	orrs	r2, r1
 800261c:	61da      	str	r2, [r3, #28]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	400b      	ands	r3, r1
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002626:	b002      	add	sp, #8
 8002628:	4770      	bx	lr
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	40021000 	.word	0x40021000

08002630 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002630:	b530      	push	{r4, r5, lr}
 8002632:	0004      	movs	r4, r0
 8002634:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002636:	2214      	movs	r2, #20
 8002638:	2100      	movs	r1, #0
 800263a:	a803      	add	r0, sp, #12
 800263c:	f001 fbc8 	bl	8003dd0 <memset>
  if(hadc->Instance==ADC1)
 8002640:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_ADC_MspInit+0x88>)
 8002642:	6822      	ldr	r2, [r4, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002648:	b009      	add	sp, #36	; 0x24
 800264a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800264c:	2080      	movs	r0, #128	; 0x80
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_ADC_MspInit+0x8c>)
 8002650:	0080      	lsls	r0, r0, #2
 8002652:	6999      	ldr	r1, [r3, #24]
 8002654:	4301      	orrs	r1, r0
 8002656:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002658:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 800265a:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265c:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 800265e:	4002      	ands	r2, r0
 8002660:	9201      	str	r2, [sp, #4]
 8002662:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002664:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002666:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002668:	430a      	orrs	r2, r1
 800266a:	615a      	str	r2, [r3, #20]
 800266c:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002670:	400b      	ands	r3, r1
 8002672:	9302      	str	r3, [sp, #8]
 8002674:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002676:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002678:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800267a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800267c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267e:	f000 fc17 	bl	8002eb0 <HAL_GPIO_Init>
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002682:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8002684:	4d0e      	ldr	r5, [pc, #56]	; (80026c0 <HAL_ADC_MspInit+0x90>)
 8002686:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <HAL_ADC_MspInit+0x94>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002688:	60ea      	str	r2, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800268a:	3280      	adds	r2, #128	; 0x80
 800268c:	612a      	str	r2, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800268e:	2280      	movs	r2, #128	; 0x80
 8002690:	00d2      	lsls	r2, r2, #3
    hdma_adc.Instance = DMA1_Channel1;
 8002692:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002694:	616a      	str	r2, [r5, #20]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002696:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002698:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800269a:	0028      	movs	r0, r5
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800269c:	606b      	str	r3, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800269e:	60ab      	str	r3, [r5, #8]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80026a0:	61aa      	str	r2, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80026a2:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80026a4:	f000 fb42 	bl	8002d2c <HAL_DMA_Init>
 80026a8:	2800      	cmp	r0, #0
 80026aa:	d102      	bne.n	80026b2 <HAL_ADC_MspInit+0x82>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80026ac:	6325      	str	r5, [r4, #48]	; 0x30
 80026ae:	626c      	str	r4, [r5, #36]	; 0x24
}
 80026b0:	e7ca      	b.n	8002648 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80026b2:	f7ff fdd3 	bl	800225c <Error_Handler>
 80026b6:	e7f9      	b.n	80026ac <HAL_ADC_MspInit+0x7c>
 80026b8:	40012400 	.word	0x40012400
 80026bc:	40021000 	.word	0x40021000
 80026c0:	200000b4 	.word	0x200000b4
 80026c4:	40020008 	.word	0x40020008

080026c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026c8:	b510      	push	{r4, lr}
 80026ca:	0004      	movs	r4, r0
 80026cc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ce:	2214      	movs	r2, #20
 80026d0:	2100      	movs	r1, #0
 80026d2:	a803      	add	r0, sp, #12
 80026d4:	f001 fb7c 	bl	8003dd0 <memset>
  if(huart->Instance==USART1)
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <HAL_UART_MspInit+0x58>)
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026e0:	b008      	add	sp, #32
 80026e2:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80026e4:	2080      	movs	r0, #128	; 0x80
 80026e6:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <HAL_UART_MspInit+0x5c>)
 80026e8:	01c0      	lsls	r0, r0, #7
 80026ea:	6999      	ldr	r1, [r3, #24]
 80026ec:	4301      	orrs	r1, r0
 80026ee:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 80026f2:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f4:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_USART1_CLK_ENABLE();
 80026f6:	4002      	ands	r2, r0
 80026f8:	9201      	str	r2, [sp, #4]
 80026fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fc:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fe:	480a      	ldr	r0, [pc, #40]	; (8002728 <HAL_UART_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002700:	430a      	orrs	r2, r1
 8002702:	615a      	str	r2, [r3, #20]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	400b      	ands	r3, r1
 8002708:	9302      	str	r3, [sp, #8]
 800270a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800270c:	23c0      	movs	r3, #192	; 0xc0
 800270e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	3bbe      	subs	r3, #190	; 0xbe
 8002712:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002714:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002716:	3301      	adds	r3, #1
 8002718:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271a:	f000 fbc9 	bl	8002eb0 <HAL_GPIO_Init>
}
 800271e:	e7df      	b.n	80026e0 <HAL_UART_MspInit+0x18>
 8002720:	40013800 	.word	0x40013800
 8002724:	40021000 	.word	0x40021000
 8002728:	48000400 	.word	0x48000400

0800272c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800272c:	4770      	bx	lr
 800272e:	46c0      	nop			; (mov r8, r8)

08002730 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002730:	e7fe      	b.n	8002730 <HardFault_Handler>
 8002732:	46c0      	nop			; (mov r8, r8)

08002734 <SVC_Handler>:
 8002734:	4770      	bx	lr
 8002736:	46c0      	nop			; (mov r8, r8)

08002738 <PendSV_Handler>:
 8002738:	4770      	bx	lr
 800273a:	46c0      	nop			; (mov r8, r8)

0800273c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800273c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800273e:	f000 f86b 	bl	8002818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002742:	bd10      	pop	{r4, pc}

08002744 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002744:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002746:	4802      	ldr	r0, [pc, #8]	; (8002750 <DMA1_Channel1_IRQHandler+0xc>)
 8002748:	f000 fb64 	bl	8002e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800274c:	bd10      	pop	{r4, pc}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	200000b4 	.word	0x200000b4

08002754 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002754:	4770      	bx	lr
 8002756:	46c0      	nop			; (mov r8, r8)

08002758 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002758:	480d      	ldr	r0, [pc, #52]	; (8002790 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800275a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800275c:	480d      	ldr	r0, [pc, #52]	; (8002794 <LoopForever+0x6>)
  ldr r1, =_edata
 800275e:	490e      	ldr	r1, [pc, #56]	; (8002798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002760:	4a0e      	ldr	r2, [pc, #56]	; (800279c <LoopForever+0xe>)
  movs r3, #0
 8002762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002764:	e002      	b.n	800276c <LoopCopyDataInit>

08002766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276a:	3304      	adds	r3, #4

0800276c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800276c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002770:	d3f9      	bcc.n	8002766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002772:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002774:	4c0b      	ldr	r4, [pc, #44]	; (80027a4 <LoopForever+0x16>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002778:	e001      	b.n	800277e <LoopFillZerobss>

0800277a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800277c:	3204      	adds	r2, #4

0800277e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002780:	d3fb      	bcc.n	800277a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002782:	f7ff ffe7 	bl	8002754 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002786:	f001 faff 	bl	8003d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800278a:	f7ff fedb 	bl	8002544 <main>

0800278e <LoopForever>:

LoopForever:
    b LoopForever
 800278e:	e7fe      	b.n	800278e <LoopForever>
  ldr   r0, =_estack
 8002790:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002798:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800279c:	08003f3c 	.word	0x08003f3c
  ldr r2, =_sbss
 80027a0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80027a4:	2000013c 	.word	0x2000013c

080027a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027a8:	e7fe      	b.n	80027a8 <ADC1_IRQHandler>
	...

080027ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ac:	b510      	push	{r4, lr}
 80027ae:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027b0:	20fa      	movs	r0, #250	; 0xfa
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <HAL_InitTick+0x40>)
 80027b4:	0080      	lsls	r0, r0, #2
 80027b6:	7819      	ldrb	r1, [r3, #0]
 80027b8:	f7fd fca6 	bl	8000108 <__udivsi3>
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <HAL_InitTick+0x44>)
 80027be:	0001      	movs	r1, r0
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	f7fd fca1 	bl	8000108 <__udivsi3>
 80027c6:	f000 fa95 	bl	8002cf4 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027cc:	2800      	cmp	r0, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_InitTick+0x28>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027d0:	2c03      	cmp	r4, #3
 80027d2:	d901      	bls.n	80027d8 <HAL_InitTick+0x2c>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80027d4:	0018      	movs	r0, r3
 80027d6:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027d8:	2200      	movs	r2, #0
 80027da:	0021      	movs	r1, r4
 80027dc:	3801      	subs	r0, #1
 80027de:	f000 fa51 	bl	8002c84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027e2:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <HAL_InitTick+0x48>)
 80027e4:	601c      	str	r4, [r3, #0]
 80027e6:	2300      	movs	r3, #0
 80027e8:	e7f4      	b.n	80027d4 <HAL_InitTick+0x28>
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	20000008 	.word	0x20000008
 80027f0:	20000004 	.word	0x20000004
 80027f4:	2000000c 	.word	0x2000000c

080027f8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f8:	2110      	movs	r1, #16
 80027fa:	4a06      	ldr	r2, [pc, #24]	; (8002814 <HAL_Init+0x1c>)
{
 80027fc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027fe:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002800:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002802:	430b      	orrs	r3, r1
 8002804:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002806:	f7ff ffd1 	bl	80027ac <HAL_InitTick>
  HAL_MspInit();
 800280a:	f7ff fef9 	bl	8002600 <HAL_MspInit>
}
 800280e:	2000      	movs	r0, #0
 8002810:	bd10      	pop	{r4, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	40022000 	.word	0x40022000

08002818 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002818:	4a03      	ldr	r2, [pc, #12]	; (8002828 <HAL_IncTick+0x10>)
 800281a:	4b04      	ldr	r3, [pc, #16]	; (800282c <HAL_IncTick+0x14>)
 800281c:	6811      	ldr	r1, [r2, #0]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	185b      	adds	r3, r3, r1
 8002822:	6013      	str	r3, [r2, #0]
}
 8002824:	4770      	bx	lr
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	20000138 	.word	0x20000138
 800282c:	20000008 	.word	0x20000008

08002830 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002830:	4b01      	ldr	r3, [pc, #4]	; (8002838 <HAL_GetTick+0x8>)
 8002832:	6818      	ldr	r0, [r3, #0]
}
 8002834:	4770      	bx	lr
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	20000138 	.word	0x20000138

0800283c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002840:	f7ff fff6 	bl	8002830 <HAL_GetTick>
 8002844:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002846:	1c63      	adds	r3, r4, #1
 8002848:	d002      	beq.n	8002850 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800284a:	4b04      	ldr	r3, [pc, #16]	; (800285c <HAL_Delay+0x20>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002850:	f7ff ffee 	bl	8002830 <HAL_GetTick>
 8002854:	1b40      	subs	r0, r0, r5
 8002856:	42a0      	cmp	r0, r4
 8002858:	d3fa      	bcc.n	8002850 <HAL_Delay+0x14>
  {
  }
}
 800285a:	bd70      	pop	{r4, r5, r6, pc}
 800285c:	20000008 	.word	0x20000008

08002860 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	1e04      	subs	r4, r0, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
 8002864:	d100      	bne.n	8002868 <HAL_ADC_Init+0x8>
 8002866:	e076      	b.n	8002956 <HAL_ADC_Init+0xf6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002868:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800286a:	2b00      	cmp	r3, #0
 800286c:	d069      	beq.n	8002942 <HAL_ADC_Init+0xe2>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800286e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002870:	06db      	lsls	r3, r3, #27
 8002872:	d505      	bpl.n	8002880 <HAL_ADC_Init+0x20>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002874:	2210      	movs	r2, #16
        
    tmp_hal_status = HAL_ERROR;
 8002876:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002878:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800287a:	4313      	orrs	r3, r2
 800287c:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 800287e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002880:	2004      	movs	r0, #4
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002888:	d1f4      	bne.n	8002874 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800288a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800288c:	4947      	ldr	r1, [pc, #284]	; (80029ac <HAL_ADC_Init+0x14c>)
 800288e:	400a      	ands	r2, r1
 8002890:	3106      	adds	r1, #6
 8002892:	31ff      	adds	r1, #255	; 0xff
 8002894:	430a      	orrs	r2, r1
 8002896:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002898:	2203      	movs	r2, #3
 800289a:	6899      	ldr	r1, [r3, #8]
 800289c:	400a      	ands	r2, r1
 800289e:	2a01      	cmp	r2, #1
 80028a0:	d074      	beq.n	800298c <HAL_ADC_Init+0x12c>
      MODIFY_REG(hadc->Instance->CFGR1,
 80028a2:	2118      	movs	r1, #24
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	438a      	bics	r2, r1
 80028a8:	68a1      	ldr	r1, [r4, #8]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	6861      	ldr	r1, [r4, #4]
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	0892      	lsrs	r2, r2, #2
 80028b6:	430a      	orrs	r2, r1
 80028b8:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	493c      	ldr	r1, [pc, #240]	; (80029b0 <HAL_ADC_Init+0x150>)
 80028be:	400a      	ands	r2, r1
 80028c0:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028c2:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80028c4:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028c6:	0389      	lsls	r1, r1, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80028c8:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028ca:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80028cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80028ce:	7ea6      	ldrb	r6, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80028d0:	3a01      	subs	r2, #1
 80028d2:	1e55      	subs	r5, r2, #1
 80028d4:	41aa      	sbcs	r2, r5
 80028d6:	0315      	lsls	r5, r2, #12
 80028d8:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80028da:	0377      	lsls	r7, r6, #13
 80028dc:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80028de:	6922      	ldr	r2, [r4, #16]
 80028e0:	4339      	orrs	r1, r7
 80028e2:	2a02      	cmp	r2, #2
 80028e4:	d100      	bne.n	80028e8 <HAL_ADC_Init+0x88>
 80028e6:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80028e8:	2224      	movs	r2, #36	; 0x24
 80028ea:	5ca2      	ldrb	r2, [r4, r2]
 80028ec:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80028ee:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028f0:	7ee1      	ldrb	r1, [r4, #27]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80028f2:	432a      	orrs	r2, r5
 80028f4:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028f6:	2901      	cmp	r1, #1
 80028f8:	d042      	beq.n	8002980 <HAL_ADC_Init+0x120>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028fa:	20c2      	movs	r0, #194	; 0xc2
 80028fc:	69e1      	ldr	r1, [r4, #28]
 80028fe:	30ff      	adds	r0, #255	; 0xff
 8002900:	4281      	cmp	r1, r0
 8002902:	d002      	beq.n	800290a <HAL_ADC_Init+0xaa>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002904:	6a20      	ldr	r0, [r4, #32]
 8002906:	4301      	orrs	r1, r0
 8002908:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800290a:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800290c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800290e:	4311      	orrs	r1, r2
 8002910:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002912:	2180      	movs	r1, #128	; 0x80
 8002914:	0549      	lsls	r1, r1, #21
 8002916:	428d      	cmp	r5, r1
 8002918:	d01f      	beq.n	800295a <HAL_ADC_Init+0xfa>
 800291a:	1e69      	subs	r1, r5, #1
 800291c:	2906      	cmp	r1, #6
 800291e:	d91c      	bls.n	800295a <HAL_ADC_Init+0xfa>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4924      	ldr	r1, [pc, #144]	; (80029b4 <HAL_ADC_Init+0x154>)
 8002924:	400b      	ands	r3, r1
 8002926:	4293      	cmp	r3, r2
 8002928:	d020      	beq.n	800296c <HAL_ADC_Init+0x10c>
      ADC_STATE_CLR_SET(hadc->State,
 800292a:	2212      	movs	r2, #18
 800292c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      tmp_hal_status = HAL_ERROR;
 800292e:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002930:	4393      	bics	r3, r2
 8002932:	3a02      	subs	r2, #2
 8002934:	4313      	orrs	r3, r2
 8002936:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002938:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800293a:	3a0f      	subs	r2, #15
 800293c:	4313      	orrs	r3, r2
 800293e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002940:	e79d      	b.n	800287e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8002942:	2234      	movs	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8002944:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8002946:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8002948:	f7ff fe72 	bl	8002630 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800294c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800294e:	06db      	lsls	r3, r3, #27
 8002950:	d500      	bpl.n	8002954 <HAL_ADC_Init+0xf4>
 8002952:	e78f      	b.n	8002874 <HAL_ADC_Init+0x14>
 8002954:	e794      	b.n	8002880 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8002956:	2001      	movs	r0, #1
 8002958:	e791      	b.n	800287e <HAL_ADC_Init+0x1e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800295a:	2107      	movs	r1, #7
 800295c:	6958      	ldr	r0, [r3, #20]
 800295e:	4388      	bics	r0, r1
 8002960:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002962:	6958      	ldr	r0, [r3, #20]
 8002964:	4029      	ands	r1, r5
 8002966:	4301      	orrs	r1, r0
 8002968:	6159      	str	r1, [r3, #20]
 800296a:	e7d9      	b.n	8002920 <HAL_ADC_Init+0xc0>
      ADC_CLEAR_ERRORCODE(hadc);
 800296c:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 800296e:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8002970:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8002972:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002974:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002976:	4393      	bics	r3, r2
 8002978:	3a02      	subs	r2, #2
 800297a:	4313      	orrs	r3, r2
 800297c:	63a3      	str	r3, [r4, #56]	; 0x38
 800297e:	e77e      	b.n	800287e <HAL_ADC_Init+0x1e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002980:	2e00      	cmp	r6, #0
 8002982:	d10a      	bne.n	800299a <HAL_ADC_Init+0x13a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002984:	2180      	movs	r1, #128	; 0x80
 8002986:	0249      	lsls	r1, r1, #9
 8002988:	430a      	orrs	r2, r1
 800298a:	e7b6      	b.n	80028fa <HAL_ADC_Init+0x9a>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800298c:	6819      	ldr	r1, [r3, #0]
 800298e:	420a      	tst	r2, r1
 8002990:	d193      	bne.n	80028ba <HAL_ADC_Init+0x5a>
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	0412      	lsls	r2, r2, #16
 8002996:	d490      	bmi.n	80028ba <HAL_ADC_Init+0x5a>
 8002998:	e783      	b.n	80028a2 <HAL_ADC_Init+0x42>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800299a:	2520      	movs	r5, #32
 800299c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800299e:	4328      	orrs	r0, r5
 80029a0:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80029a4:	4301      	orrs	r1, r0
 80029a6:	63e1      	str	r1, [r4, #60]	; 0x3c
 80029a8:	e7a7      	b.n	80028fa <HAL_ADC_Init+0x9a>
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	fffffefd 	.word	0xfffffefd
 80029b0:	fffe0219 	.word	0xfffe0219
 80029b4:	833fffe7 	.word	0x833fffe7

080029b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80029b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ba:	46c6      	mov	lr, r8
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029bc:	2304      	movs	r3, #4
{
 80029be:	b500      	push	{lr}
 80029c0:	000d      	movs	r5, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029c2:	6801      	ldr	r1, [r0, #0]
{
 80029c4:	0016      	movs	r6, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029c6:	688a      	ldr	r2, [r1, #8]
{
 80029c8:	b082      	sub	sp, #8
 80029ca:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029cc:	4013      	ands	r3, r2
 80029ce:	d15f      	bne.n	8002a90 <HAL_ADC_Start_DMA+0xd8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029d0:	2234      	movs	r2, #52	; 0x34
 80029d2:	5c80      	ldrb	r0, [r0, r2]
 80029d4:	2801      	cmp	r0, #1
 80029d6:	d05b      	beq.n	8002a90 <HAL_ADC_Start_DMA+0xd8>
 80029d8:	2001      	movs	r0, #1
 80029da:	54a0      	strb	r0, [r4, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80029dc:	7e62      	ldrb	r2, [r4, #25]
 80029de:	2a01      	cmp	r2, #1
 80029e0:	d02b      	beq.n	8002a3a <HAL_ADC_Start_DMA+0x82>
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80029e2:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029e4:	688a      	ldr	r2, [r1, #8]
 80029e6:	3303      	adds	r3, #3
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d05c      	beq.n	8002aa8 <HAL_ADC_Start_DMA+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80029ee:	688a      	ldr	r2, [r1, #8]
 80029f0:	4b35      	ldr	r3, [pc, #212]	; (8002ac8 <HAL_ADC_Start_DMA+0x110>)
 80029f2:	421a      	tst	r2, r3
 80029f4:	d14e      	bne.n	8002a94 <HAL_ADC_Start_DMA+0xdc>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029f6:	2201      	movs	r2, #1
 80029f8:	688b      	ldr	r3, [r1, #8]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029fe:	4b33      	ldr	r3, [pc, #204]	; (8002acc <HAL_ADC_Start_DMA+0x114>)
 8002a00:	4933      	ldr	r1, [pc, #204]	; (8002ad0 <HAL_ADC_Start_DMA+0x118>)
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	f7fd fb80 	bl	8000108 <__udivsi3>
 8002a08:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8002a0a:	9b01      	ldr	r3, [sp, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_ADC_Start_DMA+0x64>
    {
      wait_loop_index--;
 8002a10:	9b01      	ldr	r3, [sp, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002a16:	9b01      	ldr	r3, [sp, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1f9      	bne.n	8002a10 <HAL_ADC_Start_DMA+0x58>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a1c:	f7ff ff08 	bl	8002830 <HAL_GetTick>
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a20:	2701      	movs	r7, #1
    tickstart = HAL_GetTick();
 8002a22:	4680      	mov	r8, r0
 8002a24:	e005      	b.n	8002a32 <HAL_ADC_Start_DMA+0x7a>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a26:	f7ff ff03 	bl	8002830 <HAL_GetTick>
 8002a2a:	4643      	mov	r3, r8
 8002a2c:	1ac0      	subs	r0, r0, r3
 8002a2e:	2802      	cmp	r0, #2
 8002a30:	d841      	bhi.n	8002ab6 <HAL_ADC_Start_DMA+0xfe>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a32:	6821      	ldr	r1, [r4, #0]
 8002a34:	680b      	ldr	r3, [r1, #0]
 8002a36:	421f      	tst	r7, r3
 8002a38:	d0f5      	beq.n	8002a26 <HAL_ADC_Start_DMA+0x6e>
      ADC_STATE_CLR_SET(hadc->State,
 8002a3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a3c:	4a25      	ldr	r2, [pc, #148]	; (8002ad4 <HAL_ADC_Start_DMA+0x11c>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a3e:	6b20      	ldr	r0, [r4, #48]	; 0x30
      ADC_STATE_CLR_SET(hadc->State,
 8002a40:	401a      	ands	r2, r3
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4313      	orrs	r3, r2
 8002a48:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 8002a4a:	2234      	movs	r2, #52	; 0x34
      ADC_CLEAR_ERRORCODE(hadc);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	63e3      	str	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8002a50:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a52:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <HAL_ADC_Start_DMA+0x120>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a54:	3a24      	subs	r2, #36	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a56:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a58:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_ADC_Start_DMA+0x124>)
 8002a5a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a5c:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <HAL_ADC_Start_DMA+0x128>)
 8002a5e:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a60:	231c      	movs	r3, #28
 8002a62:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a64:	684b      	ldr	r3, [r1, #4]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002a6a:	68cb      	ldr	r3, [r1, #12]
 8002a6c:	3a0f      	subs	r2, #15
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a72:	002a      	movs	r2, r5
 8002a74:	3140      	adds	r1, #64	; 0x40
 8002a76:	0033      	movs	r3, r6
 8002a78:	f000 f98c 	bl	8002d94 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002a7c:	2104      	movs	r1, #4
 8002a7e:	2000      	movs	r0, #0
 8002a80:	6822      	ldr	r2, [r4, #0]
 8002a82:	6893      	ldr	r3, [r2, #8]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	6093      	str	r3, [r2, #8]
}
 8002a88:	b002      	add	sp, #8
 8002a8a:	bc04      	pop	{r2}
 8002a8c:	4690      	mov	r8, r2
 8002a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 8002a90:	2002      	movs	r0, #2
 8002a92:	e7f9      	b.n	8002a88 <HAL_ADC_Start_DMA+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a94:	2210      	movs	r2, #16
 8002a96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8002a98:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002aa0:	3a0f      	subs	r2, #15
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002aa6:	e7ef      	b.n	8002a88 <HAL_ADC_Start_DMA+0xd0>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002aa8:	680a      	ldr	r2, [r1, #0]
 8002aaa:	4213      	tst	r3, r2
 8002aac:	d1c5      	bne.n	8002a3a <HAL_ADC_Start_DMA+0x82>
 8002aae:	68cb      	ldr	r3, [r1, #12]
 8002ab0:	041b      	lsls	r3, r3, #16
 8002ab2:	d59c      	bpl.n	80029ee <HAL_ADC_Start_DMA+0x36>
 8002ab4:	e7c1      	b.n	8002a3a <HAL_ADC_Start_DMA+0x82>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab6:	2210      	movs	r2, #16
 8002ab8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
        return HAL_ERROR;
 8002aba:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002abc:	4313      	orrs	r3, r2
 8002abe:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ac2:	431f      	orrs	r7, r3
 8002ac4:	63e7      	str	r7, [r4, #60]	; 0x3c
 8002ac6:	e7df      	b.n	8002a88 <HAL_ADC_Start_DMA+0xd0>
 8002ac8:	80000017 	.word	0x80000017
 8002acc:	20000004 	.word	0x20000004
 8002ad0:	000f4240 	.word	0x000f4240
 8002ad4:	fffff0fe 	.word	0xfffff0fe
 8002ad8:	08002ae5 	.word	0x08002ae5
 8002adc:	08002b59 	.word	0x08002b59
 8002ae0:	08002b69 	.word	0x08002b69

08002ae4 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ae4:	2150      	movs	r1, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ae6:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002ae8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aec:	4211      	tst	r1, r2
 8002aee:	d003      	beq.n	8002af8 <ADC_DMAConvCplt+0x14>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	4798      	blx	r3
  }

}
 8002af6:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002af8:	2280      	movs	r2, #128	; 0x80
 8002afa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002afc:	0092      	lsls	r2, r2, #2
 8002afe:	430a      	orrs	r2, r1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b00:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002b02:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	0109      	lsls	r1, r1, #4
 8002b08:	68d0      	ldr	r0, [r2, #12]
 8002b0a:	4208      	tst	r0, r1
 8002b0c:	d113      	bne.n	8002b36 <ADC_DMAConvCplt+0x52>
 8002b0e:	7e99      	ldrb	r1, [r3, #26]
 8002b10:	2900      	cmp	r1, #0
 8002b12:	d110      	bne.n	8002b36 <ADC_DMAConvCplt+0x52>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002b14:	6811      	ldr	r1, [r2, #0]
 8002b16:	0709      	lsls	r1, r1, #28
 8002b18:	d50d      	bpl.n	8002b36 <ADC_DMAConvCplt+0x52>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b1a:	6891      	ldr	r1, [r2, #8]
 8002b1c:	0749      	lsls	r1, r1, #29
 8002b1e:	d40e      	bmi.n	8002b3e <ADC_DMAConvCplt+0x5a>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b20:	200c      	movs	r0, #12
 8002b22:	6851      	ldr	r1, [r2, #4]
 8002b24:	4381      	bics	r1, r0
 8002b26:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b2a:	4909      	ldr	r1, [pc, #36]	; (8002b50 <ADC_DMAConvCplt+0x6c>)
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	3104      	adds	r1, #4
 8002b30:	31ff      	adds	r1, #255	; 0xff
 8002b32:	430a      	orrs	r2, r1
 8002b34:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_ADC_ConvCpltCallback(hadc);
 8002b36:	0018      	movs	r0, r3
 8002b38:	f7ff fcfe 	bl	8002538 <HAL_ADC_ConvCpltCallback>
 8002b3c:	e7db      	b.n	8002af6 <ADC_DMAConvCplt+0x12>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b3e:	2120      	movs	r1, #32
 8002b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b42:	430a      	orrs	r2, r1
 8002b44:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b48:	391f      	subs	r1, #31
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b4e:	e7f2      	b.n	8002b36 <ADC_DMAConvCplt+0x52>
 8002b50:	fffffefe 	.word	0xfffffefe

08002b54 <HAL_ADC_ConvHalfCpltCallback>:
 8002b54:	4770      	bx	lr
 8002b56:	46c0      	nop			; (mov r8, r8)

08002b58 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b58:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002b5a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002b5c:	f7ff fffa 	bl	8002b54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b60:	bd10      	pop	{r4, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)

08002b64 <HAL_ADC_ErrorCallback>:
 8002b64:	4770      	bx	lr
 8002b66:	46c0      	nop			; (mov r8, r8)

08002b68 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b68:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b6a:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002b6c:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002b70:	4313      	orrs	r3, r2
 8002b72:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b74:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002b76:	3a3c      	subs	r2, #60	; 0x3c
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002b7c:	f7ff fff2 	bl	8002b64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b80:	bd10      	pop	{r4, pc}
 8002b82:	46c0      	nop			; (mov r8, r8)

08002b84 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8002b84:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8002b86:	2234      	movs	r2, #52	; 0x34
{
 8002b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002b8c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002b8e:	5c83      	ldrb	r3, [r0, r2]
{
 8002b90:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d03e      	beq.n	8002c14 <HAL_ADC_ConfigChannel+0x90>
 8002b96:	2301      	movs	r3, #1
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002b98:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8002b9a:	5483      	strb	r3, [r0, r2]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b9c:	6802      	ldr	r2, [r0, #0]
 8002b9e:	6890      	ldr	r0, [r2, #8]
 8002ba0:	0740      	lsls	r0, r0, #29
 8002ba2:	d509      	bpl.n	8002bb8 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba4:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 8002ba6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002baa:	4313      	orrs	r3, r2
 8002bac:	63a3      	str	r3, [r4, #56]	; 0x38
  __HAL_UNLOCK(hadc);
 8002bae:	2334      	movs	r3, #52	; 0x34
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	54e2      	strb	r2, [r4, r3]
}
 8002bb4:	b003      	add	sp, #12
 8002bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bb8:	680e      	ldr	r6, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8002bba:	4f2d      	ldr	r7, [pc, #180]	; (8002c70 <HAL_ADC_ConfigChannel+0xec>)
 8002bbc:	0030      	movs	r0, r6
 8002bbe:	46bc      	mov	ip, r7
 8002bc0:	684f      	ldr	r7, [r1, #4]
 8002bc2:	40b3      	lsls	r3, r6
 8002bc4:	3810      	subs	r0, #16
 8002bc6:	4567      	cmp	r7, ip
 8002bc8:	d026      	beq.n	8002c18 <HAL_ADC_ConfigChannel+0x94>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002bca:	6a97      	ldr	r7, [r2, #40]	; 0x28
 8002bcc:	433b      	orrs	r3, r7
 8002bce:	6293      	str	r3, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	055b      	lsls	r3, r3, #21
 8002bd4:	429d      	cmp	r5, r3
 8002bd6:	d00f      	beq.n	8002bf8 <HAL_ADC_ConfigChannel+0x74>
 8002bd8:	3d01      	subs	r5, #1
 8002bda:	2d06      	cmp	r5, #6
 8002bdc:	d90c      	bls.n	8002bf8 <HAL_ADC_ConfigChannel+0x74>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002bde:	2307      	movs	r3, #7
 8002be0:	688d      	ldr	r5, [r1, #8]
 8002be2:	6951      	ldr	r1, [r2, #20]
 8002be4:	4019      	ands	r1, r3
 8002be6:	428d      	cmp	r5, r1
 8002be8:	d006      	beq.n	8002bf8 <HAL_ADC_ConfigChannel+0x74>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002bea:	6951      	ldr	r1, [r2, #20]
 8002bec:	4399      	bics	r1, r3
 8002bee:	6151      	str	r1, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002bf0:	6951      	ldr	r1, [r2, #20]
 8002bf2:	402b      	ands	r3, r5
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bf8:	2801      	cmp	r0, #1
 8002bfa:	d901      	bls.n	8002c00 <HAL_ADC_ConfigChannel+0x7c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	e7d6      	b.n	8002bae <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002c00:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <HAL_ADC_ConfigChannel+0xf0>)
 8002c02:	2280      	movs	r2, #128	; 0x80
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	2e10      	cmp	r6, #16
 8002c08:	d01a      	beq.n	8002c40 <HAL_ADC_ConfigChannel+0xbc>
 8002c0a:	03d2      	lsls	r2, r2, #15
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c10:	2000      	movs	r0, #0
 8002c12:	e7cc      	b.n	8002bae <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 8002c14:	2002      	movs	r0, #2
 8002c16:	e7cd      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x30>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002c18:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c1a:	4399      	bics	r1, r3
 8002c1c:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c1e:	2801      	cmp	r0, #1
 8002c20:	d8ec      	bhi.n	8002bfc <HAL_ADC_ConfigChannel+0x78>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002c22:	1e41      	subs	r1, r0, #1
 8002c24:	4188      	sbcs	r0, r1
 8002c26:	2180      	movs	r1, #128	; 0x80
 8002c28:	4240      	negs	r0, r0
 8002c2a:	03c9      	lsls	r1, r1, #15
 8002c2c:	4008      	ands	r0, r1
 8002c2e:	4912      	ldr	r1, [pc, #72]	; (8002c78 <HAL_ADC_ConfigChannel+0xf4>)
 8002c30:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <HAL_ADC_ConfigChannel+0xf0>)
 8002c32:	468c      	mov	ip, r1
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4460      	add	r0, ip
 8002c38:	4010      	ands	r0, r2
 8002c3a:	6018      	str	r0, [r3, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	e7b6      	b.n	8002bae <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002c40:	0412      	lsls	r2, r2, #16
 8002c42:	430a      	orrs	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <HAL_ADC_ConfigChannel+0xf8>)
 8002c48:	490d      	ldr	r1, [pc, #52]	; (8002c80 <HAL_ADC_ConfigChannel+0xfc>)
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	f7fd fa5c 	bl	8000108 <__udivsi3>
 8002c50:	0083      	lsls	r3, r0, #2
 8002c52:	1818      	adds	r0, r3, r0
 8002c54:	0040      	lsls	r0, r0, #1
 8002c56:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8002c58:	9b01      	ldr	r3, [sp, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0ce      	beq.n	8002bfc <HAL_ADC_ConfigChannel+0x78>
            wait_loop_index--;
 8002c5e:	9b01      	ldr	r3, [sp, #4]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002c64:	9b01      	ldr	r3, [sp, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f9      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0xda>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	e79f      	b.n	8002bae <HAL_ADC_ConfigChannel+0x2a>
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	00001001 	.word	0x00001001
 8002c74:	40012708 	.word	0x40012708
 8002c78:	ff7fffff 	.word	0xff7fffff
 8002c7c:	20000004 	.word	0x20000004
 8002c80:	000f4240 	.word	0x000f4240

08002c84 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c84:	22ff      	movs	r2, #255	; 0xff
 8002c86:	2303      	movs	r3, #3
 8002c88:	b530      	push	{r4, r5, lr}
 8002c8a:	0014      	movs	r4, r2
 8002c8c:	b2c5      	uxtb	r5, r0
 8002c8e:	402b      	ands	r3, r5
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	409c      	lsls	r4, r3
 8002c94:	0189      	lsls	r1, r1, #6
 8002c96:	400a      	ands	r2, r1
 8002c98:	43e4      	mvns	r4, r4
 8002c9a:	409a      	lsls	r2, r3
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	db0b      	blt.n	8002cb8 <HAL_NVIC_SetPriority+0x34>
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <HAL_NVIC_SetPriority+0x50>)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ca2:	0880      	lsrs	r0, r0, #2
 8002ca4:	469c      	mov	ip, r3
 8002ca6:	23c0      	movs	r3, #192	; 0xc0
 8002ca8:	0080      	lsls	r0, r0, #2
 8002caa:	4460      	add	r0, ip
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	58c1      	ldr	r1, [r0, r3]
 8002cb0:	400c      	ands	r4, r1
 8002cb2:	4322      	orrs	r2, r4
 8002cb4:	50c2      	str	r2, [r0, r3]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002cb6:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cb8:	230f      	movs	r3, #15
 8002cba:	4907      	ldr	r1, [pc, #28]	; (8002cd8 <HAL_NVIC_SetPriority+0x54>)
 8002cbc:	402b      	ands	r3, r5
 8002cbe:	468c      	mov	ip, r1
 8002cc0:	3b08      	subs	r3, #8
 8002cc2:	089b      	lsrs	r3, r3, #2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4463      	add	r3, ip
 8002cc8:	69d9      	ldr	r1, [r3, #28]
 8002cca:	400c      	ands	r4, r1
 8002ccc:	4322      	orrs	r2, r4
 8002cce:	61da      	str	r2, [r3, #28]
 8002cd0:	e7f1      	b.n	8002cb6 <HAL_NVIC_SetPriority+0x32>
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	e000e100 	.word	0xe000e100
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002cdc:	2800      	cmp	r0, #0
 8002cde:	db05      	blt.n	8002cec <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce0:	231f      	movs	r3, #31
 8002ce2:	4018      	ands	r0, r3
 8002ce4:	3b1e      	subs	r3, #30
 8002ce6:	4083      	lsls	r3, r0
 8002ce8:	4a01      	ldr	r2, [pc, #4]	; (8002cf0 <HAL_NVIC_EnableIRQ+0x14>)
 8002cea:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002cec:	4770      	bx	lr
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	e000e100 	.word	0xe000e100

08002cf4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf4:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <HAL_SYSTICK_Config+0x2c>)
 8002cf6:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cf8:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d80e      	bhi.n	8002d1c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cfe:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d00:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d02:	4809      	ldr	r0, [pc, #36]	; (8002d28 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d04:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d06:	6a03      	ldr	r3, [r0, #32]
 8002d08:	0609      	lsls	r1, r1, #24
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d12:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d14:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d16:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d18:	3307      	adds	r3, #7
 8002d1a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002d1c:	4770      	bx	lr
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	00ffffff 	.word	0x00ffffff
 8002d24:	e000e010 	.word	0xe000e010
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002d30:	d027      	beq.n	8002d82 <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d32:	2521      	movs	r5, #33	; 0x21
 8002d34:	2302      	movs	r3, #2
 8002d36:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d38:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d3a:	4a13      	ldr	r2, [pc, #76]	; (8002d88 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8002d3c:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d3e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d40:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8002d42:	6863      	ldr	r3, [r4, #4]
 8002d44:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d46:	68e1      	ldr	r1, [r4, #12]
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	6921      	ldr	r1, [r4, #16]
 8002d4c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4e:	6961      	ldr	r1, [r4, #20]
 8002d50:	430b      	orrs	r3, r1
 8002d52:	69a1      	ldr	r1, [r4, #24]
 8002d54:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d56:	69e1      	ldr	r1, [r4, #28]
 8002d58:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8002d5a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002d5c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_DMA_Init+0x60>)
 8002d60:	2114      	movs	r1, #20
 8002d62:	469c      	mov	ip, r3
 8002d64:	4460      	add	r0, ip
 8002d66:	f7fd f9cf 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8002d6c:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8002d6e:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d70:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d72:	0080      	lsls	r0, r0, #2
 8002d74:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8002d76:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d78:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002d7a:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8002d7c:	321f      	adds	r2, #31
 8002d7e:	54a3      	strb	r3, [r4, r2]
}  
 8002d80:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002d82:	2001      	movs	r0, #1
 8002d84:	e7fc      	b.n	8002d80 <HAL_DMA_Init+0x54>
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	ffffc00f 	.word	0xffffc00f
 8002d8c:	bffdfff8 	.word	0xbffdfff8
 8002d90:	40020000 	.word	0x40020000

08002d94 <HAL_DMA_Start_IT>:
{
 8002d94:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8002d96:	2520      	movs	r5, #32
 8002d98:	5d44      	ldrb	r4, [r0, r5]
 8002d9a:	2c01      	cmp	r4, #1
 8002d9c:	d029      	beq.n	8002df2 <HAL_DMA_Start_IT+0x5e>
 8002d9e:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002da0:	2621      	movs	r6, #33	; 0x21
  __HAL_LOCK(hdma);
 8002da2:	5544      	strb	r4, [r0, r5]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002da4:	5d84      	ldrb	r4, [r0, r6]
 8002da6:	b2e4      	uxtb	r4, r4
 8002da8:	2c01      	cmp	r4, #1
 8002daa:	d11e      	bne.n	8002dea <HAL_DMA_Start_IT+0x56>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002dac:	3d1e      	subs	r5, #30
 8002dae:	5585      	strb	r5, [r0, r6]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db0:	2500      	movs	r5, #0
 8002db2:	6385      	str	r5, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002db4:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002db6:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002db8:	682e      	ldr	r6, [r5, #0]
 8002dba:	43a6      	bics	r6, r4
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002dbc:	40bc      	lsls	r4, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002dbe:	602e      	str	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002dc0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8002dc2:	6074      	str	r4, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8002dc4:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dc6:	6843      	ldr	r3, [r0, #4]
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d014      	beq.n	8002df6 <HAL_DMA_Start_IT+0x62>
    if(NULL != hdma->XferHalfCpltCallback )
 8002dcc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = SrcAddress;
 8002dce:	60a9      	str	r1, [r5, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dd0:	60ea      	str	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d014      	beq.n	8002e00 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002dd6:	220e      	movs	r2, #14
 8002dd8:	682b      	ldr	r3, [r5, #0]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	602b      	str	r3, [r5, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002dde:	2201      	movs	r2, #1
	HAL_StatusTypeDef status = HAL_OK;
 8002de0:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002de2:	682b      	ldr	r3, [r5, #0]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	602b      	str	r3, [r5, #0]
} 
 8002de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hdma); 
 8002dea:	2300      	movs	r3, #0
 8002dec:	5543      	strb	r3, [r0, r5]
    status = HAL_BUSY;
 8002dee:	2002      	movs	r0, #2
 8002df0:	e7fa      	b.n	8002de8 <HAL_DMA_Start_IT+0x54>
  __HAL_LOCK(hdma);
 8002df2:	2002      	movs	r0, #2
 8002df4:	e7f8      	b.n	8002de8 <HAL_DMA_Start_IT+0x54>
    if(NULL != hdma->XferHalfCpltCallback )
 8002df6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8002df8:	60aa      	str	r2, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002dfa:	60e9      	str	r1, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1ea      	bne.n	8002dd6 <HAL_DMA_Start_IT+0x42>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002e00:	220a      	movs	r2, #10
 8002e02:	682b      	ldr	r3, [r5, #0]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	602b      	str	r3, [r5, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e08:	682b      	ldr	r3, [r5, #0]
 8002e0a:	3a06      	subs	r2, #6
 8002e0c:	4393      	bics	r3, r2
 8002e0e:	602b      	str	r3, [r5, #0]
 8002e10:	e7e5      	b.n	8002dde <HAL_DMA_Start_IT+0x4a>
 8002e12:	46c0      	nop			; (mov r8, r8)

08002e14 <HAL_DMA_IRQHandler>:
{
 8002e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002e16:	2404      	movs	r4, #4
 8002e18:	0026      	movs	r6, r4
 8002e1a:	6c03      	ldr	r3, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e1c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002e1e:	409e      	lsls	r6, r3
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e20:	682a      	ldr	r2, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002e22:	6801      	ldr	r1, [r0, #0]
 8002e24:	680f      	ldr	r7, [r1, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002e26:	4232      	tst	r2, r6
 8002e28:	d00d      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x32>
 8002e2a:	423c      	tst	r4, r7
 8002e2c:	d00b      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e2e:	680b      	ldr	r3, [r1, #0]
 8002e30:	069b      	lsls	r3, r3, #26
 8002e32:	d402      	bmi.n	8002e3a <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e34:	680b      	ldr	r3, [r1, #0]
 8002e36:	43a3      	bics	r3, r4
 8002e38:	600b      	str	r3, [r1, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002e3a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002e3c:	606e      	str	r6, [r5, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d000      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8002e42:	4798      	blx	r3
}  
 8002e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002e46:	2402      	movs	r4, #2
 8002e48:	0026      	movs	r6, r4
 8002e4a:	409e      	lsls	r6, r3
 8002e4c:	4232      	tst	r2, r6
 8002e4e:	d014      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x66>
 8002e50:	423c      	tst	r4, r7
 8002e52:	d012      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e54:	680b      	ldr	r3, [r1, #0]
 8002e56:	069b      	lsls	r3, r3, #26
 8002e58:	d406      	bmi.n	8002e68 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002e5a:	220a      	movs	r2, #10
 8002e5c:	680b      	ldr	r3, [r1, #0]
 8002e5e:	4393      	bics	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8002e62:	2321      	movs	r3, #33	; 0x21
 8002e64:	3a09      	subs	r2, #9
 8002e66:	54c2      	strb	r2, [r0, r3]
  	__HAL_UNLOCK(hdma);
 8002e68:	2320      	movs	r3, #32
 8002e6a:	2200      	movs	r2, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002e6c:	606e      	str	r6, [r5, #4]
  	__HAL_UNLOCK(hdma);
 8002e6e:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8002e70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0e6      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8002e76:	4798      	blx	r3
 8002e78:	e7e4      	b.n	8002e44 <HAL_DMA_IRQHandler+0x30>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e7a:	2408      	movs	r4, #8
 8002e7c:	0026      	movs	r6, r4
 8002e7e:	409e      	lsls	r6, r3
 8002e80:	4232      	tst	r2, r6
 8002e82:	d0df      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x30>
 8002e84:	423c      	tst	r4, r7
 8002e86:	d0dd      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e88:	680a      	ldr	r2, [r1, #0]
 8002e8a:	3406      	adds	r4, #6
 8002e8c:	43a2      	bics	r2, r4
 8002e8e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e90:	2201      	movs	r2, #1
 8002e92:	0011      	movs	r1, r2
 8002e94:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;    
 8002e96:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e98:	6069      	str	r1, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e9a:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8002e9c:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma); 
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8002ea4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0cc      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8002eaa:	4798      	blx	r3
 8002eac:	e7ca      	b.n	8002e44 <HAL_DMA_IRQHandler+0x30>
 8002eae:	46c0      	nop			; (mov r8, r8)

08002eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eb2:	464e      	mov	r6, r9
 8002eb4:	46de      	mov	lr, fp
 8002eb6:	4657      	mov	r7, sl
 8002eb8:	4645      	mov	r5, r8
 8002eba:	b5e0      	push	{r5, r6, r7, lr}
 8002ebc:	4689      	mov	r9, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ebe:	6809      	ldr	r1, [r1, #0]
{ 
 8002ec0:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ec2:	2900      	cmp	r1, #0
 8002ec4:	d100      	bne.n	8002ec8 <HAL_GPIO_Init+0x18>
 8002ec6:	e07e      	b.n	8002fc6 <HAL_GPIO_Init+0x116>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec8:	4b6c      	ldr	r3, [pc, #432]	; (800307c <HAL_GPIO_Init+0x1cc>)
  uint32_t position = 0x00u;
 8002eca:	2200      	movs	r2, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ecc:	469b      	mov	fp, r3
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ece:	4b6c      	ldr	r3, [pc, #432]	; (8003080 <HAL_GPIO_Init+0x1d0>)
 8002ed0:	468a      	mov	sl, r1
 8002ed2:	4698      	mov	r8, r3
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ed4:	2501      	movs	r5, #1
 8002ed6:	4654      	mov	r4, sl
 8002ed8:	4095      	lsls	r5, r2
 8002eda:	402c      	ands	r4, r5
 8002edc:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8002ede:	d06e      	beq.n	8002fbe <HAL_GPIO_Init+0x10e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ee0:	464b      	mov	r3, r9
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	000f      	movs	r7, r1
 8002ee8:	439f      	bics	r7, r3
 8002eea:	9701      	str	r7, [sp, #4]
 8002eec:	2f02      	cmp	r7, #2
 8002eee:	d100      	bne.n	8002ef2 <HAL_GPIO_Init+0x42>
 8002ef0:	e070      	b.n	8002fd4 <HAL_GPIO_Init+0x124>
      temp = GPIOx->MODER;
 8002ef2:	6803      	ldr	r3, [r0, #0]
 8002ef4:	0056      	lsls	r6, r2, #1
 8002ef6:	469c      	mov	ip, r3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ef8:	2303      	movs	r3, #3
 8002efa:	40b3      	lsls	r3, r6
 8002efc:	4664      	mov	r4, ip
 8002efe:	43db      	mvns	r3, r3
 8002f00:	401c      	ands	r4, r3
 8002f02:	0027      	movs	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f04:	2403      	movs	r4, #3
 8002f06:	400c      	ands	r4, r1
 8002f08:	40b4      	lsls	r4, r6
 8002f0a:	46a4      	mov	ip, r4
 8002f0c:	003c      	movs	r4, r7
 8002f0e:	4667      	mov	r7, ip
 8002f10:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f12:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 8002f14:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f16:	3f01      	subs	r7, #1
 8002f18:	2f01      	cmp	r7, #1
 8002f1a:	d800      	bhi.n	8002f1e <HAL_GPIO_Init+0x6e>
 8002f1c:	e077      	b.n	800300e <HAL_GPIO_Init+0x15e>
      temp = GPIOx->PUPDR;
 8002f1e:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f20:	402b      	ands	r3, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f22:	464d      	mov	r5, r9
 8002f24:	68ad      	ldr	r5, [r5, #8]
 8002f26:	40b5      	lsls	r5, r6
 8002f28:	432b      	orrs	r3, r5
      GPIOx->PUPDR = temp;
 8002f2a:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	055b      	lsls	r3, r3, #21
 8002f30:	4219      	tst	r1, r3
 8002f32:	d044      	beq.n	8002fbe <HAL_GPIO_Init+0x10e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f34:	465b      	mov	r3, fp
 8002f36:	2401      	movs	r4, #1
 8002f38:	465d      	mov	r5, fp
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f3a:	2603      	movs	r6, #3
 8002f3c:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3e:	699b      	ldr	r3, [r3, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f40:	4016      	ands	r6, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f42:	4323      	orrs	r3, r4
 8002f44:	61ab      	str	r3, [r5, #24]
 8002f46:	69ab      	ldr	r3, [r5, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f48:	00b6      	lsls	r6, r6, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4a:	4023      	ands	r3, r4
 8002f4c:	4c4d      	ldr	r4, [pc, #308]	; (8003084 <HAL_GPIO_Init+0x1d4>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f4e:	40b7      	lsls	r7, r6
 8002f50:	46a4      	mov	ip, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f52:	2490      	movs	r4, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f54:	9303      	str	r3, [sp, #12]
 8002f56:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002f58:	0893      	lsrs	r3, r2, #2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4463      	add	r3, ip
 8002f5e:	689d      	ldr	r5, [r3, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f60:	05e4      	lsls	r4, r4, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f62:	43bd      	bics	r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f64:	42a0      	cmp	r0, r4
 8002f66:	d00e      	beq.n	8002f86 <HAL_GPIO_Init+0xd6>
 8002f68:	4f47      	ldr	r7, [pc, #284]	; (8003088 <HAL_GPIO_Init+0x1d8>)
 8002f6a:	42b8      	cmp	r0, r7
 8002f6c:	d100      	bne.n	8002f70 <HAL_GPIO_Init+0xc0>
 8002f6e:	e07c      	b.n	800306a <HAL_GPIO_Init+0x1ba>
 8002f70:	4f46      	ldr	r7, [pc, #280]	; (800308c <HAL_GPIO_Init+0x1dc>)
 8002f72:	42b8      	cmp	r0, r7
 8002f74:	d100      	bne.n	8002f78 <HAL_GPIO_Init+0xc8>
 8002f76:	e074      	b.n	8003062 <HAL_GPIO_Init+0x1b2>
 8002f78:	4f45      	ldr	r7, [pc, #276]	; (8003090 <HAL_GPIO_Init+0x1e0>)
 8002f7a:	42b8      	cmp	r0, r7
 8002f7c:	d100      	bne.n	8002f80 <HAL_GPIO_Init+0xd0>
 8002f7e:	e078      	b.n	8003072 <HAL_GPIO_Init+0x1c2>
 8002f80:	2705      	movs	r7, #5
 8002f82:	40b7      	lsls	r7, r6
 8002f84:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f86:	609d      	str	r5, [r3, #8]
        temp = EXTI->IMR;
 8002f88:	4643      	mov	r3, r8
        temp &= ~(iocurrent);
 8002f8a:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8002f8c:	681b      	ldr	r3, [r3, #0]
        temp &= ~(iocurrent);
 8002f8e:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f90:	03cc      	lsls	r4, r1, #15
 8002f92:	d44e      	bmi.n	8003032 <HAL_GPIO_Init+0x182>
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8002f94:	4644      	mov	r4, r8
        temp &= ~(iocurrent);
 8002f96:	402b      	ands	r3, r5
        EXTI->IMR = temp;
 8002f98:	6023      	str	r3, [r4, #0]

        temp = EXTI->EMR;
 8002f9a:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f9c:	038c      	lsls	r4, r1, #14
 8002f9e:	d44f      	bmi.n	8003040 <HAL_GPIO_Init+0x190>
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002fa0:	4644      	mov	r4, r8
        temp &= ~(iocurrent);
 8002fa2:	402b      	ands	r3, r5
        EXTI->EMR = temp;
 8002fa4:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fa6:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fa8:	02cc      	lsls	r4, r1, #11
 8002faa:	d450      	bmi.n	800304e <HAL_GPIO_Init+0x19e>
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8002fac:	4644      	mov	r4, r8
        temp &= ~(iocurrent);
 8002fae:	402b      	ands	r3, r5
        EXTI->RTSR = temp;
 8002fb0:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 8002fb2:	68e3      	ldr	r3, [r4, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fb4:	0289      	lsls	r1, r1, #10
 8002fb6:	d451      	bmi.n	800305c <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 8002fb8:	402b      	ands	r3, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8002fba:	4641      	mov	r1, r8
 8002fbc:	60cb      	str	r3, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fbe:	4653      	mov	r3, sl
      }
    }

    position++;
 8002fc0:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc2:	40d3      	lsrs	r3, r2
 8002fc4:	d186      	bne.n	8002ed4 <HAL_GPIO_Init+0x24>
  } 
}
 8002fc6:	b005      	add	sp, #20
 8002fc8:	bc3c      	pop	{r2, r3, r4, r5}
 8002fca:	4690      	mov	r8, r2
 8002fcc:	4699      	mov	r9, r3
 8002fce:	46a2      	mov	sl, r4
 8002fd0:	46ab      	mov	fp, r5
 8002fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fd4:	2607      	movs	r6, #7
 8002fd6:	240f      	movs	r4, #15
 8002fd8:	4016      	ands	r6, r2
 8002fda:	00b6      	lsls	r6, r6, #2
 8002fdc:	40b4      	lsls	r4, r6
        temp = GPIOx->AFR[position >> 3u];
 8002fde:	08d3      	lsrs	r3, r2, #3
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	18c3      	adds	r3, r0, r3
 8002fe4:	6a1f      	ldr	r7, [r3, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fe6:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fe8:	464c      	mov	r4, r9
 8002fea:	6924      	ldr	r4, [r4, #16]
 8002fec:	40b4      	lsls	r4, r6
 8002fee:	0026      	movs	r6, r4
 8002ff0:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3u] = temp;
 8002ff2:	621e      	str	r6, [r3, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	0056      	lsls	r6, r2, #1
 8002ff8:	40b3      	lsls	r3, r6
 8002ffa:	43db      	mvns	r3, r3
      temp = GPIOx->MODER;
 8002ffc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ffe:	401f      	ands	r7, r3
 8003000:	46bc      	mov	ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003002:	2703      	movs	r7, #3
 8003004:	400f      	ands	r7, r1
 8003006:	40b7      	lsls	r7, r6
 8003008:	4664      	mov	r4, ip
 800300a:	4327      	orrs	r7, r4
      GPIOx->MODER = temp;
 800300c:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR;
 800300e:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003010:	464c      	mov	r4, r9
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003012:	401f      	ands	r7, r3
 8003014:	46bc      	mov	ip, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003016:	68e7      	ldr	r7, [r4, #12]
 8003018:	4664      	mov	r4, ip
 800301a:	40b7      	lsls	r7, r6
 800301c:	4327      	orrs	r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800301e:	2401      	movs	r4, #1
        GPIOx->OSPEEDR = temp;
 8003020:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003022:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003024:	43af      	bics	r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003026:	090d      	lsrs	r5, r1, #4
 8003028:	4025      	ands	r5, r4
 800302a:	4095      	lsls	r5, r2
 800302c:	433d      	orrs	r5, r7
        GPIOx->OTYPER = temp;
 800302e:	6045      	str	r5, [r0, #4]
 8003030:	e775      	b.n	8002f1e <HAL_GPIO_Init+0x6e>
          temp |= iocurrent;
 8003032:	9c00      	ldr	r4, [sp, #0]
 8003034:	4323      	orrs	r3, r4
        EXTI->IMR = temp;
 8003036:	4644      	mov	r4, r8
 8003038:	6023      	str	r3, [r4, #0]
        temp = EXTI->EMR;
 800303a:	6863      	ldr	r3, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800303c:	038c      	lsls	r4, r1, #14
 800303e:	d5af      	bpl.n	8002fa0 <HAL_GPIO_Init+0xf0>
          temp |= iocurrent;
 8003040:	9c00      	ldr	r4, [sp, #0]
 8003042:	4323      	orrs	r3, r4
        EXTI->EMR = temp;
 8003044:	4644      	mov	r4, r8
 8003046:	6063      	str	r3, [r4, #4]
        temp = EXTI->RTSR;
 8003048:	68a3      	ldr	r3, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800304a:	02cc      	lsls	r4, r1, #11
 800304c:	d5ae      	bpl.n	8002fac <HAL_GPIO_Init+0xfc>
          temp |= iocurrent;
 800304e:	9c00      	ldr	r4, [sp, #0]
 8003050:	4323      	orrs	r3, r4
        EXTI->RTSR = temp;
 8003052:	4644      	mov	r4, r8
 8003054:	60a3      	str	r3, [r4, #8]
        temp = EXTI->FTSR;
 8003056:	68e3      	ldr	r3, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003058:	0289      	lsls	r1, r1, #10
 800305a:	d5ad      	bpl.n	8002fb8 <HAL_GPIO_Init+0x108>
          temp |= iocurrent;
 800305c:	9900      	ldr	r1, [sp, #0]
 800305e:	430b      	orrs	r3, r1
 8003060:	e7ab      	b.n	8002fba <HAL_GPIO_Init+0x10a>
 8003062:	2702      	movs	r7, #2
 8003064:	40b7      	lsls	r7, r6
 8003066:	433d      	orrs	r5, r7
 8003068:	e78d      	b.n	8002f86 <HAL_GPIO_Init+0xd6>
 800306a:	2401      	movs	r4, #1
 800306c:	40b4      	lsls	r4, r6
 800306e:	4325      	orrs	r5, r4
 8003070:	e789      	b.n	8002f86 <HAL_GPIO_Init+0xd6>
 8003072:	2403      	movs	r4, #3
 8003074:	40b4      	lsls	r4, r6
 8003076:	4325      	orrs	r5, r4
 8003078:	e785      	b.n	8002f86 <HAL_GPIO_Init+0xd6>
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	40021000 	.word	0x40021000
 8003080:	40010400 	.word	0x40010400
 8003084:	40010000 	.word	0x40010000
 8003088:	48000400 	.word	0x48000400
 800308c:	48000800 	.word	0x48000800
 8003090:	48000c00 	.word	0x48000c00

08003094 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003094:	2a00      	cmp	r2, #0
 8003096:	d101      	bne.n	800309c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003098:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800309a:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800309c:	6181      	str	r1, [r0, #24]
 800309e:	e7fc      	b.n	800309a <HAL_GPIO_WritePin+0x6>

080030a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a2:	46ce      	mov	lr, r9
 80030a4:	4647      	mov	r7, r8
 80030a6:	b580      	push	{r7, lr}
 80030a8:	0004      	movs	r4, r0
 80030aa:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030ac:	2800      	cmp	r0, #0
 80030ae:	d100      	bne.n	80030b2 <HAL_RCC_OscConfig+0x12>
 80030b0:	e0b5      	b.n	800321e <HAL_RCC_OscConfig+0x17e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b2:	6803      	ldr	r3, [r0, #0]
 80030b4:	07da      	lsls	r2, r3, #31
 80030b6:	d535      	bpl.n	8003124 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030b8:	210c      	movs	r1, #12
 80030ba:	48c1      	ldr	r0, [pc, #772]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
 80030bc:	6842      	ldr	r2, [r0, #4]
 80030be:	400a      	ands	r2, r1
 80030c0:	2a04      	cmp	r2, #4
 80030c2:	d100      	bne.n	80030c6 <HAL_RCC_OscConfig+0x26>
 80030c4:	e11b      	b.n	80032fe <HAL_RCC_OscConfig+0x25e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030c6:	6842      	ldr	r2, [r0, #4]
 80030c8:	4011      	ands	r1, r2
 80030ca:	2908      	cmp	r1, #8
 80030cc:	d100      	bne.n	80030d0 <HAL_RCC_OscConfig+0x30>
 80030ce:	e112      	b.n	80032f6 <HAL_RCC_OscConfig+0x256>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d0:	6863      	ldr	r3, [r4, #4]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d00f      	beq.n	80030f6 <HAL_RCC_OscConfig+0x56>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d100      	bne.n	80030dc <HAL_RCC_OscConfig+0x3c>
 80030da:	e135      	b.n	8003348 <HAL_RCC_OscConfig+0x2a8>
 80030dc:	2b05      	cmp	r3, #5
 80030de:	d100      	bne.n	80030e2 <HAL_RCC_OscConfig+0x42>
 80030e0:	e19d      	b.n	800341e <HAL_RCC_OscConfig+0x37e>
 80030e2:	4bb7      	ldr	r3, [pc, #732]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
 80030e4:	49b7      	ldr	r1, [pc, #732]	; (80033c4 <HAL_RCC_OscConfig+0x324>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	400a      	ands	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	49b6      	ldr	r1, [pc, #728]	; (80033c8 <HAL_RCC_OscConfig+0x328>)
 80030f0:	400a      	ands	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	e005      	b.n	8003102 <HAL_RCC_OscConfig+0x62>
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	4ab1      	ldr	r2, [pc, #708]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
 80030fa:	025b      	lsls	r3, r3, #9
 80030fc:	6811      	ldr	r1, [r2, #0]
 80030fe:	430b      	orrs	r3, r1
 8003100:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7ff fb95 	bl	8002830 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003106:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8003108:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4ead      	ldr	r6, [pc, #692]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
 800310c:	02ad      	lsls	r5, r5, #10
 800310e:	e005      	b.n	800311c <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003110:	f7ff fb8e 	bl	8002830 <HAL_GetTick>
 8003114:	1bc0      	subs	r0, r0, r7
 8003116:	2864      	cmp	r0, #100	; 0x64
 8003118:	d900      	bls.n	800311c <HAL_RCC_OscConfig+0x7c>
 800311a:	e113      	b.n	8003344 <HAL_RCC_OscConfig+0x2a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311c:	6833      	ldr	r3, [r6, #0]
 800311e:	422b      	tst	r3, r5
 8003120:	d0f6      	beq.n	8003110 <HAL_RCC_OscConfig+0x70>
 8003122:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003124:	079a      	lsls	r2, r3, #30
 8003126:	d445      	bmi.n	80031b4 <HAL_RCC_OscConfig+0x114>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003128:	071a      	lsls	r2, r3, #28
 800312a:	d517      	bpl.n	800315c <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800312c:	69e3      	ldr	r3, [r4, #28]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312e:	4da4      	ldr	r5, [pc, #656]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003130:	2b00      	cmp	r3, #0
 8003132:	d100      	bne.n	8003136 <HAL_RCC_OscConfig+0x96>
 8003134:	e0cc      	b.n	80032d0 <HAL_RCC_OscConfig+0x230>
      __HAL_RCC_LSI_ENABLE();
 8003136:	2201      	movs	r2, #1
 8003138:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 800313c:	4313      	orrs	r3, r2
 800313e:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003140:	f7ff fb76 	bl	8002830 <HAL_GetTick>
 8003144:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003146:	e005      	b.n	8003154 <HAL_RCC_OscConfig+0xb4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003148:	f7ff fb72 	bl	8002830 <HAL_GetTick>
 800314c:	1bc0      	subs	r0, r0, r7
 800314e:	2802      	cmp	r0, #2
 8003150:	d900      	bls.n	8003154 <HAL_RCC_OscConfig+0xb4>
 8003152:	e0f7      	b.n	8003344 <HAL_RCC_OscConfig+0x2a4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003154:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003156:	421e      	tst	r6, r3
 8003158:	d0f6      	beq.n	8003148 <HAL_RCC_OscConfig+0xa8>
 800315a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800315c:	075a      	lsls	r2, r3, #29
 800315e:	d400      	bmi.n	8003162 <HAL_RCC_OscConfig+0xc2>
 8003160:	e080      	b.n	8003264 <HAL_RCC_OscConfig+0x1c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003162:	2280      	movs	r2, #128	; 0x80
 8003164:	4b96      	ldr	r3, [pc, #600]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
 8003166:	0552      	lsls	r2, r2, #21
 8003168:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800316a:	2500      	movs	r5, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316c:	4211      	tst	r1, r2
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0xe0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003170:	69d9      	ldr	r1, [r3, #28]
      pwrclkchanged = SET;
 8003172:	3501      	adds	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003174:	4311      	orrs	r1, r2
 8003176:	61d9      	str	r1, [r3, #28]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	401a      	ands	r2, r3
 800317c:	9201      	str	r2, [sp, #4]
 800317e:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003180:	2680      	movs	r6, #128	; 0x80
 8003182:	4f92      	ldr	r7, [pc, #584]	; (80033cc <HAL_RCC_OscConfig+0x32c>)
 8003184:	0076      	lsls	r6, r6, #1
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	4233      	tst	r3, r6
 800318a:	d100      	bne.n	800318e <HAL_RCC_OscConfig+0xee>
 800318c:	e0ca      	b.n	8003324 <HAL_RCC_OscConfig+0x284>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318e:	68a3      	ldr	r3, [r4, #8]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d04a      	beq.n	800322a <HAL_RCC_OscConfig+0x18a>
 8003194:	2b00      	cmp	r3, #0
 8003196:	d100      	bne.n	800319a <HAL_RCC_OscConfig+0xfa>
 8003198:	e0ef      	b.n	800337a <HAL_RCC_OscConfig+0x2da>
 800319a:	2b05      	cmp	r3, #5
 800319c:	d100      	bne.n	80031a0 <HAL_RCC_OscConfig+0x100>
 800319e:	e14a      	b.n	8003436 <HAL_RCC_OscConfig+0x396>
 80031a0:	2101      	movs	r1, #1
 80031a2:	4b87      	ldr	r3, [pc, #540]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
 80031a4:	6a1a      	ldr	r2, [r3, #32]
 80031a6:	438a      	bics	r2, r1
 80031a8:	621a      	str	r2, [r3, #32]
 80031aa:	6a1a      	ldr	r2, [r3, #32]
 80031ac:	3103      	adds	r1, #3
 80031ae:	438a      	bics	r2, r1
 80031b0:	621a      	str	r2, [r3, #32]
 80031b2:	e03e      	b.n	8003232 <HAL_RCC_OscConfig+0x192>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80031b4:	220c      	movs	r2, #12
 80031b6:	4982      	ldr	r1, [pc, #520]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
 80031b8:	6848      	ldr	r0, [r1, #4]
 80031ba:	4202      	tst	r2, r0
 80031bc:	d026      	beq.n	800320c <HAL_RCC_OscConfig+0x16c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80031be:	6848      	ldr	r0, [r1, #4]
 80031c0:	4002      	ands	r2, r0
 80031c2:	2a08      	cmp	r2, #8
 80031c4:	d01f      	beq.n	8003206 <HAL_RCC_OscConfig+0x166>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031c6:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 80031c8:	4d7d      	ldr	r5, [pc, #500]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d100      	bne.n	80031d0 <HAL_RCC_OscConfig+0x130>
 80031ce:	e0ee      	b.n	80033ae <HAL_RCC_OscConfig+0x30e>
        __HAL_RCC_HSI_ENABLE();
 80031d0:	2201      	movs	r2, #1
 80031d2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d4:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 80031d6:	4313      	orrs	r3, r2
 80031d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80031da:	f7ff fb29 	bl	8002830 <HAL_GetTick>
 80031de:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	e005      	b.n	80031ee <HAL_RCC_OscConfig+0x14e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e2:	f7ff fb25 	bl	8002830 <HAL_GetTick>
 80031e6:	1bc0      	subs	r0, r0, r7
 80031e8:	2802      	cmp	r0, #2
 80031ea:	d900      	bls.n	80031ee <HAL_RCC_OscConfig+0x14e>
 80031ec:	e0aa      	b.n	8003344 <HAL_RCC_OscConfig+0x2a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ee:	682b      	ldr	r3, [r5, #0]
 80031f0:	421e      	tst	r6, r3
 80031f2:	d0f6      	beq.n	80031e2 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f4:	21f8      	movs	r1, #248	; 0xf8
 80031f6:	682a      	ldr	r2, [r5, #0]
 80031f8:	6923      	ldr	r3, [r4, #16]
 80031fa:	438a      	bics	r2, r1
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4313      	orrs	r3, r2
 8003200:	602b      	str	r3, [r5, #0]
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	e790      	b.n	8003128 <HAL_RCC_OscConfig+0x88>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003206:	684a      	ldr	r2, [r1, #4]
 8003208:	03d2      	lsls	r2, r2, #15
 800320a:	d4dc      	bmi.n	80031c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320c:	4a6c      	ldr	r2, [pc, #432]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	0792      	lsls	r2, r2, #30
 8003212:	d400      	bmi.n	8003216 <HAL_RCC_OscConfig+0x176>
 8003214:	e07d      	b.n	8003312 <HAL_RCC_OscConfig+0x272>
 8003216:	68e2      	ldr	r2, [r4, #12]
 8003218:	2a01      	cmp	r2, #1
 800321a:	d100      	bne.n	800321e <HAL_RCC_OscConfig+0x17e>
 800321c:	e079      	b.n	8003312 <HAL_RCC_OscConfig+0x272>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800321e:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8003220:	b003      	add	sp, #12
 8003222:	bc0c      	pop	{r2, r3}
 8003224:	4690      	mov	r8, r2
 8003226:	4699      	mov	r9, r3
 8003228:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800322a:	4965      	ldr	r1, [pc, #404]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
 800322c:	6a0a      	ldr	r2, [r1, #32]
 800322e:	4313      	orrs	r3, r2
 8003230:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8003232:	f7ff fafd 	bl	8002830 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003236:	4b66      	ldr	r3, [pc, #408]	; (80033d0 <HAL_RCC_OscConfig+0x330>)
      tickstart = HAL_GetTick();
 8003238:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323a:	4f61      	ldr	r7, [pc, #388]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
 800323c:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	e005      	b.n	800324e <HAL_RCC_OscConfig+0x1ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003242:	f7ff faf5 	bl	8002830 <HAL_GetTick>
 8003246:	464b      	mov	r3, r9
 8003248:	1ac0      	subs	r0, r0, r3
 800324a:	4540      	cmp	r0, r8
 800324c:	d87a      	bhi.n	8003344 <HAL_RCC_OscConfig+0x2a4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	421e      	tst	r6, r3
 8003252:	d0f6      	beq.n	8003242 <HAL_RCC_OscConfig+0x1a2>
    if(pwrclkchanged == SET)
 8003254:	2d01      	cmp	r5, #1
 8003256:	d104      	bne.n	8003262 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003258:	4a59      	ldr	r2, [pc, #356]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
 800325a:	495e      	ldr	r1, [pc, #376]	; (80033d4 <HAL_RCC_OscConfig+0x334>)
 800325c:	69d3      	ldr	r3, [r2, #28]
 800325e:	400b      	ands	r3, r1
 8003260:	61d3      	str	r3, [r2, #28]
 8003262:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003264:	06db      	lsls	r3, r3, #27
 8003266:	d512      	bpl.n	800328e <HAL_RCC_OscConfig+0x1ee>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003268:	6963      	ldr	r3, [r4, #20]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d100      	bne.n	8003270 <HAL_RCC_OscConfig+0x1d0>
 800326e:	e140      	b.n	80034f2 <HAL_RCC_OscConfig+0x452>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003270:	3305      	adds	r3, #5
 8003272:	d000      	beq.n	8003276 <HAL_RCC_OscConfig+0x1d6>
 8003274:	e0bc      	b.n	80033f0 <HAL_RCC_OscConfig+0x350>
      __HAL_RCC_HSI14ADC_ENABLE();
 8003276:	2104      	movs	r1, #4
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003278:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 800327a:	4a51      	ldr	r2, [pc, #324]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
 800327c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800327e:	438b      	bics	r3, r1
 8003280:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003282:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003284:	69a3      	ldr	r3, [r4, #24]
 8003286:	4381      	bics	r1, r0
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	430b      	orrs	r3, r1
 800328c:	6353      	str	r3, [r2, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800328e:	6a23      	ldr	r3, [r4, #32]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01b      	beq.n	80032cc <HAL_RCC_OscConfig+0x22c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003294:	220c      	movs	r2, #12
 8003296:	4d4a      	ldr	r5, [pc, #296]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
 8003298:	6869      	ldr	r1, [r5, #4]
 800329a:	400a      	ands	r2, r1
 800329c:	2a08      	cmp	r2, #8
 800329e:	d100      	bne.n	80032a2 <HAL_RCC_OscConfig+0x202>
 80032a0:	e0d3      	b.n	800344a <HAL_RCC_OscConfig+0x3aa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d100      	bne.n	80032a8 <HAL_RCC_OscConfig+0x208>
 80032a6:	e0ec      	b.n	8003482 <HAL_RCC_OscConfig+0x3e2>
        __HAL_RCC_PLL_DISABLE();
 80032a8:	682b      	ldr	r3, [r5, #0]
 80032aa:	4a4b      	ldr	r2, [pc, #300]	; (80033d8 <HAL_RCC_OscConfig+0x338>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ac:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80032ae:	4013      	ands	r3, r2
 80032b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80032b2:	f7ff fabd 	bl	8002830 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b6:	04a4      	lsls	r4, r4, #18
        tickstart = HAL_GetTick();
 80032b8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ba:	e004      	b.n	80032c6 <HAL_RCC_OscConfig+0x226>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032bc:	f7ff fab8 	bl	8002830 <HAL_GetTick>
 80032c0:	1b80      	subs	r0, r0, r6
 80032c2:	2802      	cmp	r0, #2
 80032c4:	d83e      	bhi.n	8003344 <HAL_RCC_OscConfig+0x2a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c6:	682b      	ldr	r3, [r5, #0]
 80032c8:	4223      	tst	r3, r4
 80032ca:	d1f7      	bne.n	80032bc <HAL_RCC_OscConfig+0x21c>
  return HAL_OK;
 80032cc:	2000      	movs	r0, #0
 80032ce:	e7a7      	b.n	8003220 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_LSI_DISABLE();
 80032d0:	2201      	movs	r2, #1
 80032d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d4:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80032d6:	4393      	bics	r3, r2
 80032d8:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80032da:	f7ff faa9 	bl	8002830 <HAL_GetTick>
 80032de:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e0:	e004      	b.n	80032ec <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e2:	f7ff faa5 	bl	8002830 <HAL_GetTick>
 80032e6:	1bc0      	subs	r0, r0, r7
 80032e8:	2802      	cmp	r0, #2
 80032ea:	d82b      	bhi.n	8003344 <HAL_RCC_OscConfig+0x2a4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80032ee:	421e      	tst	r6, r3
 80032f0:	d1f7      	bne.n	80032e2 <HAL_RCC_OscConfig+0x242>
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	e732      	b.n	800315c <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032f6:	6842      	ldr	r2, [r0, #4]
 80032f8:	03d2      	lsls	r2, r2, #15
 80032fa:	d400      	bmi.n	80032fe <HAL_RCC_OscConfig+0x25e>
 80032fc:	e6e8      	b.n	80030d0 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032fe:	4a30      	ldr	r2, [pc, #192]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	0392      	lsls	r2, r2, #14
 8003304:	d400      	bmi.n	8003308 <HAL_RCC_OscConfig+0x268>
 8003306:	e70d      	b.n	8003124 <HAL_RCC_OscConfig+0x84>
 8003308:	6862      	ldr	r2, [r4, #4]
 800330a:	2a00      	cmp	r2, #0
 800330c:	d000      	beq.n	8003310 <HAL_RCC_OscConfig+0x270>
 800330e:	e709      	b.n	8003124 <HAL_RCC_OscConfig+0x84>
 8003310:	e785      	b.n	800321e <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003312:	25f8      	movs	r5, #248	; 0xf8
 8003314:	482a      	ldr	r0, [pc, #168]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
 8003316:	6922      	ldr	r2, [r4, #16]
 8003318:	6801      	ldr	r1, [r0, #0]
 800331a:	00d2      	lsls	r2, r2, #3
 800331c:	43a9      	bics	r1, r5
 800331e:	430a      	orrs	r2, r1
 8003320:	6002      	str	r2, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	e701      	b.n	8003128 <HAL_RCC_OscConfig+0x88>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	4333      	orrs	r3, r6
 8003328:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800332a:	f7ff fa81 	bl	8002830 <HAL_GetTick>
 800332e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4233      	tst	r3, r6
 8003334:	d000      	beq.n	8003338 <HAL_RCC_OscConfig+0x298>
 8003336:	e72a      	b.n	800318e <HAL_RCC_OscConfig+0xee>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003338:	f7ff fa7a 	bl	8002830 <HAL_GetTick>
 800333c:	4643      	mov	r3, r8
 800333e:	1ac0      	subs	r0, r0, r3
 8003340:	2864      	cmp	r0, #100	; 0x64
 8003342:	d9f5      	bls.n	8003330 <HAL_RCC_OscConfig+0x290>
            return HAL_TIMEOUT;
 8003344:	2003      	movs	r0, #3
 8003346:	e76b      	b.n	8003220 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003348:	4d1d      	ldr	r5, [pc, #116]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
 800334a:	4a1e      	ldr	r2, [pc, #120]	; (80033c4 <HAL_RCC_OscConfig+0x324>)
 800334c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334e:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003350:	4013      	ands	r3, r2
 8003352:	602b      	str	r3, [r5, #0]
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003358:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335a:	4013      	ands	r3, r2
 800335c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800335e:	f7ff fa67 	bl	8002830 <HAL_GetTick>
 8003362:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003364:	e004      	b.n	8003370 <HAL_RCC_OscConfig+0x2d0>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003366:	f7ff fa63 	bl	8002830 <HAL_GetTick>
 800336a:	1bc0      	subs	r0, r0, r7
 800336c:	2864      	cmp	r0, #100	; 0x64
 800336e:	d8e9      	bhi.n	8003344 <HAL_RCC_OscConfig+0x2a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	4233      	tst	r3, r6
 8003374:	d1f7      	bne.n	8003366 <HAL_RCC_OscConfig+0x2c6>
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	e6d4      	b.n	8003124 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337a:	2201      	movs	r2, #1
 800337c:	4e10      	ldr	r6, [pc, #64]	; (80033c0 <HAL_RCC_OscConfig+0x320>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337e:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003380:	6a33      	ldr	r3, [r6, #32]
 8003382:	4393      	bics	r3, r2
 8003384:	6233      	str	r3, [r6, #32]
 8003386:	6a33      	ldr	r3, [r6, #32]
 8003388:	3203      	adds	r2, #3
 800338a:	4393      	bics	r3, r2
 800338c:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800338e:	f7ff fa4f 	bl	8002830 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003392:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <HAL_RCC_OscConfig+0x330>)
      tickstart = HAL_GetTick();
 8003394:	4681      	mov	r9, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003396:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003398:	e005      	b.n	80033a6 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800339a:	f7ff fa49 	bl	8002830 <HAL_GetTick>
 800339e:	464b      	mov	r3, r9
 80033a0:	1ac0      	subs	r0, r0, r3
 80033a2:	4540      	cmp	r0, r8
 80033a4:	d8ce      	bhi.n	8003344 <HAL_RCC_OscConfig+0x2a4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a6:	6a33      	ldr	r3, [r6, #32]
 80033a8:	421f      	tst	r7, r3
 80033aa:	d1f6      	bne.n	800339a <HAL_RCC_OscConfig+0x2fa>
 80033ac:	e752      	b.n	8003254 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_DISABLE();
 80033ae:	2201      	movs	r2, #1
 80033b0:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b2:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80033b4:	4393      	bics	r3, r2
 80033b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80033b8:	f7ff fa3a 	bl	8002830 <HAL_GetTick>
 80033bc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033be:	e012      	b.n	80033e6 <HAL_RCC_OscConfig+0x346>
 80033c0:	40021000 	.word	0x40021000
 80033c4:	fffeffff 	.word	0xfffeffff
 80033c8:	fffbffff 	.word	0xfffbffff
 80033cc:	40007000 	.word	0x40007000
 80033d0:	00001388 	.word	0x00001388
 80033d4:	efffffff 	.word	0xefffffff
 80033d8:	feffffff 	.word	0xfeffffff
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033dc:	f7ff fa28 	bl	8002830 <HAL_GetTick>
 80033e0:	1bc0      	subs	r0, r0, r7
 80033e2:	2802      	cmp	r0, #2
 80033e4:	d8ae      	bhi.n	8003344 <HAL_RCC_OscConfig+0x2a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e6:	682b      	ldr	r3, [r5, #0]
 80033e8:	421e      	tst	r6, r3
 80033ea:	d1f7      	bne.n	80033dc <HAL_RCC_OscConfig+0x33c>
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	e69b      	b.n	8003128 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSI14ADC_DISABLE();
 80033f0:	2204      	movs	r2, #4
 80033f2:	4d4f      	ldr	r5, [pc, #316]	; (8003530 <HAL_RCC_OscConfig+0x490>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80033f4:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80033f6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80033f8:	4313      	orrs	r3, r2
 80033fa:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80033fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80033fe:	3a03      	subs	r2, #3
 8003400:	4393      	bics	r3, r2
 8003402:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003404:	f7ff fa14 	bl	8002830 <HAL_GetTick>
 8003408:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800340a:	e004      	b.n	8003416 <HAL_RCC_OscConfig+0x376>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800340c:	f7ff fa10 	bl	8002830 <HAL_GetTick>
 8003410:	1bc0      	subs	r0, r0, r7
 8003412:	2802      	cmp	r0, #2
 8003414:	d896      	bhi.n	8003344 <HAL_RCC_OscConfig+0x2a4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003416:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003418:	421e      	tst	r6, r3
 800341a:	d1f7      	bne.n	800340c <HAL_RCC_OscConfig+0x36c>
 800341c:	e737      	b.n	800328e <HAL_RCC_OscConfig+0x1ee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800341e:	2280      	movs	r2, #128	; 0x80
 8003420:	4b43      	ldr	r3, [pc, #268]	; (8003530 <HAL_RCC_OscConfig+0x490>)
 8003422:	02d2      	lsls	r2, r2, #11
 8003424:	6819      	ldr	r1, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	2280      	movs	r2, #128	; 0x80
 800342c:	6819      	ldr	r1, [r3, #0]
 800342e:	0252      	lsls	r2, r2, #9
 8003430:	430a      	orrs	r2, r1
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	e665      	b.n	8003102 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003436:	2104      	movs	r1, #4
 8003438:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <HAL_RCC_OscConfig+0x490>)
 800343a:	6a1a      	ldr	r2, [r3, #32]
 800343c:	430a      	orrs	r2, r1
 800343e:	621a      	str	r2, [r3, #32]
 8003440:	6a1a      	ldr	r2, [r3, #32]
 8003442:	3903      	subs	r1, #3
 8003444:	430a      	orrs	r2, r1
 8003446:	621a      	str	r2, [r3, #32]
 8003448:	e6f3      	b.n	8003232 <HAL_RCC_OscConfig+0x192>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800344a:	2b01      	cmp	r3, #1
 800344c:	d100      	bne.n	8003450 <HAL_RCC_OscConfig+0x3b0>
 800344e:	e6e6      	b.n	800321e <HAL_RCC_OscConfig+0x17e>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003450:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8003452:	686a      	ldr	r2, [r5, #4]
        pll_config2 = RCC->CFGR2;
 8003454:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003456:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003458:	025b      	lsls	r3, r3, #9
 800345a:	4013      	ands	r3, r2
        return HAL_ERROR;
 800345c:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800345e:	42ab      	cmp	r3, r5
 8003460:	d000      	beq.n	8003464 <HAL_RCC_OscConfig+0x3c4>
 8003462:	e6dd      	b.n	8003220 <HAL_RCC_OscConfig+0x180>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003464:	230f      	movs	r3, #15
 8003466:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003468:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800346a:	428b      	cmp	r3, r1
 800346c:	d000      	beq.n	8003470 <HAL_RCC_OscConfig+0x3d0>
 800346e:	e6d7      	b.n	8003220 <HAL_RCC_OscConfig+0x180>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003470:	20f0      	movs	r0, #240	; 0xf0
 8003472:	0380      	lsls	r0, r0, #14
 8003474:	4002      	ands	r2, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003476:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003478:	1a10      	subs	r0, r2, r0
 800347a:	1e42      	subs	r2, r0, #1
 800347c:	4190      	sbcs	r0, r2
    return HAL_ERROR;
 800347e:	b2c0      	uxtb	r0, r0
 8003480:	e6ce      	b.n	8003220 <HAL_RCC_OscConfig+0x180>
        __HAL_RCC_PLL_DISABLE();
 8003482:	682b      	ldr	r3, [r5, #0]
 8003484:	4a2b      	ldr	r2, [pc, #172]	; (8003534 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003486:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003488:	4013      	ands	r3, r2
 800348a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800348c:	f7ff f9d0 	bl	8002830 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003490:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8003492:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003494:	e005      	b.n	80034a2 <HAL_RCC_OscConfig+0x402>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003496:	f7ff f9cb 	bl	8002830 <HAL_GetTick>
 800349a:	1bc0      	subs	r0, r0, r7
 800349c:	2802      	cmp	r0, #2
 800349e:	d900      	bls.n	80034a2 <HAL_RCC_OscConfig+0x402>
 80034a0:	e750      	b.n	8003344 <HAL_RCC_OscConfig+0x2a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a2:	682b      	ldr	r3, [r5, #0]
 80034a4:	4233      	tst	r3, r6
 80034a6:	d1f6      	bne.n	8003496 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a8:	220f      	movs	r2, #15
 80034aa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80034ac:	4393      	bics	r3, r2
 80034ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034b0:	4313      	orrs	r3, r2
 80034b2:	62eb      	str	r3, [r5, #44]	; 0x2c
 80034b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80034b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80034b8:	686a      	ldr	r2, [r5, #4]
 80034ba:	430b      	orrs	r3, r1
 80034bc:	491e      	ldr	r1, [pc, #120]	; (8003538 <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034be:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c0:	400a      	ands	r2, r1
 80034c2:	4313      	orrs	r3, r2
 80034c4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	682a      	ldr	r2, [r5, #0]
 80034ca:	045b      	lsls	r3, r3, #17
 80034cc:	4313      	orrs	r3, r2
 80034ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80034d0:	f7ff f9ae 	bl	8002830 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d4:	4d16      	ldr	r5, [pc, #88]	; (8003530 <HAL_RCC_OscConfig+0x490>)
        tickstart = HAL_GetTick();
 80034d6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d8:	04a4      	lsls	r4, r4, #18
 80034da:	e005      	b.n	80034e8 <HAL_RCC_OscConfig+0x448>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034dc:	f7ff f9a8 	bl	8002830 <HAL_GetTick>
 80034e0:	1b80      	subs	r0, r0, r6
 80034e2:	2802      	cmp	r0, #2
 80034e4:	d900      	bls.n	80034e8 <HAL_RCC_OscConfig+0x448>
 80034e6:	e72d      	b.n	8003344 <HAL_RCC_OscConfig+0x2a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034e8:	682b      	ldr	r3, [r5, #0]
 80034ea:	4223      	tst	r3, r4
 80034ec:	d0f6      	beq.n	80034dc <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 80034ee:	2000      	movs	r0, #0
 80034f0:	e696      	b.n	8003220 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_HSI14ADC_DISABLE();
 80034f2:	2104      	movs	r1, #4
 80034f4:	4d0e      	ldr	r5, [pc, #56]	; (8003530 <HAL_RCC_OscConfig+0x490>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80034f6:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80034f8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80034fa:	430a      	orrs	r2, r1
 80034fc:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80034fe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003500:	4313      	orrs	r3, r2
 8003502:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003504:	f7ff f994 	bl	8002830 <HAL_GetTick>
 8003508:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800350a:	e005      	b.n	8003518 <HAL_RCC_OscConfig+0x478>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800350c:	f7ff f990 	bl	8002830 <HAL_GetTick>
 8003510:	1bc0      	subs	r0, r0, r7
 8003512:	2802      	cmp	r0, #2
 8003514:	d900      	bls.n	8003518 <HAL_RCC_OscConfig+0x478>
 8003516:	e715      	b.n	8003344 <HAL_RCC_OscConfig+0x2a4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003518:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800351a:	421e      	tst	r6, r3
 800351c:	d0f6      	beq.n	800350c <HAL_RCC_OscConfig+0x46c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800351e:	21f8      	movs	r1, #248	; 0xf8
 8003520:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003522:	69a3      	ldr	r3, [r4, #24]
 8003524:	438a      	bics	r2, r1
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4313      	orrs	r3, r2
 800352a:	636b      	str	r3, [r5, #52]	; 0x34
 800352c:	e6af      	b.n	800328e <HAL_RCC_OscConfig+0x1ee>
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	40021000 	.word	0x40021000
 8003534:	feffffff 	.word	0xfeffffff
 8003538:	ffc2ffff 	.word	0xffc2ffff

0800353c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800353c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800353e:	46ce      	mov	lr, r9
 8003540:	4647      	mov	r7, r8
 8003542:	b580      	push	{r7, lr}
 8003544:	0004      	movs	r4, r0
 8003546:	b089      	sub	sp, #36	; 0x24
 8003548:	000d      	movs	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800354a:	2800      	cmp	r0, #0
 800354c:	d00d      	beq.n	800356a <HAL_RCC_ClockConfig+0x2e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800354e:	2301      	movs	r3, #1
 8003550:	4950      	ldr	r1, [pc, #320]	; (8003694 <HAL_RCC_ClockConfig+0x158>)
 8003552:	680a      	ldr	r2, [r1, #0]
 8003554:	401a      	ands	r2, r3
 8003556:	42aa      	cmp	r2, r5
 8003558:	d20d      	bcs.n	8003576 <HAL_RCC_ClockConfig+0x3a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	680a      	ldr	r2, [r1, #0]
 800355c:	439a      	bics	r2, r3
 800355e:	432a      	orrs	r2, r5
 8003560:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	680a      	ldr	r2, [r1, #0]
 8003564:	4013      	ands	r3, r2
 8003566:	42ab      	cmp	r3, r5
 8003568:	d005      	beq.n	8003576 <HAL_RCC_ClockConfig+0x3a>
    return HAL_ERROR;
 800356a:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 800356c:	b009      	add	sp, #36	; 0x24
 800356e:	bc0c      	pop	{r2, r3}
 8003570:	4690      	mov	r8, r2
 8003572:	4699      	mov	r9, r3
 8003574:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	079a      	lsls	r2, r3, #30
 800357a:	d50e      	bpl.n	800359a <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357c:	075a      	lsls	r2, r3, #29
 800357e:	d505      	bpl.n	800358c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003580:	22e0      	movs	r2, #224	; 0xe0
 8003582:	4945      	ldr	r1, [pc, #276]	; (8003698 <HAL_RCC_ClockConfig+0x15c>)
 8003584:	00d2      	lsls	r2, r2, #3
 8003586:	6848      	ldr	r0, [r1, #4]
 8003588:	4302      	orrs	r2, r0
 800358a:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800358c:	20f0      	movs	r0, #240	; 0xf0
 800358e:	4942      	ldr	r1, [pc, #264]	; (8003698 <HAL_RCC_ClockConfig+0x15c>)
 8003590:	684a      	ldr	r2, [r1, #4]
 8003592:	4382      	bics	r2, r0
 8003594:	68a0      	ldr	r0, [r4, #8]
 8003596:	4302      	orrs	r2, r0
 8003598:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359a:	07db      	lsls	r3, r3, #31
 800359c:	d521      	bpl.n	80035e2 <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359e:	4b3e      	ldr	r3, [pc, #248]	; (8003698 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a0:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a4:	2a01      	cmp	r2, #1
 80035a6:	d067      	beq.n	8003678 <HAL_RCC_ClockConfig+0x13c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a8:	2a02      	cmp	r2, #2
 80035aa:	d06f      	beq.n	800368c <HAL_RCC_ClockConfig+0x150>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ac:	079b      	lsls	r3, r3, #30
 80035ae:	d5dc      	bpl.n	800356a <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035b0:	2103      	movs	r1, #3
 80035b2:	4e39      	ldr	r6, [pc, #228]	; (8003698 <HAL_RCC_ClockConfig+0x15c>)
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b4:	270c      	movs	r7, #12
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035b6:	6873      	ldr	r3, [r6, #4]
 80035b8:	438b      	bics	r3, r1
 80035ba:	4313      	orrs	r3, r2
 80035bc:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80035be:	f7ff f937 	bl	8002830 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c2:	4b36      	ldr	r3, [pc, #216]	; (800369c <HAL_RCC_ClockConfig+0x160>)
    tickstart = HAL_GetTick();
 80035c4:	4681      	mov	r9, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c6:	4698      	mov	r8, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c8:	e005      	b.n	80035d6 <HAL_RCC_ClockConfig+0x9a>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ca:	f7ff f931 	bl	8002830 <HAL_GetTick>
 80035ce:	464b      	mov	r3, r9
 80035d0:	1ac0      	subs	r0, r0, r3
 80035d2:	4540      	cmp	r0, r8
 80035d4:	d858      	bhi.n	8003688 <HAL_RCC_ClockConfig+0x14c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d6:	6872      	ldr	r2, [r6, #4]
 80035d8:	6863      	ldr	r3, [r4, #4]
 80035da:	403a      	ands	r2, r7
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	429a      	cmp	r2, r3
 80035e0:	d1f3      	bne.n	80035ca <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e2:	2101      	movs	r1, #1
 80035e4:	4a2b      	ldr	r2, [pc, #172]	; (8003694 <HAL_RCC_ClockConfig+0x158>)
 80035e6:	6813      	ldr	r3, [r2, #0]
 80035e8:	400b      	ands	r3, r1
 80035ea:	42ab      	cmp	r3, r5
 80035ec:	d905      	bls.n	80035fa <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	6813      	ldr	r3, [r2, #0]
 80035f0:	438b      	bics	r3, r1
 80035f2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f4:	6813      	ldr	r3, [r2, #0]
 80035f6:	4219      	tst	r1, r3
 80035f8:	d1b7      	bne.n	800356a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	075b      	lsls	r3, r3, #29
 80035fe:	d506      	bpl.n	800360e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003600:	4a25      	ldr	r2, [pc, #148]	; (8003698 <HAL_RCC_ClockConfig+0x15c>)
 8003602:	4927      	ldr	r1, [pc, #156]	; (80036a0 <HAL_RCC_ClockConfig+0x164>)
 8003604:	6853      	ldr	r3, [r2, #4]
 8003606:	400b      	ands	r3, r1
 8003608:	68e1      	ldr	r1, [r4, #12]
 800360a:	430b      	orrs	r3, r1
 800360c:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800360e:	4669      	mov	r1, sp
 8003610:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <HAL_RCC_ClockConfig+0x168>)
 8003612:	000a      	movs	r2, r1
 8003614:	0018      	movs	r0, r3
 8003616:	c870      	ldmia	r0!, {r4, r5, r6}
 8003618:	c270      	stmia	r2!, {r4, r5, r6}
 800361a:	6800      	ldr	r0, [r0, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800361c:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800361e:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003620:	aa04      	add	r2, sp, #16
 8003622:	0010      	movs	r0, r2
 8003624:	cb70      	ldmia	r3!, {r4, r5, r6}
 8003626:	c070      	stmia	r0!, {r4, r5, r6}
 8003628:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800362a:	4d1b      	ldr	r5, [pc, #108]	; (8003698 <HAL_RCC_ClockConfig+0x15c>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800362c:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800362e:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8003630:	6868      	ldr	r0, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003632:	4003      	ands	r3, r0
 8003634:	2b08      	cmp	r3, #8
 8003636:	d11d      	bne.n	8003674 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003638:	3307      	adds	r3, #7
 800363a:	0c84      	lsrs	r4, r0, #18
 800363c:	401c      	ands	r4, r3
 800363e:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003640:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003642:	400b      	ands	r3, r1
 8003644:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003646:	03c3      	lsls	r3, r0, #15
 8003648:	d419      	bmi.n	800367e <HAL_RCC_ClockConfig+0x142>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800364a:	0163      	lsls	r3, r4, #5
 800364c:	1b1b      	subs	r3, r3, r4
 800364e:	0198      	lsls	r0, r3, #6
 8003650:	1ac0      	subs	r0, r0, r3
 8003652:	00c0      	lsls	r0, r0, #3
 8003654:	1900      	adds	r0, r0, r4
 8003656:	0200      	lsls	r0, r0, #8
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003658:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <HAL_RCC_ClockConfig+0x15c>)
 800365a:	4a13      	ldr	r2, [pc, #76]	; (80036a8 <HAL_RCC_ClockConfig+0x16c>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	061b      	lsls	r3, r3, #24
 8003660:	0f1b      	lsrs	r3, r3, #28
 8003662:	5cd3      	ldrb	r3, [r2, r3]
 8003664:	40d8      	lsrs	r0, r3
 8003666:	4b11      	ldr	r3, [pc, #68]	; (80036ac <HAL_RCC_ClockConfig+0x170>)
 8003668:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800366a:	2000      	movs	r0, #0
 800366c:	f7ff f89e 	bl	80027ac <HAL_InitTick>
  return HAL_OK;
 8003670:	2000      	movs	r0, #0
 8003672:	e77b      	b.n	800356c <HAL_RCC_ClockConfig+0x30>
      sysclockfreq = HSE_VALUE;
 8003674:	480e      	ldr	r0, [pc, #56]	; (80036b0 <HAL_RCC_ClockConfig+0x174>)
 8003676:	e7ef      	b.n	8003658 <HAL_RCC_ClockConfig+0x11c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003678:	039b      	lsls	r3, r3, #14
 800367a:	d499      	bmi.n	80035b0 <HAL_RCC_ClockConfig+0x74>
 800367c:	e775      	b.n	800356a <HAL_RCC_ClockConfig+0x2e>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800367e:	480c      	ldr	r0, [pc, #48]	; (80036b0 <HAL_RCC_ClockConfig+0x174>)
 8003680:	f7fc fd42 	bl	8000108 <__udivsi3>
 8003684:	4360      	muls	r0, r4
 8003686:	e7e7      	b.n	8003658 <HAL_RCC_ClockConfig+0x11c>
        return HAL_TIMEOUT;
 8003688:	2003      	movs	r0, #3
 800368a:	e76f      	b.n	800356c <HAL_RCC_ClockConfig+0x30>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368c:	019b      	lsls	r3, r3, #6
 800368e:	d48f      	bmi.n	80035b0 <HAL_RCC_ClockConfig+0x74>
 8003690:	e76b      	b.n	800356a <HAL_RCC_ClockConfig+0x2e>
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	40022000 	.word	0x40022000
 8003698:	40021000 	.word	0x40021000
 800369c:	00001388 	.word	0x00001388
 80036a0:	fffff8ff 	.word	0xfffff8ff
 80036a4:	08003df8 	.word	0x08003df8
 80036a8:	08003f18 	.word	0x08003f18
 80036ac:	20000004 	.word	0x20000004
 80036b0:	007a1200 	.word	0x007a1200

080036b4 <HAL_RCC_GetSysClockFreq>:
{
 80036b4:	b570      	push	{r4, r5, r6, lr}
 80036b6:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80036b8:	4669      	mov	r1, sp
 80036ba:	4b16      	ldr	r3, [pc, #88]	; (8003714 <HAL_RCC_GetSysClockFreq+0x60>)
 80036bc:	000a      	movs	r2, r1
 80036be:	0018      	movs	r0, r3
 80036c0:	c870      	ldmia	r0!, {r4, r5, r6}
 80036c2:	c270      	stmia	r2!, {r4, r5, r6}
 80036c4:	6800      	ldr	r0, [r0, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80036c6:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80036c8:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80036ca:	aa04      	add	r2, sp, #16
 80036cc:	0010      	movs	r0, r2
 80036ce:	cb70      	ldmia	r3!, {r4, r5, r6}
 80036d0:	c070      	stmia	r0!, {r4, r5, r6}
 80036d2:	681b      	ldr	r3, [r3, #0]
  tmpreg = RCC->CFGR;
 80036d4:	4d10      	ldr	r5, [pc, #64]	; (8003718 <HAL_RCC_GetSysClockFreq+0x64>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80036d6:	6003      	str	r3, [r0, #0]
  switch (tmpreg & RCC_CFGR_SWS)
 80036d8:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80036da:	6868      	ldr	r0, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80036dc:	4003      	ands	r3, r0
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d002      	beq.n	80036e8 <HAL_RCC_GetSysClockFreq+0x34>
      sysclockfreq = HSE_VALUE;
 80036e2:	480e      	ldr	r0, [pc, #56]	; (800371c <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80036e4:	b008      	add	sp, #32
 80036e6:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80036e8:	3307      	adds	r3, #7
 80036ea:	0c84      	lsrs	r4, r0, #18
 80036ec:	401c      	ands	r4, r3
 80036ee:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80036f0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80036f2:	400b      	ands	r3, r1
 80036f4:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80036f6:	03c3      	lsls	r3, r0, #15
 80036f8:	d407      	bmi.n	800370a <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80036fa:	0163      	lsls	r3, r4, #5
 80036fc:	1b1b      	subs	r3, r3, r4
 80036fe:	0198      	lsls	r0, r3, #6
 8003700:	1ac0      	subs	r0, r0, r3
 8003702:	00c0      	lsls	r0, r0, #3
 8003704:	1900      	adds	r0, r0, r4
 8003706:	0200      	lsls	r0, r0, #8
 8003708:	e7ec      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x30>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800370a:	4804      	ldr	r0, [pc, #16]	; (800371c <HAL_RCC_GetSysClockFreq+0x68>)
 800370c:	f7fc fcfc 	bl	8000108 <__udivsi3>
 8003710:	4360      	muls	r0, r4
 8003712:	e7e7      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x30>
 8003714:	08003df8 	.word	0x08003df8
 8003718:	40021000 	.word	0x40021000
 800371c:	007a1200 	.word	0x007a1200

08003720 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003720:	4b04      	ldr	r3, [pc, #16]	; (8003734 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003722:	4a05      	ldr	r2, [pc, #20]	; (8003738 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	055b      	lsls	r3, r3, #21
 8003728:	0f5b      	lsrs	r3, r3, #29
 800372a:	5cd3      	ldrb	r3, [r2, r3]
 800372c:	4a03      	ldr	r2, [pc, #12]	; (800373c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800372e:	6810      	ldr	r0, [r2, #0]
 8003730:	40d8      	lsrs	r0, r3
}    
 8003732:	4770      	bx	lr
 8003734:	40021000 	.word	0x40021000
 8003738:	08003f28 	.word	0x08003f28
 800373c:	20000004 	.word	0x20000004

08003740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003742:	46ce      	mov	lr, r9
 8003744:	4647      	mov	r7, r8
 8003746:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003748:	6803      	ldr	r3, [r0, #0]
{
 800374a:	b083      	sub	sp, #12
 800374c:	0004      	movs	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800374e:	03da      	lsls	r2, r3, #15
 8003750:	d536      	bpl.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003752:	2280      	movs	r2, #128	; 0x80
 8003754:	4b3c      	ldr	r3, [pc, #240]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003756:	0552      	lsls	r2, r2, #21
 8003758:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800375a:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375c:	4211      	tst	r1, r2
 800375e:	d107      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x30>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003760:	69d9      	ldr	r1, [r3, #28]
      pwrclkchanged = SET;
 8003762:	3701      	adds	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8003764:	4311      	orrs	r1, r2
 8003766:	61d9      	str	r1, [r3, #28]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	401a      	ands	r2, r3
 800376c:	9201      	str	r2, [sp, #4]
 800376e:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003770:	2680      	movs	r6, #128	; 0x80
 8003772:	4d36      	ldr	r5, [pc, #216]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003774:	0076      	lsls	r6, r6, #1
 8003776:	682b      	ldr	r3, [r5, #0]
 8003778:	4233      	tst	r3, r6
 800377a:	d039      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800377c:	21c0      	movs	r1, #192	; 0xc0
 800377e:	4d32      	ldr	r5, [pc, #200]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003780:	0089      	lsls	r1, r1, #2
 8003782:	6a2a      	ldr	r2, [r5, #32]
 8003784:	6860      	ldr	r0, [r4, #4]
 8003786:	400a      	ands	r2, r1
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003788:	d011      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800378a:	4001      	ands	r1, r0
 800378c:	4291      	cmp	r1, r2
 800378e:	d00e      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003790:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003792:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003794:	6a2e      	ldr	r6, [r5, #32]
 8003796:	0252      	lsls	r2, r2, #9
 8003798:	4332      	orrs	r2, r6
 800379a:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800379c:	6a2a      	ldr	r2, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800379e:	4b2c      	ldr	r3, [pc, #176]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x110>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037a0:	4e2c      	ldr	r6, [pc, #176]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x114>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037a2:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037a4:	4032      	ands	r2, r6
 80037a6:	622a      	str	r2, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037a8:	622b      	str	r3, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037aa:	07cb      	lsls	r3, r1, #31
 80037ac:	d439      	bmi.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ae:	4a26      	ldr	r2, [pc, #152]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80037b0:	4927      	ldr	r1, [pc, #156]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80037b2:	6a13      	ldr	r3, [r2, #32]
 80037b4:	400b      	ands	r3, r1
 80037b6:	4303      	orrs	r3, r0
 80037b8:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037ba:	2f01      	cmp	r7, #1
 80037bc:	d029      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 80037be:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037c0:	07da      	lsls	r2, r3, #31
 80037c2:	d506      	bpl.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037c4:	2003      	movs	r0, #3
 80037c6:	4920      	ldr	r1, [pc, #128]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80037c8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80037ca:	4382      	bics	r2, r0
 80037cc:	68a0      	ldr	r0, [r4, #8]
 80037ce:	4302      	orrs	r2, r0
 80037d0:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80037d2:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037d4:	069b      	lsls	r3, r3, #26
 80037d6:	d506      	bpl.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037d8:	2110      	movs	r1, #16
 80037da:	4a1b      	ldr	r2, [pc, #108]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80037dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80037de:	438b      	bics	r3, r1
 80037e0:	68e1      	ldr	r1, [r4, #12]
 80037e2:	430b      	orrs	r3, r1
 80037e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80037e6:	b003      	add	sp, #12
 80037e8:	bc0c      	pop	{r2, r3}
 80037ea:	4690      	mov	r8, r2
 80037ec:	4699      	mov	r9, r3
 80037ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	4333      	orrs	r3, r6
 80037f4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80037f6:	f7ff f81b 	bl	8002830 <HAL_GetTick>
 80037fa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fc:	e005      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fe:	f7ff f817 	bl	8002830 <HAL_GetTick>
 8003802:	4643      	mov	r3, r8
 8003804:	1ac0      	subs	r0, r0, r3
 8003806:	2864      	cmp	r0, #100	; 0x64
 8003808:	d809      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xde>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380a:	682b      	ldr	r3, [r5, #0]
 800380c:	4233      	tst	r3, r6
 800380e:	d0f6      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003810:	e7b4      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003812:	69d3      	ldr	r3, [r2, #28]
 8003814:	4910      	ldr	r1, [pc, #64]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003816:	400b      	ands	r3, r1
 8003818:	61d3      	str	r3, [r2, #28]
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	e7d0      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
          return HAL_TIMEOUT;
 800381e:	2003      	movs	r0, #3
 8003820:	e7e1      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 8003822:	f7ff f805 	bl	8002830 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003826:	4b0d      	ldr	r3, [pc, #52]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
        tickstart = HAL_GetTick();
 8003828:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382a:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382c:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382e:	e005      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003830:	f7fe fffe 	bl	8002830 <HAL_GetTick>
 8003834:	4643      	mov	r3, r8
 8003836:	1ac0      	subs	r0, r0, r3
 8003838:	4548      	cmp	r0, r9
 800383a:	d8f0      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383c:	6a2b      	ldr	r3, [r5, #32]
 800383e:	421e      	tst	r6, r3
 8003840:	d0f6      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8003842:	6860      	ldr	r0, [r4, #4]
 8003844:	e7b3      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	40021000 	.word	0x40021000
 800384c:	40007000 	.word	0x40007000
 8003850:	fffffcff 	.word	0xfffffcff
 8003854:	fffeffff 	.word	0xfffeffff
 8003858:	efffffff 	.word	0xefffffff
 800385c:	00001388 	.word	0x00001388

08003860 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003862:	4657      	mov	r7, sl
 8003864:	464e      	mov	r6, r9
 8003866:	4645      	mov	r5, r8
 8003868:	46de      	mov	lr, fp
 800386a:	b5e0      	push	{r5, r6, r7, lr}
 800386c:	001e      	movs	r6, r3
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800386e:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8003870:	0005      	movs	r5, r0
 8003872:	000f      	movs	r7, r1
 8003874:	0014      	movs	r4, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003876:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8003878:	2b20      	cmp	r3, #32
 800387a:	d150      	bne.n	800391e <HAL_UART_Transmit+0xbe>
    if ((pData == NULL) || (Size == 0U))
 800387c:	2900      	cmp	r1, #0
 800387e:	d054      	beq.n	800392a <HAL_UART_Transmit+0xca>
      return  HAL_ERROR;
 8003880:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003882:	2a00      	cmp	r2, #0
 8003884:	d04b      	beq.n	800391e <HAL_UART_Transmit+0xbe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	68aa      	ldr	r2, [r5, #8]
 800388a:	015b      	lsls	r3, r3, #5
 800388c:	429a      	cmp	r2, r3
 800388e:	d04e      	beq.n	800392e <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 8003890:	2370      	movs	r3, #112	; 0x70
 8003892:	5cea      	ldrb	r2, [r5, r3]
 8003894:	2a01      	cmp	r2, #1
 8003896:	d100      	bne.n	800389a <HAL_UART_Transmit+0x3a>
 8003898:	e0a6      	b.n	80039e8 <HAL_UART_Transmit+0x188>
 800389a:	2201      	movs	r2, #1
 800389c:	54ea      	strb	r2, [r5, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389e:	2300      	movs	r3, #0
 80038a0:	67eb      	str	r3, [r5, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038a2:	3321      	adds	r3, #33	; 0x21
 80038a4:	676b      	str	r3, [r5, #116]	; 0x74
    tickstart = HAL_GetTick();
 80038a6:	f7fe ffc3 	bl	8002830 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80038aa:	2350      	movs	r3, #80	; 0x50
      pdata16bits = NULL;
 80038ac:	2200      	movs	r2, #0
    huart->TxXferSize  = Size;
 80038ae:	52ec      	strh	r4, [r5, r3]
    huart->TxXferCount = Size;
 80038b0:	3302      	adds	r3, #2
 80038b2:	52ec      	strh	r4, [r5, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b4:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 80038b6:	4693      	mov	fp, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b8:	68aa      	ldr	r2, [r5, #8]
    tickstart = HAL_GetTick();
 80038ba:	4682      	mov	sl, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038bc:	015b      	lsls	r3, r3, #5
 80038be:	429a      	cmp	r2, r3
 80038c0:	d100      	bne.n	80038c4 <HAL_UART_Transmit+0x64>
 80038c2:	e0a4      	b.n	8003a0e <HAL_UART_Transmit+0x1ae>
    while (huart->TxXferCount > 0U)
 80038c4:	2352      	movs	r3, #82	; 0x52
 80038c6:	5aeb      	ldrh	r3, [r5, r3]
 80038c8:	682a      	ldr	r2, [r5, #0]
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ca:	2480      	movs	r4, #128	; 0x80
    while (huart->TxXferCount > 0U)
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d014      	beq.n	80038fa <HAL_UART_Transmit+0x9a>
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	4699      	mov	r9, r3
 80038d6:	1c73      	adds	r3, r6, #1
 80038d8:	d12f      	bne.n	800393a <HAL_UART_Transmit+0xda>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038da:	69d3      	ldr	r3, [r2, #28]
 80038dc:	421c      	tst	r4, r3
 80038de:	d0fc      	beq.n	80038da <HAL_UART_Transmit+0x7a>
      if (pdata8bits == NULL)
 80038e0:	2f00      	cmp	r7, #0
 80038e2:	d052      	beq.n	800398a <HAL_UART_Transmit+0x12a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038e4:	783b      	ldrb	r3, [r7, #0]
        pdata8bits++;
 80038e6:	3701      	adds	r7, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038e8:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80038ea:	2152      	movs	r1, #82	; 0x52
 80038ec:	5a6b      	ldrh	r3, [r5, r1]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	526b      	strh	r3, [r5, r1]
    while (huart->TxXferCount > 0U)
 80038f4:	5a6b      	ldrh	r3, [r5, r1]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1ea      	bne.n	80038d0 <HAL_UART_Transmit+0x70>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038fa:	2304      	movs	r3, #4
 80038fc:	4698      	mov	r8, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	011b      	lsls	r3, r3, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003902:	2740      	movs	r7, #64	; 0x40
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003904:	4699      	mov	r9, r3
 8003906:	1c73      	adds	r3, r6, #1
 8003908:	d148      	bne.n	800399c <HAL_UART_Transmit+0x13c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800390a:	2140      	movs	r1, #64	; 0x40
 800390c:	69d3      	ldr	r3, [r2, #28]
 800390e:	4219      	tst	r1, r3
 8003910:	d0fc      	beq.n	800390c <HAL_UART_Transmit+0xac>
    huart->gState = HAL_UART_STATE_READY;
 8003912:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003914:	2200      	movs	r2, #0
    return HAL_OK;
 8003916:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8003918:	676b      	str	r3, [r5, #116]	; 0x74
    __HAL_UNLOCK(huart);
 800391a:	3350      	adds	r3, #80	; 0x50
 800391c:	54ea      	strb	r2, [r5, r3]
}
 800391e:	bc3c      	pop	{r2, r3, r4, r5}
 8003920:	4690      	mov	r8, r2
 8003922:	4699      	mov	r9, r3
 8003924:	46a2      	mov	sl, r4
 8003926:	46ab      	mov	fp, r5
 8003928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800392a:	2001      	movs	r0, #1
 800392c:	e7f7      	b.n	800391e <HAL_UART_Transmit+0xbe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800392e:	692b      	ldr	r3, [r5, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1ad      	bne.n	8003890 <HAL_UART_Transmit+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003934:	4201      	tst	r1, r0
 8003936:	d0ab      	beq.n	8003890 <HAL_UART_Transmit+0x30>
 8003938:	e7f1      	b.n	800391e <HAL_UART_Transmit+0xbe>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393a:	69d3      	ldr	r3, [r2, #28]
 800393c:	4023      	ands	r3, r4
 800393e:	4698      	mov	r8, r3
 8003940:	d1ce      	bne.n	80038e0 <HAL_UART_Transmit+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003942:	f7fe ff75 	bl	8002830 <HAL_GetTick>
 8003946:	4653      	mov	r3, sl
 8003948:	682a      	ldr	r2, [r5, #0]
 800394a:	1ac0      	subs	r0, r0, r3
 800394c:	4286      	cmp	r6, r0
 800394e:	d34d      	bcc.n	80039ec <HAL_UART_Transmit+0x18c>
 8003950:	2e00      	cmp	r6, #0
 8003952:	d04b      	beq.n	80039ec <HAL_UART_Transmit+0x18c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003954:	2104      	movs	r1, #4
 8003956:	6813      	ldr	r3, [r2, #0]
 8003958:	4219      	tst	r1, r3
 800395a:	d0bc      	beq.n	80038d6 <HAL_UART_Transmit+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800395c:	4649      	mov	r1, r9
 800395e:	69d3      	ldr	r3, [r2, #28]
 8003960:	420b      	tst	r3, r1
 8003962:	d0b8      	beq.n	80038d6 <HAL_UART_Transmit+0x76>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003964:	6211      	str	r1, [r2, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003966:	6813      	ldr	r3, [r2, #0]
 8003968:	492c      	ldr	r1, [pc, #176]	; (8003a1c <HAL_UART_Transmit+0x1bc>)
        return HAL_TIMEOUT;
 800396a:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800396c:	400b      	ands	r3, r1
 800396e:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003970:	6893      	ldr	r3, [r2, #8]
 8003972:	31a3      	adds	r1, #163	; 0xa3
 8003974:	31ff      	adds	r1, #255	; 0xff
 8003976:	438b      	bics	r3, r1
 8003978:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 800397a:	2320      	movs	r3, #32
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800397c:	4642      	mov	r2, r8
          huart->gState = HAL_UART_STATE_READY;
 800397e:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003980:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003982:	67eb      	str	r3, [r5, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8003984:	3350      	adds	r3, #80	; 0x50
 8003986:	54ea      	strb	r2, [r5, r3]
 8003988:	e7c9      	b.n	800391e <HAL_UART_Transmit+0xbe>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800398a:	465b      	mov	r3, fp
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	05db      	lsls	r3, r3, #23
 8003990:	0ddb      	lsrs	r3, r3, #23
 8003992:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8003994:	2302      	movs	r3, #2
 8003996:	469c      	mov	ip, r3
 8003998:	44e3      	add	fp, ip
 800399a:	e7a6      	b.n	80038ea <HAL_UART_Transmit+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800399c:	69d4      	ldr	r4, [r2, #28]
 800399e:	403c      	ands	r4, r7
 80039a0:	d1b7      	bne.n	8003912 <HAL_UART_Transmit+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a2:	f7fe ff45 	bl	8002830 <HAL_GetTick>
 80039a6:	4653      	mov	r3, sl
 80039a8:	682a      	ldr	r2, [r5, #0]
 80039aa:	1ac0      	subs	r0, r0, r3
 80039ac:	4286      	cmp	r6, r0
 80039ae:	d31d      	bcc.n	80039ec <HAL_UART_Transmit+0x18c>
 80039b0:	2e00      	cmp	r6, #0
 80039b2:	d01b      	beq.n	80039ec <HAL_UART_Transmit+0x18c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039b4:	4641      	mov	r1, r8
 80039b6:	6813      	ldr	r3, [r2, #0]
 80039b8:	4219      	tst	r1, r3
 80039ba:	d0a4      	beq.n	8003906 <HAL_UART_Transmit+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039bc:	4649      	mov	r1, r9
 80039be:	69d3      	ldr	r3, [r2, #28]
 80039c0:	420b      	tst	r3, r1
 80039c2:	d0a0      	beq.n	8003906 <HAL_UART_Transmit+0xa6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039c4:	6211      	str	r1, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c6:	6813      	ldr	r3, [r2, #0]
 80039c8:	4914      	ldr	r1, [pc, #80]	; (8003a1c <HAL_UART_Transmit+0x1bc>)
      return HAL_TIMEOUT;
 80039ca:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039cc:	400b      	ands	r3, r1
 80039ce:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d0:	6893      	ldr	r3, [r2, #8]
 80039d2:	31a3      	adds	r1, #163	; 0xa3
 80039d4:	31ff      	adds	r1, #255	; 0xff
 80039d6:	438b      	bics	r3, r1
 80039d8:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 80039da:	2320      	movs	r3, #32
 80039dc:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80039de:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039e0:	67eb      	str	r3, [r5, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80039e2:	3350      	adds	r3, #80	; 0x50
 80039e4:	54ec      	strb	r4, [r5, r3]
 80039e6:	e79a      	b.n	800391e <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80039e8:	2002      	movs	r0, #2
 80039ea:	e798      	b.n	800391e <HAL_UART_Transmit+0xbe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ec:	6813      	ldr	r3, [r2, #0]
 80039ee:	490b      	ldr	r1, [pc, #44]	; (8003a1c <HAL_UART_Transmit+0x1bc>)
      return HAL_TIMEOUT;
 80039f0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039f2:	400b      	ands	r3, r1
 80039f4:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f6:	6893      	ldr	r3, [r2, #8]
 80039f8:	31a3      	adds	r1, #163	; 0xa3
 80039fa:	31ff      	adds	r1, #255	; 0xff
 80039fc:	438b      	bics	r3, r1
 80039fe:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003a00:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8003a02:	2200      	movs	r2, #0
        huart->gState = HAL_UART_STATE_READY;
 8003a04:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003a06:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8003a08:	3350      	adds	r3, #80	; 0x50
 8003a0a:	54ea      	strb	r2, [r5, r3]
 8003a0c:	e787      	b.n	800391e <HAL_UART_Transmit+0xbe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a0e:	692b      	ldr	r3, [r5, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d000      	beq.n	8003a16 <HAL_UART_Transmit+0x1b6>
 8003a14:	e756      	b.n	80038c4 <HAL_UART_Transmit+0x64>
 8003a16:	46bb      	mov	fp, r7
      pdata8bits  = NULL;
 8003a18:	2700      	movs	r7, #0
 8003a1a:	e753      	b.n	80038c4 <HAL_UART_Transmit+0x64>
 8003a1c:	fffffe5f 	.word	0xfffffe5f

08003a20 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a20:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003a22:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a24:	07da      	lsls	r2, r3, #31
 8003a26:	d506      	bpl.n	8003a36 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a28:	6801      	ldr	r1, [r0, #0]
 8003a2a:	4c28      	ldr	r4, [pc, #160]	; (8003acc <UART_AdvFeatureConfig+0xac>)
 8003a2c:	684a      	ldr	r2, [r1, #4]
 8003a2e:	4022      	ands	r2, r4
 8003a30:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003a32:	4322      	orrs	r2, r4
 8003a34:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a36:	079a      	lsls	r2, r3, #30
 8003a38:	d506      	bpl.n	8003a48 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a3a:	6801      	ldr	r1, [r0, #0]
 8003a3c:	4c24      	ldr	r4, [pc, #144]	; (8003ad0 <UART_AdvFeatureConfig+0xb0>)
 8003a3e:	684a      	ldr	r2, [r1, #4]
 8003a40:	4022      	ands	r2, r4
 8003a42:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003a44:	4322      	orrs	r2, r4
 8003a46:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a48:	075a      	lsls	r2, r3, #29
 8003a4a:	d506      	bpl.n	8003a5a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a4c:	6801      	ldr	r1, [r0, #0]
 8003a4e:	4c21      	ldr	r4, [pc, #132]	; (8003ad4 <UART_AdvFeatureConfig+0xb4>)
 8003a50:	684a      	ldr	r2, [r1, #4]
 8003a52:	4022      	ands	r2, r4
 8003a54:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003a56:	4322      	orrs	r2, r4
 8003a58:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a5a:	071a      	lsls	r2, r3, #28
 8003a5c:	d506      	bpl.n	8003a6c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a5e:	6801      	ldr	r1, [r0, #0]
 8003a60:	4c1d      	ldr	r4, [pc, #116]	; (8003ad8 <UART_AdvFeatureConfig+0xb8>)
 8003a62:	684a      	ldr	r2, [r1, #4]
 8003a64:	4022      	ands	r2, r4
 8003a66:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003a68:	4322      	orrs	r2, r4
 8003a6a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a6c:	06da      	lsls	r2, r3, #27
 8003a6e:	d506      	bpl.n	8003a7e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a70:	6801      	ldr	r1, [r0, #0]
 8003a72:	4c1a      	ldr	r4, [pc, #104]	; (8003adc <UART_AdvFeatureConfig+0xbc>)
 8003a74:	688a      	ldr	r2, [r1, #8]
 8003a76:	4022      	ands	r2, r4
 8003a78:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003a7a:	4322      	orrs	r2, r4
 8003a7c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a7e:	069a      	lsls	r2, r3, #26
 8003a80:	d506      	bpl.n	8003a90 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a82:	6801      	ldr	r1, [r0, #0]
 8003a84:	4c16      	ldr	r4, [pc, #88]	; (8003ae0 <UART_AdvFeatureConfig+0xc0>)
 8003a86:	688a      	ldr	r2, [r1, #8]
 8003a88:	4022      	ands	r2, r4
 8003a8a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003a8c:	4322      	orrs	r2, r4
 8003a8e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a90:	065a      	lsls	r2, r3, #25
 8003a92:	d50a      	bpl.n	8003aaa <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a94:	6801      	ldr	r1, [r0, #0]
 8003a96:	4d13      	ldr	r5, [pc, #76]	; (8003ae4 <UART_AdvFeatureConfig+0xc4>)
 8003a98:	684a      	ldr	r2, [r1, #4]
 8003a9a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003a9c:	402a      	ands	r2, r5
 8003a9e:	4322      	orrs	r2, r4
 8003aa0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aa2:	2280      	movs	r2, #128	; 0x80
 8003aa4:	0352      	lsls	r2, r2, #13
 8003aa6:	4294      	cmp	r4, r2
 8003aa8:	d009      	beq.n	8003abe <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aaa:	061b      	lsls	r3, r3, #24
 8003aac:	d506      	bpl.n	8003abc <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aae:	6802      	ldr	r2, [r0, #0]
 8003ab0:	490d      	ldr	r1, [pc, #52]	; (8003ae8 <UART_AdvFeatureConfig+0xc8>)
 8003ab2:	6853      	ldr	r3, [r2, #4]
 8003ab4:	400b      	ands	r3, r1
 8003ab6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6053      	str	r3, [r2, #4]
}
 8003abc:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003abe:	684a      	ldr	r2, [r1, #4]
 8003ac0:	4c0a      	ldr	r4, [pc, #40]	; (8003aec <UART_AdvFeatureConfig+0xcc>)
 8003ac2:	4022      	ands	r2, r4
 8003ac4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003ac6:	4322      	orrs	r2, r4
 8003ac8:	604a      	str	r2, [r1, #4]
 8003aca:	e7ee      	b.n	8003aaa <UART_AdvFeatureConfig+0x8a>
 8003acc:	fffdffff 	.word	0xfffdffff
 8003ad0:	fffeffff 	.word	0xfffeffff
 8003ad4:	fffbffff 	.word	0xfffbffff
 8003ad8:	ffff7fff 	.word	0xffff7fff
 8003adc:	ffffefff 	.word	0xffffefff
 8003ae0:	ffffdfff 	.word	0xffffdfff
 8003ae4:	ffefffff 	.word	0xffefffff
 8003ae8:	fff7ffff 	.word	0xfff7ffff
 8003aec:	ff9fffff 	.word	0xff9fffff

08003af0 <HAL_UART_Init>:
{
 8003af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af2:	46ce      	mov	lr, r9
 8003af4:	4647      	mov	r7, r8
 8003af6:	0004      	movs	r4, r0
 8003af8:	b580      	push	{r7, lr}
  if (huart == NULL)
 8003afa:	2800      	cmp	r0, #0
 8003afc:	d077      	beq.n	8003bee <HAL_UART_Init+0xfe>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003afe:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d06f      	beq.n	8003be4 <HAL_UART_Init+0xf4>
  huart->gState = HAL_UART_STATE_BUSY;
 8003b04:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003b06:	2101      	movs	r1, #1
 8003b08:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003b0a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003b0c:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b0e:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8003b10:	438b      	bics	r3, r1
 8003b12:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b14:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b16:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b18:	432b      	orrs	r3, r5
 8003b1a:	6965      	ldr	r5, [r4, #20]
 8003b1c:	69e1      	ldr	r1, [r4, #28]
 8003b1e:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b20:	4d8e      	ldr	r5, [pc, #568]	; (8003d5c <HAL_UART_Init+0x26c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b22:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b24:	4028      	ands	r0, r5
 8003b26:	4303      	orrs	r3, r0
 8003b28:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b2a:	6853      	ldr	r3, [r2, #4]
 8003b2c:	488c      	ldr	r0, [pc, #560]	; (8003d60 <HAL_UART_Init+0x270>)
  tmpreg |= huart->Init.OneBitSampling;
 8003b2e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b30:	4003      	ands	r3, r0
 8003b32:	68e0      	ldr	r0, [r4, #12]
 8003b34:	4303      	orrs	r3, r0
 8003b36:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8003b38:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b3a:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8003b3c:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b3e:	4d89      	ldr	r5, [pc, #548]	; (8003d64 <HAL_UART_Init+0x274>)
 8003b40:	4028      	ands	r0, r5
 8003b42:	4303      	orrs	r3, r0
 8003b44:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b46:	4b88      	ldr	r3, [pc, #544]	; (8003d68 <HAL_UART_Init+0x278>)
 8003b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	4a87      	ldr	r2, [pc, #540]	; (8003d6c <HAL_UART_Init+0x27c>)
 8003b50:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b52:	2280      	movs	r2, #128	; 0x80
 8003b54:	0212      	lsls	r2, r2, #8
 8003b56:	4291      	cmp	r1, r2
 8003b58:	d04e      	beq.n	8003bf8 <HAL_UART_Init+0x108>
    switch (clocksource)
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d100      	bne.n	8003b60 <HAL_UART_Init+0x70>
 8003b5e:	e0d6      	b.n	8003d0e <HAL_UART_Init+0x21e>
 8003b60:	d800      	bhi.n	8003b64 <HAL_UART_Init+0x74>
 8003b62:	e0cf      	b.n	8003d04 <HAL_UART_Init+0x214>
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d100      	bne.n	8003b6a <HAL_UART_Init+0x7a>
 8003b68:	e073      	b.n	8003c52 <HAL_UART_Init+0x162>
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d000      	beq.n	8003b70 <HAL_UART_Init+0x80>
 8003b6e:	e080      	b.n	8003c72 <HAL_UART_Init+0x182>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003b70:	6863      	ldr	r3, [r4, #4]
 8003b72:	0858      	lsrs	r0, r3, #1
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	469c      	mov	ip, r3
 8003b7a:	6861      	ldr	r1, [r4, #4]
 8003b7c:	4460      	add	r0, ip
 8003b7e:	f7fc fac3 	bl	8000108 <__udivsi3>
 8003b82:	0400      	lsls	r0, r0, #16
 8003b84:	0c00      	lsrs	r0, r0, #16
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b86:	0003      	movs	r3, r0
 8003b88:	4a79      	ldr	r2, [pc, #484]	; (8003d70 <HAL_UART_Init+0x280>)
 8003b8a:	3b10      	subs	r3, #16
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d900      	bls.n	8003b92 <HAL_UART_Init+0xa2>
 8003b90:	e06f      	b.n	8003c72 <HAL_UART_Init+0x182>
  huart->RxISR = NULL;
 8003b92:	2200      	movs	r2, #0
      huart->Instance->BRR = usartdiv;
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8003b98:	6622      	str	r2, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003b9a:	6662      	str	r2, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003b9e:	2a00      	cmp	r2, #0
 8003ba0:	d152      	bne.n	8003c48 <HAL_UART_Init+0x158>
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003ba2:	2508      	movs	r5, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	4973      	ldr	r1, [pc, #460]	; (8003d74 <HAL_UART_Init+0x284>)
 8003ba8:	400a      	ands	r2, r1
  __HAL_UART_ENABLE(huart);
 8003baa:	2101      	movs	r1, #1
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003bac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	43aa      	bics	r2, r5
 8003bb2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	67e3      	str	r3, [r4, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003bbe:	f7fe fe37 	bl	8002830 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bc2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003bc4:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4215      	tst	r5, r2
 8003bca:	d157      	bne.n	8003c7c <HAL_UART_Init+0x18c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	0752      	lsls	r2, r2, #29
 8003bd0:	d500      	bpl.n	8003bd4 <HAL_UART_Init+0xe4>
 8003bd2:	e07d      	b.n	8003cd0 <HAL_UART_Init+0x1e0>
  huart->gState = HAL_UART_STATE_READY;
 8003bd4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003bd6:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8003bd8:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003bda:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003bdc:	3350      	adds	r3, #80	; 0x50
 8003bde:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8003be0:	2000      	movs	r0, #0
 8003be2:	e005      	b.n	8003bf0 <HAL_UART_Init+0x100>
    huart->Lock = HAL_UNLOCKED;
 8003be4:	2270      	movs	r2, #112	; 0x70
 8003be6:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8003be8:	f7fe fd6e 	bl	80026c8 <HAL_UART_MspInit>
 8003bec:	e78a      	b.n	8003b04 <HAL_UART_Init+0x14>
    return HAL_ERROR;
 8003bee:	2001      	movs	r0, #1
}
 8003bf0:	bc0c      	pop	{r2, r3}
 8003bf2:	4690      	mov	r8, r2
 8003bf4:	4699      	mov	r9, r3
 8003bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (clocksource)
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d100      	bne.n	8003bfe <HAL_UART_Init+0x10e>
 8003bfc:	e0a1      	b.n	8003d42 <HAL_UART_Init+0x252>
 8003bfe:	d800      	bhi.n	8003c02 <HAL_UART_Init+0x112>
 8003c00:	e0a3      	b.n	8003d4a <HAL_UART_Init+0x25a>
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d100      	bne.n	8003c08 <HAL_UART_Init+0x118>
 8003c06:	e095      	b.n	8003d34 <HAL_UART_Init+0x244>
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d132      	bne.n	8003c72 <HAL_UART_Init+0x182>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c0c:	6863      	ldr	r3, [r4, #4]
 8003c0e:	0858      	lsrs	r0, r3, #1
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	025b      	lsls	r3, r3, #9
 8003c14:	469c      	mov	ip, r3
 8003c16:	4460      	add	r0, ip
 8003c18:	6861      	ldr	r1, [r4, #4]
 8003c1a:	f7fc fa75 	bl	8000108 <__udivsi3>
 8003c1e:	0400      	lsls	r0, r0, #16
 8003c20:	0c00      	lsrs	r0, r0, #16
 8003c22:	0003      	movs	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c24:	4a52      	ldr	r2, [pc, #328]	; (8003d70 <HAL_UART_Init+0x280>)
 8003c26:	3b10      	subs	r3, #16
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d822      	bhi.n	8003c72 <HAL_UART_Init+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c2c:	230f      	movs	r3, #15
 8003c2e:	0002      	movs	r2, r0
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c30:	0700      	lsls	r0, r0, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c32:	439a      	bics	r2, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c34:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8003c36:	4310      	orrs	r0, r2
  huart->RxISR = NULL;
 8003c38:	2200      	movs	r2, #0
      huart->Instance->BRR = brrtemp;
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8003c3e:	6622      	str	r2, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003c40:	6662      	str	r2, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c44:	2a00      	cmp	r2, #0
 8003c46:	d0ac      	beq.n	8003ba2 <HAL_UART_Init+0xb2>
    UART_AdvFeatureConfig(huart);
 8003c48:	0020      	movs	r0, r4
 8003c4a:	f7ff fee9 	bl	8003a20 <UART_AdvFeatureConfig>
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	e7a7      	b.n	8003ba2 <HAL_UART_Init+0xb2>
        pclk = HAL_RCC_GetSysClockFreq();
 8003c52:	f7ff fd2f 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c56:	6863      	ldr	r3, [r4, #4]
 8003c58:	6861      	ldr	r1, [r4, #4]
 8003c5a:	085b      	lsrs	r3, r3, #1
 8003c5c:	1818      	adds	r0, r3, r0
 8003c5e:	f7fc fa53 	bl	8000108 <__udivsi3>
 8003c62:	0400      	lsls	r0, r0, #16
 8003c64:	0c00      	lsrs	r0, r0, #16
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c66:	0003      	movs	r3, r0
 8003c68:	4a41      	ldr	r2, [pc, #260]	; (8003d70 <HAL_UART_Init+0x280>)
 8003c6a:	3b10      	subs	r3, #16
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d800      	bhi.n	8003c72 <HAL_UART_Init+0x182>
 8003c70:	e78f      	b.n	8003b92 <HAL_UART_Init+0xa2>
  huart->RxISR = NULL;
 8003c72:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003c74:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8003c76:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003c78:	6663      	str	r3, [r4, #100]	; 0x64
 8003c7a:	e7b9      	b.n	8003bf0 <HAL_UART_Init+0x100>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7c:	4a3e      	ldr	r2, [pc, #248]	; (8003d78 <HAL_UART_Init+0x288>)
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7e:	2780      	movs	r7, #128	; 0x80
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c80:	4690      	mov	r8, r2
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c82:	2204      	movs	r2, #4
 8003c84:	4691      	mov	r9, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c86:	03bf      	lsls	r7, r7, #14
 8003c88:	69dd      	ldr	r5, [r3, #28]
 8003c8a:	403d      	ands	r5, r7
 8003c8c:	d19e      	bne.n	8003bcc <HAL_UART_Init+0xdc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8e:	f7fe fdcf 	bl	8002830 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c92:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c94:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c96:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c98:	4540      	cmp	r0, r8
 8003c9a:	d83c      	bhi.n	8003d16 <HAL_UART_Init+0x226>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	4211      	tst	r1, r2
 8003ca0:	d0f2      	beq.n	8003c88 <HAL_UART_Init+0x198>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ca2:	2280      	movs	r2, #128	; 0x80
 8003ca4:	69d9      	ldr	r1, [r3, #28]
 8003ca6:	0112      	lsls	r2, r2, #4
 8003ca8:	4211      	tst	r1, r2
 8003caa:	d0ed      	beq.n	8003c88 <HAL_UART_Init+0x198>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cac:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4932      	ldr	r1, [pc, #200]	; (8003d7c <HAL_UART_Init+0x28c>)
      return HAL_TIMEOUT;
 8003cb2:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	31a3      	adds	r1, #163	; 0xa3
 8003cbc:	31ff      	adds	r1, #255	; 0xff
 8003cbe:	438a      	bics	r2, r1
 8003cc0:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003cc2:	2320      	movs	r3, #32
 8003cc4:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003cc6:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cc8:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8003cca:	3350      	adds	r3, #80	; 0x50
 8003ccc:	54e5      	strb	r5, [r4, r3]
 8003cce:	e78f      	b.n	8003bf0 <HAL_UART_Init+0x100>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd0:	4a29      	ldr	r2, [pc, #164]	; (8003d78 <HAL_UART_Init+0x288>)
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd2:	2780      	movs	r7, #128	; 0x80
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd4:	4690      	mov	r8, r2
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	4691      	mov	r9, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cda:	03ff      	lsls	r7, r7, #15
 8003cdc:	69dd      	ldr	r5, [r3, #28]
 8003cde:	403d      	ands	r5, r7
 8003ce0:	d000      	beq.n	8003ce4 <HAL_UART_Init+0x1f4>
 8003ce2:	e777      	b.n	8003bd4 <HAL_UART_Init+0xe4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce4:	f7fe fda4 	bl	8002830 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ce8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cea:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cec:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cee:	4540      	cmp	r0, r8
 8003cf0:	d811      	bhi.n	8003d16 <HAL_UART_Init+0x226>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cf2:	4649      	mov	r1, r9
 8003cf4:	4211      	tst	r1, r2
 8003cf6:	d0f1      	beq.n	8003cdc <HAL_UART_Init+0x1ec>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cf8:	2280      	movs	r2, #128	; 0x80
 8003cfa:	69d9      	ldr	r1, [r3, #28]
 8003cfc:	0112      	lsls	r2, r2, #4
 8003cfe:	4211      	tst	r1, r2
 8003d00:	d0ec      	beq.n	8003cdc <HAL_UART_Init+0x1ec>
 8003d02:	e7d3      	b.n	8003cac <HAL_UART_Init+0x1bc>
    switch (clocksource)
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1b4      	bne.n	8003c72 <HAL_UART_Init+0x182>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d08:	f7ff fd0a 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 8003d0c:	e7a3      	b.n	8003c56 <HAL_UART_Init+0x166>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003d0e:	6863      	ldr	r3, [r4, #4]
 8003d10:	0858      	lsrs	r0, r3, #1
 8003d12:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <HAL_UART_Init+0x290>)
 8003d14:	e730      	b.n	8003b78 <HAL_UART_Init+0x88>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d16:	4919      	ldr	r1, [pc, #100]	; (8003d7c <HAL_UART_Init+0x28c>)
      return HAL_TIMEOUT;
 8003d18:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d1a:	400a      	ands	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	31a3      	adds	r1, #163	; 0xa3
 8003d22:	31ff      	adds	r1, #255	; 0xff
 8003d24:	438a      	bics	r2, r1
 8003d26:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003d28:	2320      	movs	r3, #32
 8003d2a:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8003d2e:	3350      	adds	r3, #80	; 0x50
 8003d30:	54e5      	strb	r5, [r4, r3]
 8003d32:	e75d      	b.n	8003bf0 <HAL_UART_Init+0x100>
        pclk = HAL_RCC_GetSysClockFreq();
 8003d34:	f7ff fcbe 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d38:	6863      	ldr	r3, [r4, #4]
 8003d3a:	0040      	lsls	r0, r0, #1
 8003d3c:	085b      	lsrs	r3, r3, #1
 8003d3e:	18c0      	adds	r0, r0, r3
 8003d40:	e76a      	b.n	8003c18 <HAL_UART_Init+0x128>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003d42:	6863      	ldr	r3, [r4, #4]
 8003d44:	0858      	lsrs	r0, r3, #1
 8003d46:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <HAL_UART_Init+0x294>)
 8003d48:	e764      	b.n	8003c14 <HAL_UART_Init+0x124>
    switch (clocksource)
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d191      	bne.n	8003c72 <HAL_UART_Init+0x182>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d4e:	f7ff fce7 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d52:	6863      	ldr	r3, [r4, #4]
 8003d54:	0040      	lsls	r0, r0, #1
 8003d56:	085b      	lsrs	r3, r3, #1
 8003d58:	18c0      	adds	r0, r0, r3
 8003d5a:	e75d      	b.n	8003c18 <HAL_UART_Init+0x128>
 8003d5c:	ffff69f3 	.word	0xffff69f3
 8003d60:	ffffcfff 	.word	0xffffcfff
 8003d64:	fffff4ff 	.word	0xfffff4ff
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	08003f30 	.word	0x08003f30
 8003d70:	0000ffef 	.word	0x0000ffef
 8003d74:	fffff7ff 	.word	0xfffff7ff
 8003d78:	01ffffff 	.word	0x01ffffff
 8003d7c:	fffffe5f 	.word	0xfffffe5f
 8003d80:	007a1200 	.word	0x007a1200
 8003d84:	00f42400 	.word	0x00f42400

08003d88 <__libc_init_array>:
 8003d88:	b570      	push	{r4, r5, r6, lr}
 8003d8a:	2600      	movs	r6, #0
 8003d8c:	4d0c      	ldr	r5, [pc, #48]	; (8003dc0 <__libc_init_array+0x38>)
 8003d8e:	4c0d      	ldr	r4, [pc, #52]	; (8003dc4 <__libc_init_array+0x3c>)
 8003d90:	1b64      	subs	r4, r4, r5
 8003d92:	10a4      	asrs	r4, r4, #2
 8003d94:	42a6      	cmp	r6, r4
 8003d96:	d109      	bne.n	8003dac <__libc_init_array+0x24>
 8003d98:	2600      	movs	r6, #0
 8003d9a:	f000 f821 	bl	8003de0 <_init>
 8003d9e:	4d0a      	ldr	r5, [pc, #40]	; (8003dc8 <__libc_init_array+0x40>)
 8003da0:	4c0a      	ldr	r4, [pc, #40]	; (8003dcc <__libc_init_array+0x44>)
 8003da2:	1b64      	subs	r4, r4, r5
 8003da4:	10a4      	asrs	r4, r4, #2
 8003da6:	42a6      	cmp	r6, r4
 8003da8:	d105      	bne.n	8003db6 <__libc_init_array+0x2e>
 8003daa:	bd70      	pop	{r4, r5, r6, pc}
 8003dac:	00b3      	lsls	r3, r6, #2
 8003dae:	58eb      	ldr	r3, [r5, r3]
 8003db0:	4798      	blx	r3
 8003db2:	3601      	adds	r6, #1
 8003db4:	e7ee      	b.n	8003d94 <__libc_init_array+0xc>
 8003db6:	00b3      	lsls	r3, r6, #2
 8003db8:	58eb      	ldr	r3, [r5, r3]
 8003dba:	4798      	blx	r3
 8003dbc:	3601      	adds	r6, #1
 8003dbe:	e7f2      	b.n	8003da6 <__libc_init_array+0x1e>
 8003dc0:	08003f34 	.word	0x08003f34
 8003dc4:	08003f34 	.word	0x08003f34
 8003dc8:	08003f34 	.word	0x08003f34
 8003dcc:	08003f38 	.word	0x08003f38

08003dd0 <memset>:
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	1812      	adds	r2, r2, r0
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d100      	bne.n	8003dda <memset+0xa>
 8003dd8:	4770      	bx	lr
 8003dda:	7019      	strb	r1, [r3, #0]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	e7f9      	b.n	8003dd4 <memset+0x4>

08003de0 <_init>:
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de6:	bc08      	pop	{r3}
 8003de8:	469e      	mov	lr, r3
 8003dea:	4770      	bx	lr

08003dec <_fini>:
 8003dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df2:	bc08      	pop	{r3}
 8003df4:	469e      	mov	lr, r3
 8003df6:	4770      	bx	lr
